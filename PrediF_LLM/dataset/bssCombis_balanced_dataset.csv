project,sha,module,brittle,SS/NSS,isBSSPair,brittle_code,ss_or_nss_code
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue4() throws Exception {
        String text = ""{\""createTime\"":1548166745}"";

        Order4 o = JSON.parseObject(text, Order4.class);
        assertEquals(1548166745L, o.createTime.toEpochSecond());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":1548166745}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_for_zero,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_zero() throws Exception {
        String text = ""{\""date\"":\""0000-00-00\""}"";

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"");
        Object object = format.parse(""0000-00-00"");
        JSON.parseObject(text, Model.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2100.Issue2156.test_for_issue_time,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue_time() throws Exception {
        java.sql.Time date = java.sql.Time.valueOf(""12:13:14"");
        String str = JSON.toJSONStringWithDateFormat(date, JSON.DEFFAULT_DATE_FORMAT);
        assertEquals(""\""12:13:14\"""", str);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1400.Issue1493.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {

        TestBean test = new TestBean();
        String stime2 = ""2017-09-22T15:08:56"";

        LocalDateTime time1 = LocalDateTime.now();
        time1 = time1.minusNanos(10L);
        System.out.println(time1.getNano());
        LocalDateTime time2 = LocalDateTime.parse(stime2);
        test.setTime1(time1);
        test.setTime2(time2);
        String t1 = JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat);

        String json = JSON.toJSONString(test, SerializerFeature.WriteDateUseDateFormat);
        Assert.assertEquals(""{\""time1\"":""+t1+"",\""time2\"":\""""+stime2+""\""}"",json);


        //String default_format = JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT;
        //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
        //String stime1 = DateTimeFormatter.ofPattern(JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT, Locale.CHINA).format(time1);

        json = JSON.toJSONString(test, SerializerFeature.WriteDateUseDateFormat);
        Assert.assertEquals(""{\""time1\"":""+ JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) +"",\""time2\"":\""""+stime2+""\""}"",json);


        String pattern = ""yyyy-MM-dd'T'HH:mm:ss"";
        String stime1 = DateTimeFormatter.ofPattern(pattern, Locale.CHINA).format(time1);

        json = JSON.toJSONStringWithDateFormat(test, ""yyyy-MM-dd'T'HH:mm:ss"", SerializerFeature.WriteDateUseDateFormat);
        Assert.assertEquals(""{\""time1\"":\""""+stime1+""\"",\""time2\"":\""""+stime2+""\""}"",json);

        //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = default_format;
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_toJavaObject,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_toJavaObject() throws Exception {
        JSONObject obj = new JSONObject();
        obj.put(""d1"", new Date());
        obj.put(""d2"", System.currentTimeMillis());
        obj.put(""d3"", GregorianCalendar.getInstance());
        obj.put(""d4"", ""2012-12-22"");
        obj.put(""d5"", ""2012-12-22 12:11:11"");
        obj.put(""d6"", ""2012-12-22 12:11:11.234"");
        
        obj.getObject(""d1"", Calendar.class);
        obj.getObject(""d2"", Calendar.class);
        obj.getObject(""d3"", Calendar.class);
        obj.getObject(""d4"", Calendar.class);
        obj.getObject(""d5"", Calendar.class);
        obj.getObject(""d6"", Calendar.class);

        obj.getObject(""d1"", GregorianCalendar.class);
        obj.getObject(""d2"", GregorianCalendar.class);
        obj.getObject(""d3"", GregorianCalendar.class);
        obj.getObject(""d4"", GregorianCalendar.class);
        obj.getObject(""d5"", GregorianCalendar.class);
        obj.getObject(""d6"", GregorianCalendar.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_dateFormat,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_dateFormat() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""{}"");
        parser.setDateFormat(""yyyy-DD-mm"");
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-DD-mm"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        
        parser.setDateFomrat(format);
        parser.getDateFomartPattern();
        parser.getDateFormat();
        parser.parse();
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest2.test_codec,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec() throws Exception {
        SerializeConfig mapping = new SerializeConfig();

        V0 v = new V0();
        v.setValue(new Date());

        String text = JSON.toJSONString(v, mapping);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.JSONSerializerTest3.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
        JSONSerializer serializer = new JSONSerializer();

        serializer.setDateFormat(""yyyy"");
        Assert.assertEquals(""yyyy"", ((SimpleDateFormat) serializer.getDateFormat()).toPattern());
        Assert.assertEquals(""yyyy"",  serializer.getDateFormatPattern());
        
        serializer.setDateFormat(""yyyy-MM"");
        Assert.assertEquals(""yyyy-MM"", ((SimpleDateFormat) serializer.getDateFormat()).toPattern());
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"");
        format.setTimeZone(JSON.defaultTimeZone);
        serializer.setDateFormat(format);
        Assert.assertEquals(""yyyy-MM-dd"",  serializer.getDateFormatPattern());
        
        serializer.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_6,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_6() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);

        java.util.Date date = JSON.parseObject(""{d:\""2011-01-09T13:49:53\""}"", Entity.class, Feature.AllowISO8601DateFormat).getD();

        Assert.assertEquals(new java.util.Date(1294552193000L), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_lenolix_8.test_for_objectKey,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_objectKey() throws Exception {
        DateFormat simpleDateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        simpleDateFormat.setTimeZone(JSON.defaultTimeZone);
        Map<Integer, User> map = new HashMap<Integer, User>();

        User user = new User();
        user.setId(1);
        user.setIsBoy(true);
        user.setName(""leno.lix"");
        user.setBirthDay(simpleDateFormat.parse(""2012-03-07 22:38:21""));
        user.setGmtCreate(new java.sql.Date(simpleDateFormat.parse(""2012-02-03 22:38:21"").getTime()));

        map.put(1, user);

        String mapJson = JSON.toJSONString(map, SerializerFeature.WriteClassName, SerializerFeature.WriteMapNullValue);

        System.out.println(mapJson);

        Object object = JSON.parse(mapJson);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
        VO vo = new VO();
        vo.setCalendar(Calendar.getInstance());

        String text = JSON.toJSONString(vo);

        VO vo1 = JSON.parseObject(text, VO.class);
        Assert.assertEquals(vo.getCalendar().getTime(), vo1.getCalendar().getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_null_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_1() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullNumberAsZero);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(null, v1.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_0.test_for_long,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text, VO.class);
        Assert.assertEquals(2017, vo.date.getYear());
        Assert.assertEquals(11, vo.date.getMonthOfYear());
        Assert.assertEquals(21, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_null,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_dateFormat_null() throws Exception {
        VO vo = JSON.parseObject(""{\""format\"":null}"", VO.class);
        Assert.assertEquals(null, vo.getFormat());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue2() throws Exception {
        String text = ""{\""createTime\"":1548166745}"";

        Order2 o = JSON.parseObject(text, Order2.class);
        assertEquals(1548166745000L, o.createTime.getTimeInMillis());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":1548166745}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_6,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_6() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502460000L));

        Assert.assertEquals(""\""2011-01-09T00:01:00+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest5_iso8601.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        Date date1 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12\""}"", VO.class).getGmtCreate();
        assertNotNull(date1);
        Date date2 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19+00:00\""}"", VO.class).getGmtCreate();
        Date date3 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19Z\""}"", VO.class).getGmtCreate();
        Date date4 = JSON.parseObject(""{\""gmtCreate\"":\""20180912T151019Z\""}"", VO.class).getGmtCreate();
        Date date5 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19Z\""}"", VO.class).getGmtCreate();
        Date date6 = JSON.parseObject(""{\""gmtCreate\"":\""20180912\""}"", VO.class).getGmtCreate();

        long delta_2_1 = date2.getTime() - date1.getTime();
        assertEquals(83419000, delta_2_1);

        long delta_3_1 = date3.getTime() - date1.getTime();
        assertEquals(83419000, delta_3_1);

        long delta_4_3 = date4.getTime() - date3.getTime();
        assertEquals(0, delta_4_3);

        long delta_5_4 = date5.getTime() - date4.getTime();
        assertEquals(0, delta_5_4);

        long delta_6_1 = date6.getTime() - date1.getTime();
        assertEquals(0, delta_6_1);


    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_2() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"", ParserConfig.getGlobalInstance(), features);

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest11_reader.test_cn_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn_1() throws Exception {
        Model vo = new JSONReader(new StringReader(""{\""date0\"":1462464000000,\""date1\"":1488297600000}"")).readObject(Model.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);

        calendar.setTime(vo.date0);
        assertEquals(2016, calendar.get(Calendar.YEAR));
        assertEquals(4, calendar.get(Calendar.MONTH));
        assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));

        calendar.setTime(vo.date1);
        assertEquals(2017, calendar.get(Calendar.YEAR));
        assertEquals(2, calendar.get(Calendar.MONTH));
        assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));

        System.out.println(vo.date0.getTime());
        System.out.println(vo.date1.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_cn,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016-05-06\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_kr_3() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??05�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1200.Issue1298.test_for_issue_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue_1() throws Exception {
        JSONObject object = new JSONObject();

        object.put(""date"", ""2017-08-15 20:00:00.000"");

        Date date = object.getObject(""date"", java.util.Date.class);

        assertEquals(""\""2017-08-15T20:00:00+08:00\"""", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat));

        JSON.parseObject(""\""2017-08-15 20:00:00.000\"""", java.util.Date.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_no_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_no_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest8.test_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_1() throws Exception {
        Entity object = new Entity();
        object.setValue(new Date());
        String text = JSON.toJSONString(object);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"",
                            text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_new_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_new_1() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"");

        java.util.Date date = (java.util.Date) parser.parse();

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest2.test_enum_noasm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_enum_noasm() throws Exception {
        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);
        
        Date date = new Date(1308841916550L);
        Assert.assertEquals(""1308841916550"", JSON.toJSONString(date, mapping)); // 1308841916550
        Assert.assertEquals(""\""2011-06-23T23:11:56.550+08:00\"""", JSON.toJSONString(date, mapping, SerializerFeature.UseISO8601DateFormat)); // ""2011-06-23T23:11:56.550""
        SerializerFeature[] features = {SerializerFeature.UseISO8601DateFormat, SerializerFeature.UseSingleQuotes };
        Assert.assertEquals(""'2011-06-23T23:11:56.550+08:00'"", JSON.toJSONString(date, mapping, features)); // '2011-06-23T23:11:56.550'
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_0.test_for_issue_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue_2() throws Exception {
        VO vo = JSON.parseObject(""{\""date\"":\""20160506\""}"", VO.class);

        Assert.assertEquals(2016, vo.date.getYear());
        Assert.assertEquals(5, vo.date.getMonthOfYear());
        Assert.assertEquals(6, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_5,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_5() throws Exception {
        String text = ""{\""date\"":\""2018-05-21T14:39:44.907+08:00\""}"";
        Model model = JSON.parseObject(text, Model.class);
        String str = JSON.toJSONString(model, SerializerFeature.UseISO8601DateFormat);
        assertEquals(""{\""date\"":\""2018-05-21T14:39:44.907+08:00\""}"", str);

//        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
//        Date object = format.parse(""2018-05-21T14:39:44.9077913+08:00"");
//        assertEquals(object.getTime(), model.date.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_null_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_1() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullNumberAsZero);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(null, v1.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_8,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_8() throws Exception {
        String text = JSON.toJSONString(new Date(1294506000000L), SerializerFeature.UseISO8601DateFormat);
        Assert.assertEquals(""\""2011-01-09T01:00:00+08:00\"""", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_tw,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_tw() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016/05/06\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_kr_2() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??5�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date3() {
        String text = ""{\""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\\t\"":\""xxxxx\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(""xxxxx"", json.get(""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\t""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_80108116.test_for_dateFormat,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_dateFormat() throws Exception {
        VO vo = new VO();
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        vo.setDate(dateFormat.parse(""2012-07-12""));

        List<VO> voList = new ArrayList<VO>();
        voList.add(vo);

        String text = JSON.toJSONString(voList);
        Assert.assertEquals(""[{\""date\"":\""2012-07-12\""}]"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_in,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_in() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""06-05-2016\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Issue978.test_for_issue2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue2() throws Exception {
        Model model = new Model();
        model.date = new java.sql.Date(1483413683714L);

        JSONObject obj = (JSONObject) JSON.toJSON(model);
        assertEquals(""{\""date\"":\""2017-01-03 11:21:23\""}"", obj.toJSONString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1200.Issue1202.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        String text = ""{\""date\"":\""Apr 27, 2017 5:02:17 PM\""}"";
        Model model = JSON.parseObject(text, Model.class);
        assertNotNull(model.date);
//        assertEquals(""{\""date\"":\""Apr 27, 2017 5:02:17 PM\""}"", JSON.toJSONString(model));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date_null,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_null() throws Exception {
        Model model = JSON.parseObject(""[null,null]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertNull(model.v1);
        Assert.assertNull(model.v2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest10.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""{\""value\"":\""1979-07-14\""}"";
        VO vo = JSON.parseObject(text, VO.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(vo.getValue(), dateFormat.parse(""1979-07-14"").getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateTest.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        long millis = 1324138987429L;
        Date date = new Date(millis);

        Assert.assertEquals(""1324138987429"", JSON.toJSONString(date));
        Assert.assertEquals(""new Date(1324138987429)"", JSON.toJSONString(date, SerializerFeature.WriteClassName));

        Assert.assertEquals(""\""2011-12-18 00:23:07\"""",
                            JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat));
        Assert.assertEquals(""\""2011-12-18 00:23:07.429\"""",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS""));
        Assert.assertEquals(""'2011-12-18 00:23:07.429'"",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS"",
                                                            SerializerFeature.UseSingleQuotes));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() {
        String text = ""{\""date\"":\""2011-01-09T13:49:53.254\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(new Date(1294552193254L), json.get(""date""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1900.Issue1977.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        java.sql.Date date = new java.sql.Date(1533265119604L);
        String json = JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat);
        assertEquals(""\""2018-08-03T10:58:39.604+08:00\"""", json);
//        new java.sql.Date();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest12_t.test_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_1() throws Exception {
        Entity object = new Entity();
        object.setValue(new Date());
        String text = JSON.toJSONString(object);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"",
                            text);

        Entity object2 = JSON.parseObject(text, Entity.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_3_LocalTimeTest.test_for_long,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(15, vo.date.getHourOfDay());
        Assert.assertEquals(14, vo.date.getMinuteOfHour());
        Assert.assertEquals(07, vo.date.getSecondOfMinute());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1600.Issue1660.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        Model model = new Model();
        model.values.add(new Date(1513755213202L));

        String json = JSON.toJSONString(model);
        assertEquals(""{\""values\"":[\""2017-12-20\""]}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest8.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        System.out.println(System.currentTimeMillis());
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        System.out.println(dateFormat.parse(""1970-01-01 20:00:01"").getTime());
        System.out.println(new Date().toString());
        
        //1369273142603
        String text = ""\""19790714130723456\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(456, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_no_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_no_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_error,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_dateFormat_error() throws Exception {
        Exception error = null;
        try {
            JSON.parseObject(""{\""format\"":123}"", VO.class);
        } catch (Exception e) {
            error = e;
        }
        Assert.assertNotNull(error);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1900.Issue1901.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        Model m = JSON.parseObject(""{\""time\"":\""Thu Mar 22 08:58:37 +0000 2018\""}"", Model.class);
        assertEquals(""{\""time\"":\""�ｿｽ??�ｿｽ??�ｿｽ?? �ｿｽ?�ｿｽ?? 22 16:58:37 CST 2018\""}"", JSON.toJSONString(m));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.jdk8.LocalDateTest.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalDate.now());
        
        String text = JSON.toJSONString(vo);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Issue978.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        Model model = new Model();
        model.date = new java.util.Date(1483413683714L);

        JSONObject obj = (JSONObject) JSON.toJSON(model);
        assertEquals(""{\""date\"":\""2017-01-03 11:21:23\""}"", obj.toJSONString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.TimestampTest.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0 () throws Exception {
        long millis = (System.currentTimeMillis() / 1000) * 1000;
        
        SimpleDateFormat format = new SimpleDateFormat(JSON.DEFFAULT_DATE_FORMAT, JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        String text = ""\"""" + format.format(new Date(millis)) + ""\"""";
        System.out.println(text);
        Assert.assertEquals(new Timestamp(millis), JSON.parseObject("""" + millis, Timestamp.class));
        Assert.assertEquals(new Timestamp(millis), JSON.parseObject(""\"""" + millis + ""\"""", Timestamp.class));
        Assert.assertEquals(new Timestamp(millis), JSON.parseObject(text, Timestamp.class));
        Assert.assertEquals(new java.sql.Date(millis), JSON.parseObject(text, java.sql.Date.class));
        Assert.assertEquals(new java.util.Date(millis), JSON.parseObject(text, java.util.Date.class));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest3.test_codec,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec() throws Exception {
        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));

        V0 v = new V0();
        v.setValue(new Date());

        String text = JSON.toJSONString(v, mapping);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1900.Issue1901.test_for_issue_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue_1() throws Exception {
        Model m = JSON.parseObject(""{\""time\"":\""�ｿｽ??�ｿｽ??�ｿｽ?? �ｿｽ?�ｿｽ?? 22 16:58:37 CST 2018\""}"", Model.class);
        assertEquals(""{\""time\"":\""�ｿｽ??�ｿｽ??�ｿｽ?? �ｿｽ?�ｿｽ?? 22 16:58:37 CST 2018\""}"", JSON.toJSONString(m));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);

        Assert.assertEquals(false, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294552193254L));

        Assert.assertEquals(""1294552193254"", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate_zero,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_castToDate_zero() throws Exception {
        Assert.assertEquals(new Date(0), TypeUtils.castToDate(""0""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_null_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_1() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullNumberAsZero);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(null, v1.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date2() {
        String text = ""{\""date\"":\""xxxxx\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(""xxxxx"", json.get(""date""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_4() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09\"""", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294502400000L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_null_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date2_reader,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date2_reader() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);

        Model model = new JSONReader(new StringReader(""[\""2016-01-01\"",\""2016-01-02\""]""), Feature.SupportArrayToBean).readObject(Model.class);
        Assert.assertEquals(dateFormat.parse(""2016-01-01"").getTime(), model.v1.getTime());
        Assert.assertEquals(dateFormat.parse(""2016-01-02"").getTime(), model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_3() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53\"""", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294552193000L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_yyyy,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_dateFormat_yyyy() throws Exception {
        VO vo = JSON.parseObject(""{\""format\"":\""yyyy\""}"", VO.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat, vo.getFormat());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue3() throws Exception {
        String text = ""{\""createTime\"":\""20180714224948\""}"";

        Order3 o = JSON.parseObject(text, Order3.class);
        assertEquals(1531579788000L, o.createTime.getTimeInMillis());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":\""20180714224948\""}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_lenolix_11.test_for_objectKey,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_objectKey() throws Exception {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(""MM-dd-yyyy"", JSON.defaultLocale);
        simpleDateFormat.setTimeZone(JSON.defaultTimeZone);

        String simpleDateFormatJson = JSON.toJSONString(simpleDateFormat, SerializerFeature.WriteClassName,
                                                        SerializerFeature.WriteMapNullValue);

        System.out.println(simpleDateFormatJson);

        java.text.SimpleDateFormat format = (java.text.SimpleDateFormat) JSON.parse(simpleDateFormatJson);
        Assert.assertEquals(""MM-dd-yyyy"", format.toPattern());

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateTest_tz.test_codec,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec() throws Exception {
        JSONReader reader = new JSONReader(new StringReader(""{\""value\"":\""2016-04-29\""}""));
        reader.setLocale(Locale.CHINA);
        reader.setTimzeZone(TimeZone.getTimeZone(""Asia/Shanghai""));
        
        Model model = reader.readObject(Model.class);
        Assert.assertNotNull(model.value);
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", Locale.CHINA);
        format.setTimeZone(TimeZone.getTimeZone(""Asia/Shanghai""));
        Date date = format.parse(""2016-04-29"");
        Assert.assertEquals(date.getTime(), model.value.getTime());
        
        Assert.assertEquals(TimeZone.getTimeZone(""Asia/Shanghai""), reader.getTimzeZone());
        Assert.assertEquals(Locale.CHINA, reader.getLocal());
        
        reader.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        String text = ""{\""createTime\"":1548166745}"";

        Order o = JSON.parseObject(text, Order.class);
        assertEquals(1548166745000L, o.createTime.getTime());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":1548166745}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest_ISO8601_TimeZone.test_date3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date3() throws Exception {
        Calendar c = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        VO v = new VO();
        v.setGmtCreate(c);
        String json = JSON.toJSONString(v, SerializerFeature.UseISO8601DateFormat);
        System.out.println(json);

        Calendar cal = JSON.parseObject(json, VO.class).getGmtCreate();

        Assert.assertEquals(8, cal.getTimeZone().getRawOffset() / (3600 * 1000));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_3() throws Exception {
        String text = ""{\""date\"":\""2017-08-16 04:29\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.jdk8.LocalTimeTest.test_for_long,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(15, vo.date.getHour());
        Assert.assertEquals(14, vo.date.getMinute());
        Assert.assertEquals(07, vo.date.getSecond());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_lenolix_7.test_for_objectKey,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_objectKey() throws Exception {
        User user = new User();
        user.setId(1);
        user.setName(""leno.lix"");
        user.setIsBoy(true);
        user.setBirthDay(new Date());
        user.setGmtCreate(new java.sql.Date(new Date().getTime()));
        user.setGmtModified(new java.sql.Timestamp(new Date().getTime()));
        String userJSON = JSON.toJSONString(user, SerializerFeature.WriteClassName, SerializerFeature.WriteMapNullValue);

        System.out.println(userJSON);

        User returnUser = (User) JSON.parse(userJSON);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_null_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2000.Issue2088.test_for_issue_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue_1() throws Exception {
        String json = ""{\""date\"":\""20181011103607186-0800\""}"";
        Model m = JSON.parseObject(json, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyyMMddHHmmssSSSZ"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Date date = format.parse(""20181011103607186-0800"");

        assertEquals(date, m.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest2.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14 13:07:23\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest7.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
SerializeConfig config = new SerializeConfig();
config.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
config.setAsmEnable(false);

Entity object = new Entity();
object.setValue(new Date());
String text = JSON.toJSONString(object, config);
SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"", text);
}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_0() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""1294552193254"");

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1200.Issue1298.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        JSONObject object = new JSONObject();

        object.put(""date"", ""2017-06-29T08:06:30.000+05:30"");

        Date date = object.getObject(""date"", java.util.Date.class);

        assertEquals(""\""2017-06-29T10:36:30+08:00\"""", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_3() throws Exception {
        java.util.Date date = JSON.parseObject(""\""2011-01-09T13:49:53\"""", java.util.Date.class, Feature.AllowISO8601DateFormat);

        Assert.assertEquals(new java.util.Date(1294552193000L), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_1() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294552193254L));

        Assert.assertEquals(""\""2011-01-09T13:49:53.254+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_2() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn_3() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ05�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_1() throws Exception {
        String text = ""{\""date\"":\""2017-08-14 19:05:30.000|America/Los_Angeles\""}"";
        JSON.parseObject(text, Model.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        long time = System.currentTimeMillis();
        Model model = JSON.parseObject(""["" + time + "","" + time + ""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(time, model.v1.getTime());
        Assert.assertEquals(time, model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_issue_316.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        Model model = new Model();
        model.value = new Timestamp(1460563200000L);
        Assert.assertEquals(""{\""value\"":1460563200000}"", JSON.toJSONString(model));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_kr_1() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??5�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date_null_reader,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_null_reader() throws Exception {
        Model model = new JSONReader(new StringReader(""[null,null]""), Feature.SupportArrayToBean).readObject(Model.class);
        Assert.assertNull(model.v1);
        Assert.assertNull(model.v2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateTest.test_reader,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_reader() throws Exception {

        DefaultJSONParser parser = new DefaultJSONParser(new JSONReaderScanner(""{\""date\"":\""2012/04-01\""}"", 0));
        parser.setDateFormat(""yyyy/MM-dd"");
        VO vo = parser.parseObject(VO.class);

        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy/MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat.parse(""2012/04-01""), vo.getDate());

        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_5,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_5() throws Exception {
        JSONObject object = JSON.parseObject(""{d:'2011-01-09T13:49:53'}"", Feature.AllowISO8601DateFormat);
        Assert.assertEquals(new java.util.Date(1294552193000L), object.get(""d""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1900.Issue1955.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        String strVal = ""0100-01-27 11:22:00.000"";
        Date date = JSON.parseObject('""' + strVal + '""', Date.class);

        SimpleDateFormat df = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"", Locale.CHINA);
        df.setTimeZone(JSON.defaultTimeZone);

        assertEquals(df.parse(strVal), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_2000.Issue2088.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        String json = ""{\""date\"":\""20181011103607186+0800\""}"";
        Model m = JSON.parseObject(json, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyyMMddHHmmssSSSZ"");
        format.setTimeZone(JSON.defaultTimeZone);
        Date date = format.parse(""20181011103607186+0800"");

        assertEquals(date, m.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest7.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        System.out.println(System.currentTimeMillis());
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        
        System.out.println(dateFormat.parse(""1970-01-01 20:00:01"").getTime());
        System.out.println(new Date().toString());
        
        //1369273142603
        String text = ""\""19790714130723\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest_ISO8601_TimeZone.test_date2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date2() throws Exception {
        Calendar c = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        c.setTimeZone(TimeZone.getTimeZone(""GMT+10""));
        VO v = new VO();
        v.setGmtCreate(c);
        String json = JSON.toJSONString(v, SerializerFeature.UseISO8601DateFormat);
        System.out.println(json);

        Calendar cal = JSON.parseObject(json, VO.class).getGmtCreate();

        Assert.assertEquals(10, cal.getTimeZone().getRawOffset() / (3600 * 1000));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_castToDate() throws Exception {
        JSON.DEFFAULT_DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss.SSS"";
        Date date = TypeUtils.castToDate(""2012-07-15 12:12:11"");
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(format.parseObject(""2012-07-15 12:12:11""), date);
        JSON.DEFFAULT_DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());
        
        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        mapping.setAsmEnable(true);
        
        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest4_indian.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        Date date1 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+0530\""}"", VO.class).getGmtCreate();
        assertNotNull(date1);
        Date date2 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+0500\""}"", VO.class).getGmtCreate();
        Date date3 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+0545\""}"", VO.class).getGmtCreate();
        Date date4 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+1245\""}"", VO.class).getGmtCreate();
        Date date5 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+1345\""}"", VO.class).getGmtCreate();

        long delta_2_1 = date2.getTime() - date1.getTime();
        assertEquals(1800000, delta_2_1);

        long delta_3_1 = date3.getTime() - date1.getTime();
        assertEquals(-900000, delta_3_1);

        long delta_4_3 = date4.getTime() - date3.getTime();
        assertEquals(-25200000, delta_4_3);

        long delta_5_4 = date5.getTime() - date4.getTime();
        assertEquals(17100000, delta_5_4);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1500.Issue1510.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        Model model = JSON.parseObject(""{\""startTime\"":\""2017-11-04\"",\""endTime\"":\""2017-11-14\""}"", Model.class);
        String text = JSON.toJSONString(model);
        assertEquals(""{\""endTime\"":\""2017-11-14\"",\""startTime\"":\""2017-11-04\""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_3() throws Exception {
        SerializeWriter out = new SerializeWriter();
        SerializeConfig config = new SerializeConfig();
        JSONSerializer serializer = new JSONSerializer(out, config);

        serializer.config(SerializerFeature.WriteClassName, true);
        serializer.write(new VO());

        Assert.assertEquals(""{\""@type\"":\""com.alibaba.json.bvt.serializer.DateFormatSerializerTest$VO\""}"",
                            out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateTest.test_parse,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_parse() throws Exception {
        Date date = JSON.parseObject(""\""2018-10-12 09:48:22 +0800\"""", Date.class);
        assertEquals(1539308902000L, date.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_array,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_dateFormat_array() throws Exception {
        List<SimpleDateFormat> list = JSON.parseArray(""[\""\"",null,\""yyyy\""]"", SimpleDateFormat.class);
        Assert.assertEquals(null, list.get(0));
        Assert.assertEquals(null, list.get(1));
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat, list.get(2));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_null_no_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_no_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.SimpleDataFormatSerializerTest.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
        Date date = new Date();
        String text = JSON.toJSONString(date, mapping);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        SimpleDateFormat format2 = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format2.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(JSON.toJSONString(format.format(date)), text);
        Assert.assertEquals(JSON.toJSONString(format2.format(date)), text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_new,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_new() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"");

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_8_DateTimeTest.test_for_long,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(""timeZone "" + TimeZone.getDefault(), 15, vo.date.getHourOfDay());
        Assert.assertEquals(14, vo.date.getMinuteOfHour());
        Assert.assertEquals(07, vo.date.getSecondOfMinute());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_xiayucai2012.test_for_xiayucai2012,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_xiayucai2012() throws Exception {
        String text = ""{\""date\"":\""0000-00-00 00:00:00\""}"";
        JSONObject json = JSON.parseObject(text);
        Date date = json.getObject(""date"", Date.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(JSON.DEFFAULT_DATE_FORMAT, JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        
        Assert.assertEquals(dateFormat.parse(json.getString(""date"")), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest2.test_enum,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_enum() throws Exception {
        Date date = new Date(1308841916550L);
        Assert.assertEquals(""1308841916550"", JSON.toJSONString(date)); // 1308841916550
        System.out.println(JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat)); // ""2011-06-23T23:11:56.550""
        SerializerFeature[] features = {SerializerFeature.UseISO8601DateFormat, SerializerFeature.UseSingleQuotes };
        System.out.println(JSON.toJSONString(date, features)); // '2011-06-23T23:11:56.550'
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_4() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09\"""", ParserConfig.getGlobalInstance(), features);

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294502400000L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateTest.test,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""{\""date\"":\""2012/04-01\""}"", ParserConfig.getGlobalInstance(),
                                                         0);
        parser.setDateFormat(""yyyy/MM-dd"");
        VO vo = parser.parseObject(VO.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy/MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat.parse(""2012/04-01""), vo.getDate());
        
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest11_reader.test_cn,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn() throws Exception {
        Model vo = new JSONReader(new StringReader(""{\""date0\"":\""2016-05-06\"",\""date1\"":\""2017-03-01\""}"")).readObject(Model.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);

        calendar.setTime(vo.date0);
        assertEquals(2016, calendar.get(Calendar.YEAR));
        assertEquals(4, calendar.get(Calendar.MONTH));
        assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));

        calendar.setTime(vo.date1);
        assertEquals(2017, calendar.get(Calendar.YEAR));
        assertEquals(2, calendar.get(Calendar.MONTH));
        assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_4() throws Exception {
        String text = ""{\""date\"":\""2017-08-16T04:29\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest8.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
        Entity object = new Entity();
        object.setValue(new Date());
        String text = JSON.toJSONStringWithDateFormat(object, ""yyyy"");
        SimpleDateFormat format = new SimpleDateFormat(""yyyy"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"",
                            text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_format,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_format() throws Exception {
        VO vo = new VO();
        vo.setCalendar(Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale));
        
        String text = JSON.toJSONString(vo, SerializerFeature.WriteDateUseDateFormat);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        Assert.assertEquals(vo.getCalendar().get(Calendar.YEAR), vo1.getCalendar().get(Calendar.YEAR));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MONTH), vo1.getCalendar().get(Calendar.MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.DAY_OF_MONTH), vo1.getCalendar().get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.HOUR_OF_DAY), vo1.getCalendar().get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MINUTE), vo1.getCalendar().get(Calendar.MINUTE));
        Assert.assertEquals(vo.getCalendar().get(Calendar.SECOND), vo1.getCalendar().get(Calendar.SECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest6.test_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_0() throws Exception {
SerializeConfig mapping = new SerializeConfig();
mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));

Entity object = new Entity();
object.setValue(new Date());
String text = JSON.toJSONString(object, mapping);
SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"", text);
}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1600.Issue1679.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        String json = ""{\""create\"":\""2018-01-10 08:30:00\""}"";
        User user = JSON.parseObject(json, User.class);
        assertEquals(""\""2018-01-10T08:30:00+08:00\"""", JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_2() throws Exception {
        String text = ""{\""date\"":\""2017-08-16T04:29Z\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_0.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalDate.now());

        String text = JSON.toJSONString(vo);

        VO vo1 = JSON.parseObject(text, VO.class);

        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date_private.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        long time = System.currentTimeMillis();
        Model model = JSON.parseObject(""["" + time + "","" + time + ""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(time, model.v1.getTime());
        Assert.assertEquals(time, model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_2() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294552193000L));

        Assert.assertEquals(""\""2011-01-09T13:49:53+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_8_DateTimeTest.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.date = DateTime.now();
        
        String text = JSON.toJSONString(vo);

        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.date.toDate(), vo1.date.toDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldFormatTest.test_format_,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_format_() throws Exception {
        Date now = new Date();
        Model model = new Model();
        model.serverTime = now;
        model.publishTime = now;
        model.setStartDate( now );
        
        String text = JSON.toJSONString(model);
        System.out.println(text);

        SimpleDateFormat df1 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df2 = new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df3 = new SimpleDateFormat(""yyyy-MM-dd"", Locale.CHINA);

        df1.setTimeZone(JSON.defaultTimeZone);
        df2.setTimeZone(JSON.defaultTimeZone);
        df3.setTimeZone(JSON.defaultTimeZone);

        String t1 = df1.format(now);
        String t2 = df2.format(now);
        String t3 = df3.format(now);

        assertEquals(""{\""publishTime\"":\""""+t2+""\"",\""serverTime\"":\""""+t1+""\"",\""startDate\"":\""""+t3+""\""}"",text);
        
        Model model2 = JSON.parseObject(text, Model.class);
        SimpleDateFormat df4 = new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df5 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df6 = new SimpleDateFormat(""yyyy-MM-dd"", Locale.CHINA);

        df4.setTimeZone(JSON.defaultTimeZone);
        df5.setTimeZone(JSON.defaultTimeZone);
        df6.setTimeZone(JSON.defaultTimeZone);

        assertEquals(t2, df4.format(model2.publishTime));
        assertEquals(t1, df5.format(model2.serverTime));
        assertEquals(t3, df6.format(model2.getStartDate()));
        
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_0.test_for_issue_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue_1() throws Exception {
        VO vo = JSON.parseObject(""{\""date\"":\""2016-05-06T20:24:28.484\""}"", VO.class);

        Assert.assertEquals(2016, vo.date.getYear());
        Assert.assertEquals(2016, vo.date.getYear());
        Assert.assertEquals(5, vo.date.getMonthOfYear());
        Assert.assertEquals(6, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_null_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_null_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_de,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_de() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""06.05.2016\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date_private.test_date_null,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_null() throws Exception {
        Model model = JSON.parseObject(""[null,null]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertNull(model.v1);
        Assert.assertNull(model.v2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest3.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14 13:07:23.456\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(456, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_iso_format,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_iso_format() throws Exception {
        VO vo = new VO();
        vo.setCalendar(Calendar.getInstance());
        
        String text = JSON.toJSONString(vo, SerializerFeature.UseISO8601DateFormat);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        Assert.assertEquals(vo.getCalendar().get(Calendar.YEAR), vo1.getCalendar().get(Calendar.YEAR));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MONTH), vo1.getCalendar().get(Calendar.MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.DAY_OF_MONTH), vo1.getCalendar().get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.HOUR_OF_DAY), vo1.getCalendar().get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MINUTE), vo1.getCalendar().get(Calendar.MINUTE));
        Assert.assertEquals(vo.getCalendar().get(Calendar.SECOND), vo1.getCalendar().get(Calendar.SECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.jdk8.LocalTimeTest.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalTime.now());
        
        String text = JSON.toJSONString(vo);
        System.out.println(text);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_7,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_7() throws Exception {
        Entity entity = JSON.parseObject(""{d:'2011-01-09T13:49:53'}"", Entity.class, Feature.AllowISO8601DateFormat);
        java.util.Date date = entity.getD();

        Assert.assertEquals(new java.util.Date(1294552193000L), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest5.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14T13:07:23.456\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(456, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date2() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Model model = JSON.parseObject(""[\""2016-01-01\"",\""2016-01-02\""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(dateFormat.parse(""2016-01-01"").getTime(), model.v1.getTime());
        Assert.assertEquals(dateFormat.parse(""2016-01-02"").getTime(), model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date_private.test_date2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date2() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Model model = JSON.parseObject(""[\""2016-01-01\"",\""2016-01-02\""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(dateFormat.parse(""2016-01-01"").getTime(), model.v1.getTime());
        Assert.assertEquals(dateFormat.parse(""2016-01-02"").getTime(), model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest4.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14T13:07:23\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn_2() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ5�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date_2,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_2() throws Exception {
        SerializeWriter out = new SerializeWriter();
        SerializeConfig config = new SerializeConfig();
        JSONSerializer serializer = new JSONSerializer(out, config);

        serializer.config(SerializerFeature.WriteMapNullValue, true);
        serializer.write(new VO());

        Assert.assertEquals(""{\""format\"":null}"", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest_ISO8601_TimeZone.test_date1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date1() throws Exception {
        Map<String,Date> map = new HashMap<String,Date>();
        map.put(""date"", new Date(1425886057586l));

        String json = JSON.toJSONString(map, SerializerFeature.UseISO8601DateFormat);
        
        Assert.assertEquals(""{\""date\"":\""2015-03-09T15:27:37.586+08:00\""}"", json);

        Map<String,Date> newMap = JSON.parseObject(json, new TypeReference<Map<String,Date>>(){});

        Assert.assertEquals(1425886057586l, newMap.get(""date"").getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest4.test_codec,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec() throws Exception {
        SerializeConfig mapping = new SerializeConfig();

        V0 v = new V0();
        v.setValue(new Date());

        String text = JSON.toJSONString(v, mapping);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_4() throws Exception {
        SerializeWriter out = new SerializeWriter();
        SerializeConfig config = new SerializeConfig();
        JSONSerializer serializer = new JSONSerializer(out, config);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy"");
        format.setTimeZone(JSON.defaultTimeZone);
        serializer.write(new VO(format));

        Assert.assertEquals(""{\""format\"":\""yyyy\""}"", out.toString());
        
        JSON.parseObject(out.toString(), VO.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.jdk8.LocalDateTest.test_for_long,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(2017, vo.date.getYear());
        Assert.assertEquals(11, vo.date.getMonthValue());
        Assert.assertEquals(21, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_9,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_9() throws Exception {
        String text = JSON.toJSONString(new Entity(new Date(1294506000000L)), SerializerFeature.UseISO8601DateFormat);
        Assert.assertEquals(""{\""date\"":\""2011-01-09T01:00:00+08:00\""}"", text);

        Entity entity = JSON.parseObject(text, Entity.class);
        Assert.assertEquals(new Date(1294506000000L), entity.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_1() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""", ParserConfig.getGlobalInstance(), features);

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_1() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_issue_447.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTimeInMillis(1460563200000L);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        Foo foo = new Foo();
        foo.setCreateDate(calendar.getTime());
        String date = JSON.toJSONString(foo, SerializerFeature.UseISO8601DateFormat);
        Assert.assertEquals(""{\""createDate\"":\""2016-04-14+08:00\""}"", date);
        Foo foo2 = JSON.parseObject(date, Foo.class, Feature.AllowISO8601DateFormat);
        Assert.assertEquals(""{\""createDate\"":\""2016-04-14 00:00:00\""}"", JSON.toJSONString(foo2, SerializerFeature.WriteDateUseDateFormat));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1700.Issue1769.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        byte[] newby = ""{\""beginTime\"":\""420180319160440\""}"".getBytes();
        QueryTaskResultReq rsp3 = JSON.parseObject(newby, QueryTaskResultReq.class);
        assertEquals(""{\""beginTime\"":\""152841225111920\""}"", new String(JSON.toJSONBytes(rsp3)));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date_reader,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_reader() throws Exception {
        long time = System.currentTimeMillis();
        Model model = new JSONReader(new StringReader(""["" + time + "","" + time + ""]""), Feature.SupportArrayToBean).readObject(Model.class);
        Assert.assertEquals(time, model.v1.getTime());
        Assert.assertEquals(time, model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date4() {
        String text = ""{\""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\\t\"":\""xxxxx\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(""xxxxx"", json.get(""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\t""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_4() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        serializer.config(SerializerFeature.UseSingleQuotes, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502400000L));

        Assert.assertEquals(""'2011-01-09+08:00'"", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest6.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""\""19790714\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DateParserTest.test_date_error_0,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date_error_0() throws Exception {

        JSONException error = null;
        try {
            DefaultJSONParser parser = new DefaultJSONParser(""true"");

            parser.parseObject(java.util.Date.class);
            parser.close();
        } catch (JSONException e) {
            error = e;
        }
        Assert.assertNotNull(error);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_empty,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_dateFormat_empty() throws Exception {
        VO vo = JSON.parseObject(""{\""format\"":\""\""}"", VO.class);
        Assert.assertEquals(null, vo.getFormat());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_3,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_3() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502400000L));

        Assert.assertEquals(""\""2011-01-09+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.joda.JodaTest_3_LocalTimeTest.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalTime.now());
        
        String text = JSON.toJSONString(vo);
        System.out.println(text);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn_4() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ05�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest10.test_6,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_6() throws Exception {
        String text = ""{\""date\"":\""4567-08-16T04:29\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_7,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_7() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294506000000L));

        Assert.assertEquals(""\""2011-01-09T01:00:00+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.date.DateTest.test_5,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_5() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502401000L));

        Assert.assertEquals(""\""2011-01-09T00:00:01+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.TimeDeserializerTest.test_time,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_time() throws Exception {
        long millis = System.currentTimeMillis();
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        String text = format.format(new java.util.Date(millis));
        text += ""T"";
        
        SimpleDateFormat format2 = new SimpleDateFormat(""HH:mm:ss.SSS"", JSON.defaultLocale);
        format2.setTimeZone(JSON.defaultTimeZone);
        text += format2.format(new java.util.Date(millis));
        
        Assert.assertNull(JSON.parseObject(""null"", Time.class));
        Assert.assertNull(JSON.parseObject(""\""\"""", Time.class));
        Assert.assertNull(JSON.parseArray(""null"", Time.class));
        Assert.assertNull(JSON.parseArray(""[null]"", Time.class).get(0));
        Assert.assertNull(JSON.parseObject(""{\""value\"":null}"", VO.class).getValue());
        
        Assert.assertEquals(new Time(millis), JSON.parseObject("""" + millis, Time.class));
        Assert.assertEquals(new Time(millis), JSON.parseObject(""{\""@type\"":\""java.sql.Time\"",\""val\"":"" + millis + ""}"", Time.class));
        Assert.assertEquals(new Time(millis), JSON.parseObject(""\"""" + millis + ""\"""", Time.class));
        Assert.assertEquals(new Time(millis), JSON.parseObject(""\"""" + text + ""\"""", Time.class));
        
        //System.out.println(JSON.toJSONString(new Time(millis), SerializerFeature.WriteClassName));
        
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_1,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_cn_1() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ5�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.SqlDateDeserializerTest2.test_sqlDate,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_sqlDate() throws Exception {
        java.util.Date date = new java.util.Date();
        long millis = date.getTime();
        long millis2 = (millis / 1000)  * 1000;
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        String text = dateFormat.format(millis);
        text = text.replace(' ', 'T');
        
        SimpleDateFormat dateFormat2 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        dateFormat2.setTimeZone(JSON.defaultTimeZone);
        String text2 = dateFormat2.format(millis2);
        
        Assert.assertNull(JSON.parseObject(""null"", Date.class));
        Assert.assertNull(JSON.parseObject(""\""\"""", Date.class));
        Assert.assertNull(JSON.parseArray(""null"", Date.class));
        Assert.assertNull(JSON.parseArray(""[null]"", Date.class).get(0));
        Assert.assertNull(JSON.parseObject(""{\""value\"":null}"", VO.class).getValue());
        
        Assert.assertEquals(new Date(millis), JSON.parseObject("""" + millis, Date.class));
        Assert.assertEquals(new Date(millis), JSON.parseObject(""{\""@type\"":\""java.sql.Date\"",\""val\"":"" + millis + ""}"", Date.class));
        Assert.assertEquals(new Date(millis), JSON.parseObject(""\"""" + millis + ""\"""", Date.class));
        Assert.assertEquals(new Date(millis2), JSON.parseObject(""\"""" + text2 + ""\"""", Date.class));
        Assert.assertEquals(new Date(millis), JSON.parseObject(""\"""" + text + ""\"""", Date.class));
        
        //System.out.println(JSON.toJSONString(new Time(millis), SerializerFeature.WriteClassName));
        
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate_error,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_castToDate_error() throws Exception {
        Exception error = null;
        try {
            TypeUtils.castToDate(""菴£�ｿｽ?菴£�ｿｽ?-MM-dd"");
        } catch (Exception ex) {
            error = ex;
        }
        Assert.assertNotNull(error);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        Assert.assertEquals(""{\""format\"":null}"", JSON.toJSONString(new VO(), SerializerFeature.WriteMapNullValue));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.SqlDateTest1.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        long millis = 1324138987429L;
        Date date = new Date(millis);

        Assert.assertEquals(""1324138987429"", JSON.toJSONString(date));
        Assert.assertEquals(""{\""@type\"":\""java.sql.Date\"",\""val\"":1324138987429}"", JSON.toJSONString(date, SerializerFeature.WriteClassName));
        Assert.assertEquals(1324138987429L, ((java.util.Date)JSON.parse(""{\""@type\"":\""java.util.Date\"",\""val\"":1324138987429}"")).getTime());

        Assert.assertEquals(""\""2011-12-18 00:23:07\"""",
                            JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat));
        Assert.assertEquals(""\""2011-12-18 00:23:07.429\"""",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS""));
        Assert.assertEquals(""'2011-12-18 00:23:07.429'"",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS"",
                                                            SerializerFeature.UseSingleQuotes));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.deser.date.DateParseTest1.test_date,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_no_asm,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_codec_no_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate_negative,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_castToDate_negative() throws Exception {
        Assert.assertEquals(new Date(-1), TypeUtils.castToDate(-1));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.Bug_for_issue_331.test_for_issue,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_for_issue() throws Exception {
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Date date = format.parse(""2015-05-23"");

        Calendar c = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        c.setTime(date);

        Model original = new Model();
        original.setDate(date);
        original.setCalendar(c);
        
        String json = JSON.toJSONString(original, SerializerFeature.UseISO8601DateFormat);

        System.out.println(json); //V1.2.4 �ｿｽ?�ｿｽ?�ｿｽ{""calendar"":""2015-05-23"",""date"":""2015-05-23""} , V1.2.6 �ｿｽ?�ｿｽ?�ｿｽ{""calendar"":""2015-05-23+08:00"",""date"":""2015-05-23+08:00""}

        Model actual = JSON.parseObject(json, Model.class);

        Assert.assertNotNull(actual);
        Assert.assertNotNull(actual.getDate());
        Assert.assertNotNull(actual.getCalendar());

        Assert.assertEquals(""�ｿｽ?�ｿｽ?�ｿｽ??�ｿｽ??�ｿｽ??�ｿｽ?�ｿｽ?�ｿｽ?�ｿｽ?�ｿｽ�ｿｽ?"", original.getDate(), actual.getDate());

        Assert.assertEquals(""�ｿｽ?�ｿｽ??�ｿｽ??�ｿｽ??�ｿｽ??Date �ｿｽ?? Calendar �ｿｽ?�ｿｽ?�ｿｽ�ｿｽ?"", actual.getDate(), actual.getCalendar().getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_4,1,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_kr_4() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??05�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue4() throws Exception {
        String text = ""{\""createTime\"":1548166745}"";

        Order4 o = JSON.parseObject(text, Order4.class);
        assertEquals(1548166745L, o.createTime.toEpochSecond());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":1548166745}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_for_zero,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_zero() throws Exception {
        String text = ""{\""date\"":\""0000-00-00\""}"";

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"");
        Object object = format.parse(""0000-00-00"");
        JSON.parseObject(text, Model.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2100.Issue2156.test_for_issue_time,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue_time() throws Exception {
        java.sql.Time date = java.sql.Time.valueOf(""12:13:14"");
        String str = JSON.toJSONStringWithDateFormat(date, JSON.DEFFAULT_DATE_FORMAT);
        assertEquals(""\""12:13:14\"""", str);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1400.Issue1493.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {

        TestBean test = new TestBean();
        String stime2 = ""2017-09-22T15:08:56"";

        LocalDateTime time1 = LocalDateTime.now();
        time1 = time1.minusNanos(10L);
        System.out.println(time1.getNano());
        LocalDateTime time2 = LocalDateTime.parse(stime2);
        test.setTime1(time1);
        test.setTime2(time2);
        String t1 = JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat);

        String json = JSON.toJSONString(test, SerializerFeature.WriteDateUseDateFormat);
        Assert.assertEquals(""{\""time1\"":""+t1+"",\""time2\"":\""""+stime2+""\""}"",json);


        //String default_format = JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT;
        //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
        //String stime1 = DateTimeFormatter.ofPattern(JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT, Locale.CHINA).format(time1);

        json = JSON.toJSONString(test, SerializerFeature.WriteDateUseDateFormat);
        Assert.assertEquals(""{\""time1\"":""+ JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) +"",\""time2\"":\""""+stime2+""\""}"",json);


        String pattern = ""yyyy-MM-dd'T'HH:mm:ss"";
        String stime1 = DateTimeFormatter.ofPattern(pattern, Locale.CHINA).format(time1);

        json = JSON.toJSONStringWithDateFormat(test, ""yyyy-MM-dd'T'HH:mm:ss"", SerializerFeature.WriteDateUseDateFormat);
        Assert.assertEquals(""{\""time1\"":\""""+stime1+""\"",\""time2\"":\""""+stime2+""\""}"",json);

        //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = default_format;
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_toJavaObject,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_toJavaObject() throws Exception {
        JSONObject obj = new JSONObject();
        obj.put(""d1"", new Date());
        obj.put(""d2"", System.currentTimeMillis());
        obj.put(""d3"", GregorianCalendar.getInstance());
        obj.put(""d4"", ""2012-12-22"");
        obj.put(""d5"", ""2012-12-22 12:11:11"");
        obj.put(""d6"", ""2012-12-22 12:11:11.234"");
        
        obj.getObject(""d1"", Calendar.class);
        obj.getObject(""d2"", Calendar.class);
        obj.getObject(""d3"", Calendar.class);
        obj.getObject(""d4"", Calendar.class);
        obj.getObject(""d5"", Calendar.class);
        obj.getObject(""d6"", Calendar.class);

        obj.getObject(""d1"", GregorianCalendar.class);
        obj.getObject(""d2"", GregorianCalendar.class);
        obj.getObject(""d3"", GregorianCalendar.class);
        obj.getObject(""d4"", GregorianCalendar.class);
        obj.getObject(""d5"", GregorianCalendar.class);
        obj.getObject(""d6"", GregorianCalendar.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_dateFormat,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_dateFormat() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""{}"");
        parser.setDateFormat(""yyyy-DD-mm"");
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-DD-mm"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        
        parser.setDateFomrat(format);
        parser.getDateFomartPattern();
        parser.getDateFormat();
        parser.parse();
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest2.test_codec,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec() throws Exception {
        SerializeConfig mapping = new SerializeConfig();

        V0 v = new V0();
        v.setValue(new Date());

        String text = JSON.toJSONString(v, mapping);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.JSONSerializerTest3.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
        JSONSerializer serializer = new JSONSerializer();

        serializer.setDateFormat(""yyyy"");
        Assert.assertEquals(""yyyy"", ((SimpleDateFormat) serializer.getDateFormat()).toPattern());
        Assert.assertEquals(""yyyy"",  serializer.getDateFormatPattern());
        
        serializer.setDateFormat(""yyyy-MM"");
        Assert.assertEquals(""yyyy-MM"", ((SimpleDateFormat) serializer.getDateFormat()).toPattern());
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"");
        format.setTimeZone(JSON.defaultTimeZone);
        serializer.setDateFormat(format);
        Assert.assertEquals(""yyyy-MM-dd"",  serializer.getDateFormatPattern());
        
        serializer.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_6,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_6() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);

        java.util.Date date = JSON.parseObject(""{d:\""2011-01-09T13:49:53\""}"", Entity.class, Feature.AllowISO8601DateFormat).getD();

        Assert.assertEquals(new java.util.Date(1294552193000L), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_lenolix_8.test_for_objectKey,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_objectKey() throws Exception {
        DateFormat simpleDateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        simpleDateFormat.setTimeZone(JSON.defaultTimeZone);
        Map<Integer, User> map = new HashMap<Integer, User>();

        User user = new User();
        user.setId(1);
        user.setIsBoy(true);
        user.setName(""leno.lix"");
        user.setBirthDay(simpleDateFormat.parse(""2012-03-07 22:38:21""));
        user.setGmtCreate(new java.sql.Date(simpleDateFormat.parse(""2012-02-03 22:38:21"").getTime()));

        map.put(1, user);

        String mapJson = JSON.toJSONString(map, SerializerFeature.WriteClassName, SerializerFeature.WriteMapNullValue);

        System.out.println(mapJson);

        Object object = JSON.parse(mapJson);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
        VO vo = new VO();
        vo.setCalendar(Calendar.getInstance());

        String text = JSON.toJSONString(vo);

        VO vo1 = JSON.parseObject(text, VO.class);
        Assert.assertEquals(vo.getCalendar().getTime(), vo1.getCalendar().getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_null_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_1() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullNumberAsZero);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(null, v1.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_0.test_for_long,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text, VO.class);
        Assert.assertEquals(2017, vo.date.getYear());
        Assert.assertEquals(11, vo.date.getMonthOfYear());
        Assert.assertEquals(21, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_null,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_dateFormat_null() throws Exception {
        VO vo = JSON.parseObject(""{\""format\"":null}"", VO.class);
        Assert.assertEquals(null, vo.getFormat());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue2() throws Exception {
        String text = ""{\""createTime\"":1548166745}"";

        Order2 o = JSON.parseObject(text, Order2.class);
        assertEquals(1548166745000L, o.createTime.getTimeInMillis());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":1548166745}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_6,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_6() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502460000L));

        Assert.assertEquals(""\""2011-01-09T00:01:00+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest5_iso8601.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        Date date1 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12\""}"", VO.class).getGmtCreate();
        assertNotNull(date1);
        Date date2 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19+00:00\""}"", VO.class).getGmtCreate();
        Date date3 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19Z\""}"", VO.class).getGmtCreate();
        Date date4 = JSON.parseObject(""{\""gmtCreate\"":\""20180912T151019Z\""}"", VO.class).getGmtCreate();
        Date date5 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19Z\""}"", VO.class).getGmtCreate();
        Date date6 = JSON.parseObject(""{\""gmtCreate\"":\""20180912\""}"", VO.class).getGmtCreate();

        long delta_2_1 = date2.getTime() - date1.getTime();
        assertEquals(83419000, delta_2_1);

        long delta_3_1 = date3.getTime() - date1.getTime();
        assertEquals(83419000, delta_3_1);

        long delta_4_3 = date4.getTime() - date3.getTime();
        assertEquals(0, delta_4_3);

        long delta_5_4 = date5.getTime() - date4.getTime();
        assertEquals(0, delta_5_4);

        long delta_6_1 = date6.getTime() - date1.getTime();
        assertEquals(0, delta_6_1);


    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_2() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"", ParserConfig.getGlobalInstance(), features);

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest11_reader.test_cn_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn_1() throws Exception {
        Model vo = new JSONReader(new StringReader(""{\""date0\"":1462464000000,\""date1\"":1488297600000}"")).readObject(Model.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);

        calendar.setTime(vo.date0);
        assertEquals(2016, calendar.get(Calendar.YEAR));
        assertEquals(4, calendar.get(Calendar.MONTH));
        assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));

        calendar.setTime(vo.date1);
        assertEquals(2017, calendar.get(Calendar.YEAR));
        assertEquals(2, calendar.get(Calendar.MONTH));
        assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));

        System.out.println(vo.date0.getTime());
        System.out.println(vo.date1.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_cn,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016-05-06\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_kr_3() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??05�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1200.Issue1298.test_for_issue_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue_1() throws Exception {
        JSONObject object = new JSONObject();

        object.put(""date"", ""2017-08-15 20:00:00.000"");

        Date date = object.getObject(""date"", java.util.Date.class);

        assertEquals(""\""2017-08-15T20:00:00+08:00\"""", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat));

        JSON.parseObject(""\""2017-08-15 20:00:00.000\"""", java.util.Date.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_no_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_no_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest8.test_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_1() throws Exception {
        Entity object = new Entity();
        object.setValue(new Date());
        String text = JSON.toJSONString(object);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"",
                            text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_new_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_new_1() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"");

        java.util.Date date = (java.util.Date) parser.parse();

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest2.test_enum_noasm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_enum_noasm() throws Exception {
        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);
        
        Date date = new Date(1308841916550L);
        Assert.assertEquals(""1308841916550"", JSON.toJSONString(date, mapping)); // 1308841916550
        Assert.assertEquals(""\""2011-06-23T23:11:56.550+08:00\"""", JSON.toJSONString(date, mapping, SerializerFeature.UseISO8601DateFormat)); // ""2011-06-23T23:11:56.550""
        SerializerFeature[] features = {SerializerFeature.UseISO8601DateFormat, SerializerFeature.UseSingleQuotes };
        Assert.assertEquals(""'2011-06-23T23:11:56.550+08:00'"", JSON.toJSONString(date, mapping, features)); // '2011-06-23T23:11:56.550'
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_0.test_for_issue_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue_2() throws Exception {
        VO vo = JSON.parseObject(""{\""date\"":\""20160506\""}"", VO.class);

        Assert.assertEquals(2016, vo.date.getYear());
        Assert.assertEquals(5, vo.date.getMonthOfYear());
        Assert.assertEquals(6, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_5,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_5() throws Exception {
        String text = ""{\""date\"":\""2018-05-21T14:39:44.907+08:00\""}"";
        Model model = JSON.parseObject(text, Model.class);
        String str = JSON.toJSONString(model, SerializerFeature.UseISO8601DateFormat);
        assertEquals(""{\""date\"":\""2018-05-21T14:39:44.907+08:00\""}"", str);

//        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
//        Date object = format.parse(""2018-05-21T14:39:44.9077913+08:00"");
//        assertEquals(object.getTime(), model.date.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_null_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_1() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullNumberAsZero);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(null, v1.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_8,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_8() throws Exception {
        String text = JSON.toJSONString(new Date(1294506000000L), SerializerFeature.UseISO8601DateFormat);
        Assert.assertEquals(""\""2011-01-09T01:00:00+08:00\"""", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_tw,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_tw() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016/05/06\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_kr_2() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??5�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date3() {
        String text = ""{\""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\\t\"":\""xxxxx\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(""xxxxx"", json.get(""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\t""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_80108116.test_for_dateFormat,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_dateFormat() throws Exception {
        VO vo = new VO();
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        vo.setDate(dateFormat.parse(""2012-07-12""));

        List<VO> voList = new ArrayList<VO>();
        voList.add(vo);

        String text = JSON.toJSONString(voList);
        Assert.assertEquals(""[{\""date\"":\""2012-07-12\""}]"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_in,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_in() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""06-05-2016\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Issue978.test_for_issue2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue2() throws Exception {
        Model model = new Model();
        model.date = new java.sql.Date(1483413683714L);

        JSONObject obj = (JSONObject) JSON.toJSON(model);
        assertEquals(""{\""date\"":\""2017-01-03 11:21:23\""}"", obj.toJSONString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1200.Issue1202.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        String text = ""{\""date\"":\""Apr 27, 2017 5:02:17 PM\""}"";
        Model model = JSON.parseObject(text, Model.class);
        assertNotNull(model.date);
//        assertEquals(""{\""date\"":\""Apr 27, 2017 5:02:17 PM\""}"", JSON.toJSONString(model));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date_null,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_null() throws Exception {
        Model model = JSON.parseObject(""[null,null]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertNull(model.v1);
        Assert.assertNull(model.v2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest10.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""{\""value\"":\""1979-07-14\""}"";
        VO vo = JSON.parseObject(text, VO.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(vo.getValue(), dateFormat.parse(""1979-07-14"").getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateTest.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        long millis = 1324138987429L;
        Date date = new Date(millis);

        Assert.assertEquals(""1324138987429"", JSON.toJSONString(date));
        Assert.assertEquals(""new Date(1324138987429)"", JSON.toJSONString(date, SerializerFeature.WriteClassName));

        Assert.assertEquals(""\""2011-12-18 00:23:07\"""",
                            JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat));
        Assert.assertEquals(""\""2011-12-18 00:23:07.429\"""",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS""));
        Assert.assertEquals(""'2011-12-18 00:23:07.429'"",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS"",
                                                            SerializerFeature.UseSingleQuotes));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() {
        String text = ""{\""date\"":\""2011-01-09T13:49:53.254\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(new Date(1294552193254L), json.get(""date""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1900.Issue1977.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        java.sql.Date date = new java.sql.Date(1533265119604L);
        String json = JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat);
        assertEquals(""\""2018-08-03T10:58:39.604+08:00\"""", json);
//        new java.sql.Date();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest12_t.test_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_1() throws Exception {
        Entity object = new Entity();
        object.setValue(new Date());
        String text = JSON.toJSONString(object);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"",
                            text);

        Entity object2 = JSON.parseObject(text, Entity.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_3_LocalTimeTest.test_for_long,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(15, vo.date.getHourOfDay());
        Assert.assertEquals(14, vo.date.getMinuteOfHour());
        Assert.assertEquals(07, vo.date.getSecondOfMinute());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1600.Issue1660.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        Model model = new Model();
        model.values.add(new Date(1513755213202L));

        String json = JSON.toJSONString(model);
        assertEquals(""{\""values\"":[\""2017-12-20\""]}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest8.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        System.out.println(System.currentTimeMillis());
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        System.out.println(dateFormat.parse(""1970-01-01 20:00:01"").getTime());
        System.out.println(new Date().toString());
        
        //1369273142603
        String text = ""\""19790714130723456\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(456, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_no_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_no_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_error,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_dateFormat_error() throws Exception {
        Exception error = null;
        try {
            JSON.parseObject(""{\""format\"":123}"", VO.class);
        } catch (Exception e) {
            error = e;
        }
        Assert.assertNotNull(error);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1900.Issue1901.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        Model m = JSON.parseObject(""{\""time\"":\""Thu Mar 22 08:58:37 +0000 2018\""}"", Model.class);
        assertEquals(""{\""time\"":\""�ｿｽ??�ｿｽ??�ｿｽ?? �ｿｽ?�ｿｽ?? 22 16:58:37 CST 2018\""}"", JSON.toJSONString(m));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.jdk8.LocalDateTest.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalDate.now());
        
        String text = JSON.toJSONString(vo);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Issue978.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        Model model = new Model();
        model.date = new java.util.Date(1483413683714L);

        JSONObject obj = (JSONObject) JSON.toJSON(model);
        assertEquals(""{\""date\"":\""2017-01-03 11:21:23\""}"", obj.toJSONString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.TimestampTest.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0 () throws Exception {
        long millis = (System.currentTimeMillis() / 1000) * 1000;
        
        SimpleDateFormat format = new SimpleDateFormat(JSON.DEFFAULT_DATE_FORMAT, JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        String text = ""\"""" + format.format(new Date(millis)) + ""\"""";
        System.out.println(text);
        Assert.assertEquals(new Timestamp(millis), JSON.parseObject("""" + millis, Timestamp.class));
        Assert.assertEquals(new Timestamp(millis), JSON.parseObject(""\"""" + millis + ""\"""", Timestamp.class));
        Assert.assertEquals(new Timestamp(millis), JSON.parseObject(text, Timestamp.class));
        Assert.assertEquals(new java.sql.Date(millis), JSON.parseObject(text, java.sql.Date.class));
        Assert.assertEquals(new java.util.Date(millis), JSON.parseObject(text, java.util.Date.class));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest3.test_codec,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec() throws Exception {
        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));

        V0 v = new V0();
        v.setValue(new Date());

        String text = JSON.toJSONString(v, mapping);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1900.Issue1901.test_for_issue_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue_1() throws Exception {
        Model m = JSON.parseObject(""{\""time\"":\""�ｿｽ??�ｿｽ??�ｿｽ?? �ｿｽ?�ｿｽ?? 22 16:58:37 CST 2018\""}"", Model.class);
        assertEquals(""{\""time\"":\""�ｿｽ??�ｿｽ??�ｿｽ?? �ｿｽ?�ｿｽ?? 22 16:58:37 CST 2018\""}"", JSON.toJSONString(m));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);

        Assert.assertEquals(false, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294552193254L));

        Assert.assertEquals(""1294552193254"", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate_zero,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_castToDate_zero() throws Exception {
        Assert.assertEquals(new Date(0), TypeUtils.castToDate(""0""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_null_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_1() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue, SerializerFeature.WriteNullNumberAsZero);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(null, v1.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date2() {
        String text = ""{\""date\"":\""xxxxx\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(""xxxxx"", json.get(""date""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_4() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09\"""", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294502400000L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_null_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date2_reader,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date2_reader() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);

        Model model = new JSONReader(new StringReader(""[\""2016-01-01\"",\""2016-01-02\""]""), Feature.SupportArrayToBean).readObject(Model.class);
        Assert.assertEquals(dateFormat.parse(""2016-01-01"").getTime(), model.v1.getTime());
        Assert.assertEquals(dateFormat.parse(""2016-01-02"").getTime(), model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_3() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53\"""", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294552193000L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_yyyy,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_dateFormat_yyyy() throws Exception {
        VO vo = JSON.parseObject(""{\""format\"":\""yyyy\""}"", VO.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat, vo.getFormat());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue3() throws Exception {
        String text = ""{\""createTime\"":\""20180714224948\""}"";

        Order3 o = JSON.parseObject(text, Order3.class);
        assertEquals(1531579788000L, o.createTime.getTimeInMillis());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":\""20180714224948\""}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_lenolix_11.test_for_objectKey,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_objectKey() throws Exception {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(""MM-dd-yyyy"", JSON.defaultLocale);
        simpleDateFormat.setTimeZone(JSON.defaultTimeZone);

        String simpleDateFormatJson = JSON.toJSONString(simpleDateFormat, SerializerFeature.WriteClassName,
                                                        SerializerFeature.WriteMapNullValue);

        System.out.println(simpleDateFormatJson);

        java.text.SimpleDateFormat format = (java.text.SimpleDateFormat) JSON.parse(simpleDateFormatJson);
        Assert.assertEquals(""MM-dd-yyyy"", format.toPattern());

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateTest_tz.test_codec,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec() throws Exception {
        JSONReader reader = new JSONReader(new StringReader(""{\""value\"":\""2016-04-29\""}""));
        reader.setLocale(Locale.CHINA);
        reader.setTimzeZone(TimeZone.getTimeZone(""Asia/Shanghai""));
        
        Model model = reader.readObject(Model.class);
        Assert.assertNotNull(model.value);
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", Locale.CHINA);
        format.setTimeZone(TimeZone.getTimeZone(""Asia/Shanghai""));
        Date date = format.parse(""2016-04-29"");
        Assert.assertEquals(date.getTime(), model.value.getTime());
        
        Assert.assertEquals(TimeZone.getTimeZone(""Asia/Shanghai""), reader.getTimzeZone());
        Assert.assertEquals(Locale.CHINA, reader.getLocal());
        
        reader.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2200.Issue2241.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        String text = ""{\""createTime\"":1548166745}"";

        Order o = JSON.parseObject(text, Order.class);
        assertEquals(1548166745000L, o.createTime.getTime());

        String json = JSON.toJSONString(o);
        assertEquals(""{\""createTime\"":1548166745}"", json);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest_ISO8601_TimeZone.test_date3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date3() throws Exception {
        Calendar c = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        VO v = new VO();
        v.setGmtCreate(c);
        String json = JSON.toJSONString(v, SerializerFeature.UseISO8601DateFormat);
        System.out.println(json);

        Calendar cal = JSON.parseObject(json, VO.class).getGmtCreate();

        Assert.assertEquals(8, cal.getTimeZone().getRawOffset() / (3600 * 1000));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_3() throws Exception {
        String text = ""{\""date\"":\""2017-08-16 04:29\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.jdk8.LocalTimeTest.test_for_long,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(15, vo.date.getHour());
        Assert.assertEquals(14, vo.date.getMinute());
        Assert.assertEquals(07, vo.date.getSecond());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_lenolix_7.test_for_objectKey,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_objectKey() throws Exception {
        User user = new User();
        user.setId(1);
        user.setName(""leno.lix"");
        user.setIsBoy(true);
        user.setBirthDay(new Date());
        user.setGmtCreate(new java.sql.Date(new Date().getTime()));
        user.setGmtModified(new java.sql.Timestamp(new Date().getTime()));
        String userJSON = JSON.toJSONString(user, SerializerFeature.WriteClassName, SerializerFeature.WriteMapNullValue);

        System.out.println(userJSON);

        User returnUser = (User) JSON.parse(userJSON);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_null_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2000.Issue2088.test_for_issue_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue_1() throws Exception {
        String json = ""{\""date\"":\""20181011103607186-0800\""}"";
        Model m = JSON.parseObject(json, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyyMMddHHmmssSSSZ"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Date date = format.parse(""20181011103607186-0800"");

        assertEquals(date, m.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest2.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14 13:07:23\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest7.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
SerializeConfig config = new SerializeConfig();
config.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
config.setAsmEnable(false);

Entity object = new Entity();
object.setValue(new Date());
String text = JSON.toJSONString(object, config);
SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"", text);
}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_0() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""1294552193254"");

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1200.Issue1298.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        JSONObject object = new JSONObject();

        object.put(""date"", ""2017-06-29T08:06:30.000+05:30"");

        Date date = object.getObject(""date"", java.util.Date.class);

        assertEquals(""\""2017-06-29T10:36:30+08:00\"""", JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_3() throws Exception {
        java.util.Date date = JSON.parseObject(""\""2011-01-09T13:49:53\"""", java.util.Date.class, Feature.AllowISO8601DateFormat);

        Assert.assertEquals(new java.util.Date(1294552193000L), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_1() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294552193254L));

        Assert.assertEquals(""\""2011-01-09T13:49:53.254+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_2() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn_3() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ05�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_1() throws Exception {
        String text = ""{\""date\"":\""2017-08-14 19:05:30.000|America/Los_Angeles\""}"";
        JSON.parseObject(text, Model.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        long time = System.currentTimeMillis();
        Model model = JSON.parseObject(""["" + time + "","" + time + ""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(time, model.v1.getTime());
        Assert.assertEquals(time, model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_issue_316.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        Model model = new Model();
        model.value = new Timestamp(1460563200000L);
        Assert.assertEquals(""{\""value\"":1460563200000}"", JSON.toJSONString(model));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_kr_1() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??5�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date_null_reader,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_null_reader() throws Exception {
        Model model = new JSONReader(new StringReader(""[null,null]""), Feature.SupportArrayToBean).readObject(Model.class);
        Assert.assertNull(model.v1);
        Assert.assertNull(model.v2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateTest.test_reader,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_reader() throws Exception {

        DefaultJSONParser parser = new DefaultJSONParser(new JSONReaderScanner(""{\""date\"":\""2012/04-01\""}"", 0));
        parser.setDateFormat(""yyyy/MM-dd"");
        VO vo = parser.parseObject(VO.class);

        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy/MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat.parse(""2012/04-01""), vo.getDate());

        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_5,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_5() throws Exception {
        JSONObject object = JSON.parseObject(""{d:'2011-01-09T13:49:53'}"", Feature.AllowISO8601DateFormat);
        Assert.assertEquals(new java.util.Date(1294552193000L), object.get(""d""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1900.Issue1955.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        String strVal = ""0100-01-27 11:22:00.000"";
        Date date = JSON.parseObject('""' + strVal + '""', Date.class);

        SimpleDateFormat df = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"", Locale.CHINA);
        df.setTimeZone(JSON.defaultTimeZone);

        assertEquals(df.parse(strVal), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_2000.Issue2088.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        String json = ""{\""date\"":\""20181011103607186+0800\""}"";
        Model m = JSON.parseObject(json, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyyMMddHHmmssSSSZ"");
        format.setTimeZone(JSON.defaultTimeZone);
        Date date = format.parse(""20181011103607186+0800"");

        assertEquals(date, m.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest7.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        System.out.println(System.currentTimeMillis());
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        
        System.out.println(dateFormat.parse(""1970-01-01 20:00:01"").getTime());
        System.out.println(new Date().toString());
        
        //1369273142603
        String text = ""\""19790714130723\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest_ISO8601_TimeZone.test_date2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date2() throws Exception {
        Calendar c = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        c.setTimeZone(TimeZone.getTimeZone(""GMT+10""));
        VO v = new VO();
        v.setGmtCreate(c);
        String json = JSON.toJSONString(v, SerializerFeature.UseISO8601DateFormat);
        System.out.println(json);

        Calendar cal = JSON.parseObject(json, VO.class).getGmtCreate();

        Assert.assertEquals(10, cal.getTimeZone().getRawOffset() / (3600 * 1000));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_castToDate() throws Exception {
        JSON.DEFFAULT_DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss.SSS"";
        Date date = TypeUtils.castToDate(""2012-07-15 12:12:11"");
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(format.parseObject(""2012-07-15 12:12:11""), date);
        JSON.DEFFAULT_DATE_FORMAT = ""yyyy-MM-dd HH:mm:ss"";
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());
        
        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        mapping.setAsmEnable(true);
        
        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest4_indian.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        Date date1 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+0530\""}"", VO.class).getGmtCreate();
        assertNotNull(date1);
        Date date2 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+0500\""}"", VO.class).getGmtCreate();
        Date date3 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+0545\""}"", VO.class).getGmtCreate();
        Date date4 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+1245\""}"", VO.class).getGmtCreate();
        Date date5 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-11T21:29:34+1345\""}"", VO.class).getGmtCreate();

        long delta_2_1 = date2.getTime() - date1.getTime();
        assertEquals(1800000, delta_2_1);

        long delta_3_1 = date3.getTime() - date1.getTime();
        assertEquals(-900000, delta_3_1);

        long delta_4_3 = date4.getTime() - date3.getTime();
        assertEquals(-25200000, delta_4_3);

        long delta_5_4 = date5.getTime() - date4.getTime();
        assertEquals(17100000, delta_5_4);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1500.Issue1510.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        Model model = JSON.parseObject(""{\""startTime\"":\""2017-11-04\"",\""endTime\"":\""2017-11-14\""}"", Model.class);
        String text = JSON.toJSONString(model);
        assertEquals(""{\""endTime\"":\""2017-11-14\"",\""startTime\"":\""2017-11-04\""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_3() throws Exception {
        SerializeWriter out = new SerializeWriter();
        SerializeConfig config = new SerializeConfig();
        JSONSerializer serializer = new JSONSerializer(out, config);

        serializer.config(SerializerFeature.WriteClassName, true);
        serializer.write(new VO());

        Assert.assertEquals(""{\""@type\"":\""com.alibaba.json.bvt.serializer.DateFormatSerializerTest$VO\""}"",
                            out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateTest.test_parse,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_parse() throws Exception {
        Date date = JSON.parseObject(""\""2018-10-12 09:48:22 +0800\"""", Date.class);
        assertEquals(1539308902000L, date.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_array,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_dateFormat_array() throws Exception {
        List<SimpleDateFormat> list = JSON.parseArray(""[\""\"",null,\""yyyy\""]"", SimpleDateFormat.class);
        Assert.assertEquals(null, list.get(0));
        Assert.assertEquals(null, list.get(1));
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat, list.get(2));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest3.test_codec_null_no_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_no_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.SimpleDataFormatSerializerTest.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
        Date date = new Date();
        String text = JSON.toJSONString(date, mapping);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        SimpleDateFormat format2 = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format2.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(JSON.toJSONString(format.format(date)), text);
        Assert.assertEquals(JSON.toJSONString(format2.format(date)), text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_new,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_new() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""new Date(1294552193254)"");

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_8_DateTimeTest.test_for_long,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(""timeZone "" + TimeZone.getDefault(), 15, vo.date.getHourOfDay());
        Assert.assertEquals(14, vo.date.getMinuteOfHour());
        Assert.assertEquals(07, vo.date.getSecondOfMinute());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_xiayucai2012.test_for_xiayucai2012,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_xiayucai2012() throws Exception {
        String text = ""{\""date\"":\""0000-00-00 00:00:00\""}"";
        JSONObject json = JSON.parseObject(text);
        Date date = json.getObject(""date"", Date.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(JSON.DEFFAULT_DATE_FORMAT, JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        
        Assert.assertEquals(dateFormat.parse(json.getString(""date"")), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest2.test_enum,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_enum() throws Exception {
        Date date = new Date(1308841916550L);
        Assert.assertEquals(""1308841916550"", JSON.toJSONString(date)); // 1308841916550
        System.out.println(JSON.toJSONString(date, SerializerFeature.UseISO8601DateFormat)); // ""2011-06-23T23:11:56.550""
        SerializerFeature[] features = {SerializerFeature.UseISO8601DateFormat, SerializerFeature.UseSingleQuotes };
        System.out.println(JSON.toJSONString(date, features)); // '2011-06-23T23:11:56.550'
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_4() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09\"""", ParserConfig.getGlobalInstance(), features);

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294502400000L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateTest.test,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""{\""date\"":\""2012/04-01\""}"", ParserConfig.getGlobalInstance(),
                                                         0);
        parser.setDateFormat(""yyyy/MM-dd"");
        VO vo = parser.parseObject(VO.class);
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy/MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(dateFormat.parse(""2012/04-01""), vo.getDate());
        
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest11_reader.test_cn,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn() throws Exception {
        Model vo = new JSONReader(new StringReader(""{\""date0\"":\""2016-05-06\"",\""date1\"":\""2017-03-01\""}"")).readObject(Model.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);

        calendar.setTime(vo.date0);
        assertEquals(2016, calendar.get(Calendar.YEAR));
        assertEquals(4, calendar.get(Calendar.MONTH));
        assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));

        calendar.setTime(vo.date1);
        assertEquals(2017, calendar.get(Calendar.YEAR));
        assertEquals(2, calendar.get(Calendar.MONTH));
        assertEquals(1, calendar.get(Calendar.DAY_OF_MONTH));
        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, calendar.get(Calendar.MINUTE));
        assertEquals(0, calendar.get(Calendar.SECOND));
        assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_4() throws Exception {
        String text = ""{\""date\"":\""2017-08-16T04:29\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest8.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
        Entity object = new Entity();
        object.setValue(new Date());
        String text = JSON.toJSONStringWithDateFormat(object, ""yyyy"");
        SimpleDateFormat format = new SimpleDateFormat(""yyyy"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"",
                            text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_format,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_format() throws Exception {
        VO vo = new VO();
        vo.setCalendar(Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale));
        
        String text = JSON.toJSONString(vo, SerializerFeature.WriteDateUseDateFormat);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        Assert.assertEquals(vo.getCalendar().get(Calendar.YEAR), vo1.getCalendar().get(Calendar.YEAR));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MONTH), vo1.getCalendar().get(Calendar.MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.DAY_OF_MONTH), vo1.getCalendar().get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.HOUR_OF_DAY), vo1.getCalendar().get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MINUTE), vo1.getCalendar().get(Calendar.MINUTE));
        Assert.assertEquals(vo.getCalendar().get(Calendar.SECOND), vo1.getCalendar().get(Calendar.SECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest6.test_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_0() throws Exception {
SerializeConfig mapping = new SerializeConfig();
mapping.put(Date.class, new SimpleDateFormatSerializer(""yyyy-MM-dd""));

Entity object = new Entity();
object.setValue(new Date());
String text = JSON.toJSONString(object, mapping);
SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
Assert.assertEquals(""{\""value\"":\"""" + format.format(object.getValue()) + ""\""}"", text);
}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1600.Issue1679.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        String json = ""{\""create\"":\""2018-01-10 08:30:00\""}"";
        User user = JSON.parseObject(json, User.class);
        assertEquals(""\""2018-01-10T08:30:00+08:00\"""", JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_2() throws Exception {
        String text = ""{\""date\"":\""2017-08-16T04:29Z\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_0.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalDate.now());

        String text = JSON.toJSONString(vo);

        VO vo1 = JSON.parseObject(text, VO.class);

        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date_private.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        long time = System.currentTimeMillis();
        Model model = JSON.parseObject(""["" + time + "","" + time + ""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(time, model.v1.getTime());
        Assert.assertEquals(time, model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_2() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294552193000L));

        Assert.assertEquals(""\""2011-01-09T13:49:53+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_8_DateTimeTest.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.date = DateTime.now();
        
        String text = JSON.toJSONString(vo);

        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.date.toDate(), vo1.date.toDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldFormatTest.test_format_,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_format_() throws Exception {
        Date now = new Date();
        Model model = new Model();
        model.serverTime = now;
        model.publishTime = now;
        model.setStartDate( now );
        
        String text = JSON.toJSONString(model);
        System.out.println(text);

        SimpleDateFormat df1 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df2 = new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df3 = new SimpleDateFormat(""yyyy-MM-dd"", Locale.CHINA);

        df1.setTimeZone(JSON.defaultTimeZone);
        df2.setTimeZone(JSON.defaultTimeZone);
        df3.setTimeZone(JSON.defaultTimeZone);

        String t1 = df1.format(now);
        String t2 = df2.format(now);
        String t3 = df3.format(now);

        assertEquals(""{\""publishTime\"":\""""+t2+""\"",\""serverTime\"":\""""+t1+""\"",\""startDate\"":\""""+t3+""\""}"",text);
        
        Model model2 = JSON.parseObject(text, Model.class);
        SimpleDateFormat df4 = new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df5 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", Locale.CHINA);
        SimpleDateFormat df6 = new SimpleDateFormat(""yyyy-MM-dd"", Locale.CHINA);

        df4.setTimeZone(JSON.defaultTimeZone);
        df5.setTimeZone(JSON.defaultTimeZone);
        df6.setTimeZone(JSON.defaultTimeZone);

        assertEquals(t2, df4.format(model2.publishTime));
        assertEquals(t1, df5.format(model2.serverTime));
        assertEquals(t3, df6.format(model2.getStartDate()));
        
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_0.test_for_issue_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue_1() throws Exception {
        VO vo = JSON.parseObject(""{\""date\"":\""2016-05-06T20:24:28.484\""}"", VO.class);

        Assert.assertEquals(2016, vo.date.getYear());
        Assert.assertEquals(2016, vo.date.getYear());
        Assert.assertEquals(5, vo.date.getMonthOfYear());
        Assert.assertEquals(6, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_null_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_null_asm() throws Exception {
        V0 v = new V0();

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        Assert.assertEquals(""{\""value\"":null}"", text);

        V0 v1 = JSON.parseObject(text, V0.class);

        Assert.assertEquals(v1.getValue(), v.getValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_de,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_de() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""06.05.2016\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date_private.test_date_null,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_null() throws Exception {
        Model model = JSON.parseObject(""[null,null]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertNull(model.v1);
        Assert.assertNull(model.v2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest3.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14 13:07:23.456\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(456, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_cnhans.test_iso_format,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_iso_format() throws Exception {
        VO vo = new VO();
        vo.setCalendar(Calendar.getInstance());
        
        String text = JSON.toJSONString(vo, SerializerFeature.UseISO8601DateFormat);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        Assert.assertEquals(vo.getCalendar().get(Calendar.YEAR), vo1.getCalendar().get(Calendar.YEAR));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MONTH), vo1.getCalendar().get(Calendar.MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.DAY_OF_MONTH), vo1.getCalendar().get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(vo.getCalendar().get(Calendar.HOUR_OF_DAY), vo1.getCalendar().get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(vo.getCalendar().get(Calendar.MINUTE), vo1.getCalendar().get(Calendar.MINUTE));
        Assert.assertEquals(vo.getCalendar().get(Calendar.SECOND), vo1.getCalendar().get(Calendar.SECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest4.test_codec_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(true);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.jdk8.LocalTimeTest.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalTime.now());
        
        String text = JSON.toJSONString(vo);
        System.out.println(text);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_7,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_7() throws Exception {
        Entity entity = JSON.parseObject(""{d:'2011-01-09T13:49:53'}"", Entity.class, Feature.AllowISO8601DateFormat);
        java.util.Date date = entity.getD();

        Assert.assertEquals(new java.util.Date(1294552193000L), date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest5.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14T13:07:23.456\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(456, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date2() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Model model = JSON.parseObject(""[\""2016-01-01\"",\""2016-01-02\""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(dateFormat.parse(""2016-01-01"").getTime(), model.v1.getTime());
        Assert.assertEquals(dateFormat.parse(""2016-01-02"").getTime(), model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date_private.test_date2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date2() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        Model model = JSON.parseObject(""[\""2016-01-01\"",\""2016-01-02\""]"", Model.class, Feature.SupportArrayToBean);
        Assert.assertEquals(dateFormat.parse(""2016-01-01"").getTime(), model.v1.getTime());
        Assert.assertEquals(dateFormat.parse(""2016-01-02"").getTime(), model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest4.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14T13:07:23\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(13, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(7, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(23, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn_2() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ5�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date_2,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_2() throws Exception {
        SerializeWriter out = new SerializeWriter();
        SerializeConfig config = new SerializeConfig();
        JSONSerializer serializer = new JSONSerializer(out, config);

        serializer.config(SerializerFeature.WriteMapNullValue, true);
        serializer.write(new VO());

        Assert.assertEquals(""{\""format\"":null}"", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest_ISO8601_TimeZone.test_date1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date1() throws Exception {
        Map<String,Date> map = new HashMap<String,Date>();
        map.put(""date"", new Date(1425886057586l));

        String json = JSON.toJSONString(map, SerializerFeature.UseISO8601DateFormat);
        
        Assert.assertEquals(""{\""date\"":\""2015-03-09T15:27:37.586+08:00\""}"", json);

        Map<String,Date> newMap = JSON.parseObject(json, new TypeReference<Map<String,Date>>(){});

        Assert.assertEquals(1425886057586l, newMap.get(""date"").getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest4.test_codec,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec() throws Exception {
        SerializeConfig mapping = new SerializeConfig();

        V0 v = new V0();
        v.setValue(new Date());

        String text = JSON.toJSONString(v, mapping);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_4() throws Exception {
        SerializeWriter out = new SerializeWriter();
        SerializeConfig config = new SerializeConfig();
        JSONSerializer serializer = new JSONSerializer(out, config);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy"");
        format.setTimeZone(JSON.defaultTimeZone);
        serializer.write(new VO(format));

        Assert.assertEquals(""{\""format\"":\""yyyy\""}"", out.toString());
        
        JSON.parseObject(out.toString(), VO.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.jdk8.LocalDateTest.test_for_long,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_long() throws Exception {
        String text= ""{\""date\"":1511248447740}"";
        VO vo =JSON.parseObject(text,VO.class);
        Assert.assertEquals(2017, vo.date.getYear());
        Assert.assertEquals(11, vo.date.getMonthValue());
        Assert.assertEquals(21, vo.date.getDayOfMonth());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_9,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_9() throws Exception {
        String text = JSON.toJSONString(new Entity(new Date(1294506000000L)), SerializerFeature.UseISO8601DateFormat);
        Assert.assertEquals(""{\""date\"":\""2011-01-09T01:00:00+08:00\""}"", text);

        Entity entity = JSON.parseObject(text, Entity.class);
        Assert.assertEquals(new Date(1294506000000L), entity.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_1() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""", ParserConfig.getGlobalInstance(), features);

        java.util.Date date = parser.parseObject(java.util.Date.class);

        Assert.assertEquals(new java.util.Date(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest_sql_timestamp.test_date_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_1() throws Exception {
        int features = JSON.DEFAULT_PARSER_FEATURE;
        features = Feature.config(features, Feature.AllowISO8601DateFormat, true);
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""", ParserConfig.getGlobalInstance(), features);

        java.sql.Timestamp date = parser.parseObject(java.sql.Timestamp.class);

        Assert.assertEquals(new java.sql.Timestamp(1294552193254L), date);
        parser.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_issue_447.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTimeInMillis(1460563200000L);
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        Foo foo = new Foo();
        foo.setCreateDate(calendar.getTime());
        String date = JSON.toJSONString(foo, SerializerFeature.UseISO8601DateFormat);
        Assert.assertEquals(""{\""createDate\"":\""2016-04-14+08:00\""}"", date);
        Foo foo2 = JSON.parseObject(date, Foo.class, Feature.AllowISO8601DateFormat);
        Assert.assertEquals(""{\""createDate\"":\""2016-04-14 00:00:00\""}"", JSON.toJSONString(foo2, SerializerFeature.WriteDateUseDateFormat));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1700.Issue1769.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        byte[] newby = ""{\""beginTime\"":\""420180319160440\""}"".getBytes();
        QueryTaskResultReq rsp3 = JSON.parseObject(newby, QueryTaskResultReq.class);
        assertEquals(""{\""beginTime\"":\""152841225111920\""}"", new String(JSON.toJSONBytes(rsp3)));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.array.BeanToArrayTest_date.test_date_reader,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_reader() throws Exception {
        long time = System.currentTimeMillis();
        Model model = new JSONReader(new StringReader(""["" + time + "","" + time + ""]""), Feature.SupportArrayToBean).readObject(Model.class);
        Assert.assertEquals(time, model.v1.getTime());
        Assert.assertEquals(time, model.v2.getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DefaultJSONParserTest_date.test_date4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date4() {
        String text = ""{\""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\\t\"":\""xxxxx\""}"";
        char[] chars = text.toCharArray();
        DefaultJSONParser parser = new DefaultJSONParser(chars, chars.length, ParserConfig.getGlobalInstance(), 0);
        parser.config(Feature.AllowISO8601DateFormat, true);
        JSONObject json = parser.parseObject();
        Assert.assertEquals(""xxxxx"", json.get(""1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst1234567890abcdefghijklmnopqrst\t""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_4() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        serializer.config(SerializerFeature.UseSingleQuotes, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502400000L));

        Assert.assertEquals(""'2011-01-09+08:00'"", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest6.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""\""19790714\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DateParserTest.test_date_error_0,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date_error_0() throws Exception {

        JSONException error = null;
        try {
            DefaultJSONParser parser = new DefaultJSONParser(""true"");

            parser.parseObject(java.util.Date.class);
            parser.close();
        } catch (JSONException e) {
            error = e;
        }
        Assert.assertNotNull(error);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateFormatDeserializerTest.test_dateFormat_empty,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_dateFormat_empty() throws Exception {
        VO vo = JSON.parseObject(""{\""format\"":\""\""}"", VO.class);
        Assert.assertEquals(null, vo.getFormat());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_3,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_3() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502400000L));

        Assert.assertEquals(""\""2011-01-09+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.joda.JodaTest_3_LocalTimeTest.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        VO vo = new VO();
        vo.setDate(LocalTime.now());
        
        String text = JSON.toJSONString(vo);
        System.out.println(text);
        
        VO vo1 = JSON.parseObject(text, VO.class);
        
        Assert.assertEquals(vo.getDate(), vo1.getDate());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn_4() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ05�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest10.test_6,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_6() throws Exception {
        String text = ""{\""date\"":\""4567-08-16T04:29\""}"";
        Model model = JSON.parseObject(text, Model.class);

        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");
        Object object = format.parse(""2017-08-16 04:29"");
//        assertEquals(object, model.date);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_7,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_7() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294506000000L));

        Assert.assertEquals(""\""2011-01-09T01:00:00+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.date.DateTest.test_5,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_5() throws Exception {
        SerializeWriter out = new SerializeWriter();

        JSONSerializer serializer = new JSONSerializer(out);
        serializer.config(SerializerFeature.UseISO8601DateFormat, true);
        Assert.assertEquals(true, serializer.isEnabled(SerializerFeature.UseISO8601DateFormat));
        serializer.write(new Date(1294502401000L));

        Assert.assertEquals(""\""2011-01-09T00:00:01+08:00\"""", out.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.TimeDeserializerTest.test_time,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_time() throws Exception {
        long millis = System.currentTimeMillis();
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        String text = format.format(new java.util.Date(millis));
        text += ""T"";
        
        SimpleDateFormat format2 = new SimpleDateFormat(""HH:mm:ss.SSS"", JSON.defaultLocale);
        format2.setTimeZone(JSON.defaultTimeZone);
        text += format2.format(new java.util.Date(millis));
        
        Assert.assertNull(JSON.parseObject(""null"", Time.class));
        Assert.assertNull(JSON.parseObject(""\""\"""", Time.class));
        Assert.assertNull(JSON.parseArray(""null"", Time.class));
        Assert.assertNull(JSON.parseArray(""[null]"", Time.class).get(0));
        Assert.assertNull(JSON.parseObject(""{\""value\"":null}"", VO.class).getValue());
        
        Assert.assertEquals(new Time(millis), JSON.parseObject("""" + millis, Time.class));
        Assert.assertEquals(new Time(millis), JSON.parseObject(""{\""@type\"":\""java.sql.Time\"",\""val\"":"" + millis + ""}"", Time.class));
        Assert.assertEquals(new Time(millis), JSON.parseObject(""\"""" + millis + ""\"""", Time.class));
        Assert.assertEquals(new Time(millis), JSON.parseObject(""\"""" + text + ""\"""", Time.class));
        
        //System.out.println(JSON.toJSONString(new Time(millis), SerializerFeature.WriteClassName));
        
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_cn_1,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_cn_1() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016蟷ｴ5�ｿｽ??6�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.SqlDateDeserializerTest2.test_sqlDate,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_sqlDate() throws Exception {
        java.util.Date date = new java.util.Date();
        long millis = date.getTime();
        long millis2 = (millis / 1000)  * 1000;
        
        SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS"", JSON.defaultLocale);
        dateFormat.setTimeZone(JSON.defaultTimeZone);
        String text = dateFormat.format(millis);
        text = text.replace(' ', 'T');
        
        SimpleDateFormat dateFormat2 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", JSON.defaultLocale);
        dateFormat2.setTimeZone(JSON.defaultTimeZone);
        String text2 = dateFormat2.format(millis2);
        
        Assert.assertNull(JSON.parseObject(""null"", Date.class));
        Assert.assertNull(JSON.parseObject(""\""\"""", Date.class));
        Assert.assertNull(JSON.parseArray(""null"", Date.class));
        Assert.assertNull(JSON.parseArray(""[null]"", Date.class).get(0));
        Assert.assertNull(JSON.parseObject(""{\""value\"":null}"", VO.class).getValue());
        
        Assert.assertEquals(new Date(millis), JSON.parseObject("""" + millis, Date.class));
        Assert.assertEquals(new Date(millis), JSON.parseObject(""{\""@type\"":\""java.sql.Date\"",\""val\"":"" + millis + ""}"", Date.class));
        Assert.assertEquals(new Date(millis), JSON.parseObject(""\"""" + millis + ""\"""", Date.class));
        Assert.assertEquals(new Date(millis2), JSON.parseObject(""\"""" + text2 + ""\"""", Date.class));
        Assert.assertEquals(new Date(millis), JSON.parseObject(""\"""" + text + ""\"""", Date.class));
        
        //System.out.println(JSON.toJSONString(new Time(millis), SerializerFeature.WriteClassName));
        
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate_error,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_castToDate_error() throws Exception {
        Exception error = null;
        try {
            TypeUtils.castToDate(""菴£�ｿｽ?菴£�ｿｽ?-MM-dd"");
        } catch (Exception ex) {
            error = ex;
        }
        Assert.assertNotNull(error);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.DateFormatSerializerTest.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        Assert.assertEquals(""{\""format\"":null}"", JSON.toJSONString(new VO(), SerializerFeature.WriteMapNullValue));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.SqlDateTest1.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        long millis = 1324138987429L;
        Date date = new Date(millis);

        Assert.assertEquals(""1324138987429"", JSON.toJSONString(date));
        Assert.assertEquals(""{\""@type\"":\""java.sql.Date\"",\""val\"":1324138987429}"", JSON.toJSONString(date, SerializerFeature.WriteClassName));
        Assert.assertEquals(1324138987429L, ((java.util.Date)JSON.parse(""{\""@type\"":\""java.util.Date\"",\""val\"":1324138987429}"")).getTime());

        Assert.assertEquals(""\""2011-12-18 00:23:07\"""",
                            JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat));
        Assert.assertEquals(""\""2011-12-18 00:23:07.429\"""",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS""));
        Assert.assertEquals(""'2011-12-18 00:23:07.429'"",
                            JSON.toJSONStringWithDateFormat(date, ""yyyy-MM-dd HH:mm:ss.SSS"",
                                                            SerializerFeature.UseSingleQuotes));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.deser.date.DateParseTest1.test_date,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_date() throws Exception {
        String text = ""\""1979-07-14\"""";
        Date date = JSON.parseObject(text, Date.class);
        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(date);
        Assert.assertEquals(1979, calendar.get(Calendar.YEAR));
        Assert.assertEquals(6, calendar.get(Calendar.MONTH));
        Assert.assertEquals(14, calendar.get(Calendar.DAY_OF_MONTH));
        
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest2.test_codec_no_asm,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_codec_no_asm() throws Exception {
        V0 v = new V0();
        v.setValue(new Date());

        SerializeConfig mapping = new SerializeConfig();
        mapping.setAsmEnable(false);

        String text = JSON.toJSONString(v, mapping, SerializerFeature.WriteMapNullValue);
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Assert.assertEquals(""{\""value\"":"" + JSON.toJSONString(format.format(v.getValue())) + ""}"", text);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.TypeUtilsTest_castToDate.test_castToDate_negative,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_castToDate_negative() throws Exception {
        Assert.assertEquals(new Date(-1), TypeUtils.castToDate(-1));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.Bug_for_issue_331.test_for_issue,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_for_issue() throws Exception {
        
        SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd"", JSON.defaultLocale);
        format.setTimeZone(JSON.defaultTimeZone);
        Date date = format.parse(""2015-05-23"");

        Calendar c = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        c.setTime(date);

        Model original = new Model();
        original.setDate(date);
        original.setCalendar(c);
        
        String json = JSON.toJSONString(original, SerializerFeature.UseISO8601DateFormat);

        System.out.println(json); //V1.2.4 �ｿｽ?�ｿｽ?�ｿｽ{""calendar"":""2015-05-23"",""date"":""2015-05-23""} , V1.2.6 �ｿｽ?�ｿｽ?�ｿｽ{""calendar"":""2015-05-23+08:00"",""date"":""2015-05-23+08:00""}

        Model actual = JSON.parseObject(json, Model.class);

        Assert.assertNotNull(actual);
        Assert.assertNotNull(actual.getDate());
        Assert.assertNotNull(actual.getCalendar());

        Assert.assertEquals(""�ｿｽ?�ｿｽ?�ｿｽ??�ｿｽ??�ｿｽ??�ｿｽ?�ｿｽ?�ｿｽ?�ｿｽ?�ｿｽ�ｿｽ?"", original.getDate(), actual.getDate());

        Assert.assertEquals(""�ｿｽ?�ｿｽ??�ｿｽ??�ｿｽ??�ｿｽ??Date �ｿｽ?? Calendar �ｿｽ?�ｿｽ?�ｿｽ�ｿｽ?"", actual.getDate(), actual.getCalendar().getTime());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.date.DateFieldTest9.test_kr_4,1,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_kr_4() throws Exception {
        Entity vo = JSON.parseObject(""{\""date\"":\""2016�ｿｽ??05�ｿｽ??06�ｿｽ?�ｿｽ\""}"", Entity.class);

        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);
        calendar.setTime(vo.date);
        Assert.assertEquals(2016, calendar.get(Calendar.YEAR));
        Assert.assertEquals(4, calendar.get(Calendar.MONTH));
        Assert.assertEquals(6, calendar.get(Calendar.DAY_OF_MONTH));
        Assert.assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));
        Assert.assertEquals(0, calendar.get(Calendar.MINUTE));
        Assert.assertEquals(0, calendar.get(Calendar.SECOND));
        Assert.assertEquals(0, calendar.get(Calendar.MILLISECOND));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,NA,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.derbysoft.spitfire.TestFastJson.testSerializePerformance,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testSerializePerformance() throws IOException {
        Object obj = createTest();

        for (int x = 0; x < 20; ++x) {
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            for (int i = 0; i < TIMES; ++i) {
                jsonSerialize(obj);
            }
            stopWatch.stop();

            System.out.println(""JSON serialize:"" + stopWatch.getTime());

            stopWatch.reset();
            stopWatch.start();
            for (int i = 0; i < TIMES; ++i) {
                javaSerialize(obj);
            }
            stopWatch.stop();
            System.out.println(""JAVA serialize:"" + stopWatch.getTime());
            System.out.println();
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.derbysoft.spitfire.TestFastJson.testSerializePerformance,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testSerializePerformance() throws IOException {
        Object obj = createTest();

        for (int x = 0; x < 20; ++x) {
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            for (int i = 0; i < TIMES; ++i) {
                jsonSerialize(obj);
            }
            stopWatch.stop();

            System.out.println(""JSON serialize:"" + stopWatch.getTime());

            stopWatch.reset();
            stopWatch.start();
            for (int i = 0; i < TIMES; ++i) {
                javaSerialize(obj);
            }
            stopWatch.stop();
            System.out.println(""JAVA serialize:"" + stopWatch.getTime());
            System.out.println();
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.eq1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void eq1() throws Throwable {
    // Arrange
    Object a = -1;
    Object b = null;
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath"");
    Method m = c.getDeclaredMethod(""eq"", Reflector.forName(""java.lang.Object""), Reflector.forName(""java.lang.Object""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, a, b);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.eq1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void eq1() throws Throwable {
    // Arrange
    Object a = -1;
    Object b = null;
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath"");
    Method m = c.getDeclaredMethod(""eq"", Reflector.forName(""java.lang.Object""), Reflector.forName(""java.lang.Object""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, a, b);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.eq2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void eq2() throws Throwable {
    // Arrange
    Object a = null;
    Object b = null;
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath"");
    Method m = c.getDeclaredMethod(""eq"", Reflector.forName(""java.lang.Object""), Reflector.forName(""java.lang.Object""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, a, b);
    // Assert result
    Assert.assertEquals(true, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.eq2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void eq2() throws Throwable {
    // Arrange
    Object a = null;
    Object b = null;
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath"");
    Method m = c.getDeclaredMethod(""eq"", Reflector.forName(""java.lang.Object""), Reflector.forName(""java.lang.Object""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, a, b);
    // Assert result
    Assert.assertEquals(true, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.isDFirst1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isDFirst1() throws Throwable {
    // Arrange
    char ch = '2';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(true, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.isDFirst1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isDFirst1() throws Throwable {
    // Arrange
    char ch = '2';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(true, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.isDFirst2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isDFirst2() throws Throwable {
    // Arrange
    char ch = ':';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.isDFirst2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isDFirst2() throws Throwable {
    // Arrange
    char ch = ':';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.isDFirst3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isDFirst3() throws Throwable {
    // Arrange
    char ch = '\u0000';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.isDFirst3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isDFirst3() throws Throwable {
    // Arrange
    char ch = '\u0000';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.isEOF1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isEOF1() throws Throwable {
    // Arrange
    Object objectUnderTest = Reflector.getInstance(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Reflector.setField(objectUnderTest, ""path"", """");
    Reflector.setField(objectUnderTest, ""pos"", -2147483647);
    Reflector.setField(objectUnderTest, ""level"", 0);
    Reflector.setField(objectUnderTest, ""ch"", '\u0000');
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isEOF"");
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.isEOF1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isEOF1() throws Throwable {
    // Arrange
    Object objectUnderTest = Reflector.getInstance(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Reflector.setField(objectUnderTest, ""path"", """");
    Reflector.setField(objectUnderTest, ""pos"", -2147483647);
    Reflector.setField(objectUnderTest, ""level"", 0);
    Reflector.setField(objectUnderTest, ""ch"", '\u0000');
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isEOF"");
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest);
    // Assert result
    Assert.assertEquals(false, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.JSONPathTest.isEOF2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isEOF2() throws Throwable {
    // Arrange
    Object objectUnderTest = Reflector.getInstance(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Reflector.setField(objectUnderTest, ""path"", ""!"");
    Reflector.setField(objectUnderTest, ""pos"", 1);
    Reflector.setField(objectUnderTest, ""level"", 0);
    Reflector.setField(objectUnderTest, ""ch"", '\u0000');
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isEOF"");
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest);
    // Assert result
    Assert.assertEquals(true, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.JSONPathTest.isEOF2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isEOF2() throws Throwable {
    // Arrange
    Object objectUnderTest = Reflector.getInstance(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Reflector.setField(objectUnderTest, ""path"", ""!"");
    Reflector.setField(objectUnderTest, ""pos"", 1);
    Reflector.setField(objectUnderTest, ""level"", 0);
    Reflector.setField(objectUnderTest, ""ch"", '\u0000');
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isEOF"");
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest);
    // Assert result
    Assert.assertEquals(true, retval);
  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.serializer.SerializeWriterTest.testWriteLiteBasicStr,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriteLiteBasicStr() throws UnsupportedEncodingException {
        String targetStr = new String(IOUtils.DIGITS);
        this.doTestWrite(targetStr);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.serializer.SerializeWriterTest.testWriteLiteBasicStr,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriteLiteBasicStr() throws UnsupportedEncodingException {
        String targetStr = new String(IOUtils.DIGITS);
        this.doTestWrite(targetStr);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.serializer.SerializeWriterTest.testWriteLiteSpecilaStr,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriteLiteSpecilaStr() throws UnsupportedEncodingException {
        this.doTestWrite(this.makeSpecialChars());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.serializer.SerializeWriterTest.testWriteLiteSpecilaStr,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriteLiteSpecilaStr() throws UnsupportedEncodingException {
        this.doTestWrite(this.makeSpecialChars());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.serializer.SerializeWriterTest.testWriteLargeBasicStr,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriteLargeBasicStr() throws UnsupportedEncodingException {
        String tmp = new String(IOUtils.DIGITS);
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 200; i++) {
            builder.append(tmp);
        }
        this.doTestWrite(builder.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.serializer.SerializeWriterTest.testWriteLargeBasicStr,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriteLargeBasicStr() throws UnsupportedEncodingException {
        String tmp = new String(IOUtils.DIGITS);
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 200; i++) {
            builder.append(tmp);
        }
        this.doTestWrite(builder.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.serializer.SerializeWriterTest.testWriteLargeSpecialStr,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriteLargeSpecialStr() throws UnsupportedEncodingException {

        String tmp = this.makeSpecialChars();
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 200; i++) {
            builder.append(tmp);
        }
        this.doTestWrite(builder.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.serializer.SerializeWriterTest.testWriteLargeSpecialStr,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriteLargeSpecialStr() throws UnsupportedEncodingException {

        String tmp = this.makeSpecialChars();
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 200; i++) {
            builder.append(tmp);
        }
        this.doTestWrite(builder.toString());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.serializer.SerializeWriterTest.test_large,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_large() throws Exception {
        SerializeWriter writer = new SerializeWriter();

        for (int i = 0; i < 1024 * 1024; ++i) {
            writer.write(i);
        }

        writer.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.serializer.SerializeWriterTest.test_large,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_large() throws Exception {
        SerializeWriter writer = new SerializeWriter();

        for (int i = 0; i < 1024 * 1024; ++i) {
            writer.write(i);
        }

        writer.close();
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.serializer.TestParse.testParse,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testParse() {
        logger.info(""parsing json string:"" + jsonString);
        TestBean testBean = (TestBean) JSON.parse(jsonString);
        assert testBean.getData() != null;
        assert ""tester"".equals(testBean.getName());
        assert ""value"".equals(testBean.getData().getString(""key""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.serializer.TestParse.testParse,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testParse() {
        logger.info(""parsing json string:"" + jsonString);
        TestBean testBean = (TestBean) JSON.parse(jsonString);
        assert testBean.getData() != null;
        assert ""tester"".equals(testBean.getName());
        assert ""value"".equals(testBean.getData().getString(""key""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.support.jaxrs.TestIssue885.testWriteTo,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriteTo() {
        final String user = target(""user"").request().accept(""application/json"").get(String.class);
        // {""createdOn"":1412036891919,""id"":12345,""name"":""smallnest""}]
        assertTrue(user.indexOf(""createdOn"") > 0);
        assertTrue(user.indexOf(""\""id\"":12345"") > 0);
        assertTrue(user.indexOf(""\""name\"":\""smallnest\"""") > 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.support.jaxrs.TestIssue885.testWriteTo,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriteTo() {
        final String user = target(""user"").request().accept(""application/json"").get(String.class);
        // {""createdOn"":1412036891919,""id"":12345,""name"":""smallnest""}]
        assertTrue(user.indexOf(""createdOn"") > 0);
        assertTrue(user.indexOf(""\""id\"":12345"") > 0);
        assertTrue(user.indexOf(""\""name\"":\""smallnest\"""") > 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.support.jaxrs.TestIssue885.testWriteToWithPretty,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriteToWithPretty() {
        //System.out.println(""@@@@@Test Pretty"");
        final String user = target(""user"").queryParam(""pretty"", ""true"").request().accept(""application/json"").get(String.class);
        // {""createdOn"":1412036891919,""id"":12345,""name"":""smallnest""}]
        assertTrue(user.indexOf(""createdOn"") > 0);
        assertTrue(user.indexOf(""\""id\"":12345"") > 0);
        assertTrue(user.indexOf(""\""name\"":\""smallnest\"""") > 0);
        //response does not contain a return character
        //assertTrue(user.indexOf(""\n\t"") > 0);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.support.jaxrs.TestIssue885.testWriteToWithPretty,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriteToWithPretty() {
        //System.out.println(""@@@@@Test Pretty"");
        final String user = target(""user"").queryParam(""pretty"", ""true"").request().accept(""application/json"").get(String.class);
        // {""createdOn"":1412036891919,""id"":12345,""name"":""smallnest""}]
        assertTrue(user.indexOf(""createdOn"") > 0);
        assertTrue(user.indexOf(""\""id\"":12345"") > 0);
        assertTrue(user.indexOf(""\""name\"":\""smallnest\"""") > 0);
        //response does not contain a return character
        //assertTrue(user.indexOf(""\n\t"") > 0);

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.support.jaxrs.TestIssue885.testReadFrom,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testReadFrom() {
        final User user = target(""user"").request().accept(""application/json"").get(User.class);
        assertNotNull(user);
        assertNotNull(user.getCreatedOn());
        assertEquals(user.getId().longValue(), 12345L);
        assertEquals(user.getName(), ""smallnest"");
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.support.jaxrs.TestIssue885.testReadFrom,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testReadFrom() {
        final User user = target(""user"").request().accept(""application/json"").get(User.class);
        assertNotNull(user);
        assertNotNull(user.getCreatedOn());
        assertEquals(user.getId().longValue(), 12345L);
        assertEquals(user.getName(), ""smallnest"");
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.IgnoreTypeDeserializer.parseObjectWithNotExistTypeThrowException,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test(expected = JSONException.class)
    public void parseObjectWithNotExistTypeThrowException() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        JSONObject.parseObject(s, ValueBean.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.IgnoreTypeDeserializer.parseObjectWithNotExistTypeThrowException,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test(expected = JSONException.class)
    public void parseObjectWithNotExistTypeThrowException() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        JSONObject.parseObject(s, ValueBean.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.IgnoreTypeDeserializer.parseObjectWithNotExistType,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void parseObjectWithNotExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        ValueBean v = JSONObject.parseObject(s, ValueBean.class, Feature.IgnoreAutoType);
        Assert.assertNotNull(v);
        Assert.assertEquals(new Integer(1), v.getVal());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.IgnoreTypeDeserializer.parseObjectWithNotExistType,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void parseObjectWithNotExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        ValueBean v = JSONObject.parseObject(s, ValueBean.class, Feature.IgnoreAutoType);
        Assert.assertNotNull(v);
        Assert.assertEquals(new Integer(1), v.getVal());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.IgnoreTypeDeserializer.parseWithNotExistType,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void parseWithNotExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        Object object = JSONObject.parse(s);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof JSONObject);
        Assert.assertEquals(new Integer(1), JSONObject.class.cast(object).getInteger(""val""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.IgnoreTypeDeserializer.parseWithNotExistType,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void parseWithNotExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        Object object = JSONObject.parse(s);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof JSONObject);
        Assert.assertEquals(new Integer(1), JSONObject.class.cast(object).getInteger(""val""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.IgnoreTypeDeserializer.parseWithExistType,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void parseWithExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.deserializer.ValueBean\"",\""val\"":1}"";
        Object object = JSONObject.parse(s);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof ValueBean);
        Assert.assertEquals(new Integer(1), ValueBean.class.cast(object).getVal());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.IgnoreTypeDeserializer.parseWithExistType,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void parseWithExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.deserializer.ValueBean\"",\""val\"":1}"";
        Object object = JSONObject.parse(s);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof ValueBean);
        Assert.assertEquals(new Integer(1), ValueBean.class.cast(object).getVal());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.IgnoreTypeDeserializer.parseObjectWithExistType,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void parseObjectWithExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.deserializer.ValueBean\"",\""val\"":1}"";
        ValueBean object = JSONObject.parseObject(s, ValueBean.class);
        Assert.assertNotNull(object);
        Assert.assertEquals(new Integer(1), object.getVal());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.IgnoreTypeDeserializer.parseObjectWithExistType,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void parseObjectWithExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.deserializer.ValueBean\"",\""val\"":1}"";
        ValueBean object = JSONObject.parseObject(s, ValueBean.class);
        Assert.assertNotNull(object);
        Assert.assertEquals(new Integer(1), object.getVal());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.TestISO8601Date.testBug1884,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBug1884() {
        Calendar cale = Calendar.getInstance();
        cale.clear();
        cale.setTimeZone( TimeZone.getTimeZone( ""GMT+7"" ) );
        cale.set( 2018, Calendar.MAY, 31, 19, 13, 42 );
        Date date = cale.getTime();

        String s1 = ""{date: \""2018-05-31T19:13:42+07:00\""}""; // ﾃｩﾂ板凖ｨﾂｯﾂｯﾃｧﾂ堋�
        String s2 = ""{date: \""2018-05-31T19:13:42.000+07:00\""}""; // ﾃｦﾂｭﾂ｣ﾃｧﾂ｡ﾂｮﾃｧﾂ堋�
        Date date1 = JSON.parseObject( s1, JSONObject.class ).getDate( ""date"" );
        Date date2 = JSON.parseObject( s2, JSONObject.class ).getDate( ""date"" );
        assertEquals(date1, date2);
        assertEquals(date, date1);
        assertEquals(date, date2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.TestISO8601Date.testBug1884,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBug1884() {
        Calendar cale = Calendar.getInstance();
        cale.clear();
        cale.setTimeZone( TimeZone.getTimeZone( ""GMT+7"" ) );
        cale.set( 2018, Calendar.MAY, 31, 19, 13, 42 );
        Date date = cale.getTime();

        String s1 = ""{date: \""2018-05-31T19:13:42+07:00\""}""; // ﾃｩﾂ板凖ｨﾂｯﾂｯﾃｧﾂ堋�
        String s2 = ""{date: \""2018-05-31T19:13:42.000+07:00\""}""; // ﾃｦﾂｭﾂ｣ﾃｧﾂ｡ﾂｮﾃｧﾂ堋�
        Date date1 = JSON.parseObject( s1, JSONObject.class ).getDate( ""date"" );
        Date date2 = JSON.parseObject( s2, JSONObject.class ).getDate( ""date"" );
        assertEquals(date1, date2);
        assertEquals(date, date1);
        assertEquals(date, date2);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.TestISO8601Date.testBug376,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBug376() {
        Calendar cale = Calendar.getInstance();
        cale.clear();
        cale.setTimeZone( TimeZone.getTimeZone( ""GMT"" ) );
        cale.set( 2018, Calendar.MAY, 31, 19, 13, 42 );
        Date date = cale.getTime();

        String s1 = ""{date: \""2018-05-31T19:13:42Z\""}"";
        String s2 = ""{date: \""2018-05-31T19:13:42.000Z\""}"";

        Date date1 = JSON.parseObject( s1, JSONObject.class ).getDate( ""date"" );
        Date date2 = JSON.parseObject( s2, JSONObject.class ).getDate( ""date"" );

        assertEquals( date1, date2 );
        assertEquals( date, date1 );
        assertEquals( date, date2 );
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.TestISO8601Date.testBug376,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBug376() {
        Calendar cale = Calendar.getInstance();
        cale.clear();
        cale.setTimeZone( TimeZone.getTimeZone( ""GMT"" ) );
        cale.set( 2018, Calendar.MAY, 31, 19, 13, 42 );
        Date date = cale.getTime();

        String s1 = ""{date: \""2018-05-31T19:13:42Z\""}"";
        String s2 = ""{date: \""2018-05-31T19:13:42.000Z\""}"";

        Date date1 = JSON.parseObject( s1, JSONObject.class ).getDate( ""date"" );
        Date date2 = JSON.parseObject( s2, JSONObject.class ).getDate( ""date"" );

        assertEquals( date1, date2 );
        assertEquals( date, date1 );
        assertEquals( date, date2 );
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.issue2638.TestIssue2638.testBug2638,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBug2638() {
        String str=""}"";
        JSON.parseObject(str,Person.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.issue2638.TestIssue2638.testBug2638,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBug2638() {
        String str=""}"";
        JSON.parseObject(str,Person.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.issue1463.TestIssue1463.testIssue1463,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testIssue1463() {
        String str = doubleDeserialization(wenshao);
        try {
            wenshao = JSON.parseObject(str, Person.class);
        } catch (Throwable ex) {
            Assert.assertEquals(ex.getCause() instanceof NullPointerException, false);
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.issue1463.TestIssue1463.testIssue1463,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testIssue1463() {
        String str = doubleDeserialization(wenshao);
        try {
            wenshao = JSON.parseObject(str, Person.class);
        } catch (Throwable ex) {
            Assert.assertEquals(ex.getCause() instanceof NullPointerException, false);
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.issue2711.TestIssue.testDeserializeGenericsUnwrapped,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testDeserializeGenericsUnwrapped() {
        PageRequest<User> req = new PageRequest<User>();
        req.setData(new User(1L, ""jack""));
        req.setFrom(10);
        req.setSize(20);
        String s = JSON.toJSONString(req);
        System.out.println(s);

        PageRequest<User> newReq = JSON.parseObject(s, new TypeReference<PageRequest<User>>() {});
        Assert.assertNotNull(newReq);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.issue2711.TestIssue.testDeserializeGenericsUnwrapped,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testDeserializeGenericsUnwrapped() {
        PageRequest<User> req = new PageRequest<User>();
        req.setData(new User(1L, ""jack""));
        req.setFrom(10);
        req.setSize(20);
        String s = JSON.toJSONString(req);
        System.out.println(s);

        PageRequest<User> newReq = JSON.parseObject(s, new TypeReference<PageRequest<User>>() {});
        Assert.assertNotNull(newReq);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.issues569.TestIssues569.testBug569,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBug569() {
        //ﾃｧﾂｬﾂｬﾃ､ﾂｸﾂ¢ﾃｦﾂｬﾂ｡ﾃ･ﾂ渉催･ﾂｺﾂ湘･ﾂ按療･ﾂ個姪ｦﾂ伉ｯﾃ､ﾂｽﾂｿﾃｧﾂ板ｨﾃｧﾂ堋� MyResponseﾃｯﾂｼﾂ� ﾃｦﾂｲﾂ｡ﾃｦﾂ慊嘉ｦﾂ個�ﾃ･ﾂｮﾂ堙ｦﾂｳﾂ崚･ﾂ楪凝ｧﾂｱﾂｻﾃ･ﾂ楪凝ｯﾂｼﾂ古ｨﾂｲﾂ古､ﾂｼﾂｼﾃ､ﾂｼﾂ堙ｧﾂｼﾂ禿･ﾂｭﾂ� MyResponseﾃｯﾂｼﾂ� ﾃ･ﾂ青偲ｩﾂ敖｢ﾃ･ﾂ慊ｨﾃｨﾂｰﾂεｧﾂ板ｨﾃｧﾂ堋МyResponse<?>ﾃ･ﾂ渉催･ﾂｺﾂ湘･ﾂ按療･ﾂ個姪･ﾂｰﾂｱﾃ･ﾂ渉療･ﾂｽﾂｱﾃ･ﾂ督催､ﾂｺﾂ�
        MyResponse resp1 = JSON.parseObject(jsonData, mType1, configBug569, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);

        //expect MyResponse<JSONArray<JSONObject>>
        MyResponse resp = JSON.parseObject(jsonData, mType, configBug569, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);
        Assert.assertNotNull(resp);
        Assert.assertNotNull(resp.getResult());
        Assert.assertEquals(JSONArray.class, resp.getResult().getClass());//ﾃｨﾂｿﾂ凖ｩﾂ�ﾂ古､ﾂｼﾂ堙･ﾂ渉療･ﾂ按ｰ resp1 ﾃｧﾂ堋�ﾃ･ﾂｽﾂｱﾃ･ﾂ督�
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.issues569.TestIssues569.testBug569,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBug569() {
        //ﾃｧﾂｬﾂｬﾃ､ﾂｸﾂ¢ﾃｦﾂｬﾂ｡ﾃ･ﾂ渉催･ﾂｺﾂ湘･ﾂ按療･ﾂ個姪ｦﾂ伉ｯﾃ､ﾂｽﾂｿﾃｧﾂ板ｨﾃｧﾂ堋� MyResponseﾃｯﾂｼﾂ� ﾃｦﾂｲﾂ｡ﾃｦﾂ慊嘉ｦﾂ個�ﾃ･ﾂｮﾂ堙ｦﾂｳﾂ崚･ﾂ楪凝ｧﾂｱﾂｻﾃ･ﾂ楪凝ｯﾂｼﾂ古ｨﾂｲﾂ古､ﾂｼﾂｼﾃ､ﾂｼﾂ堙ｧﾂｼﾂ禿･ﾂｭﾂ� MyResponseﾃｯﾂｼﾂ� ﾃ･ﾂ青偲ｩﾂ敖｢ﾃ･ﾂ慊ｨﾃｨﾂｰﾂεｧﾂ板ｨﾃｧﾂ堋МyResponse<?>ﾃ･ﾂ渉催･ﾂｺﾂ湘･ﾂ按療･ﾂ個姪･ﾂｰﾂｱﾃ･ﾂ渉療･ﾂｽﾂｱﾃ･ﾂ督催､ﾂｺﾂ�
        MyResponse resp1 = JSON.parseObject(jsonData, mType1, configBug569, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);

        //expect MyResponse<JSONArray<JSONObject>>
        MyResponse resp = JSON.parseObject(jsonData, mType, configBug569, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);
        Assert.assertNotNull(resp);
        Assert.assertNotNull(resp.getResult());
        Assert.assertEquals(JSONArray.class, resp.getResult().getClass());//ﾃｨﾂｿﾂ凖ｩﾂ�ﾂ古､ﾂｼﾂ堙･ﾂ渉療･ﾂ按ｰ resp1 ﾃｧﾂ堋�ﾃ･ﾂｽﾂｱﾃ･ﾂ督�
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.deserializer.issues569.TestIssues569.testFixBug569,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testFixBug569() {
        MyResponse resp1 = JSON.parseObject(jsonData, mType1, config, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);

        //expect MyResponse<List<Dept>>
        MyResponse resp = JSON.parseObject(jsonData, mType, config, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);
        Assert.assertNotNull(resp);
        Assert.assertNotNull(resp.getResult());
        Assert.assertEquals(ArrayList.class, resp.getResult().getClass());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.deserializer.issues569.TestIssues569.testFixBug569,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testFixBug569() {
        MyResponse resp1 = JSON.parseObject(jsonData, mType1, config, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);

        //expect MyResponse<List<Dept>>
        MyResponse resp = JSON.parseObject(jsonData, mType, config, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);
        Assert.assertNotNull(resp);
        Assert.assertNotNull(resp.getResult());
        Assert.assertEquals(ArrayList.class, resp.getResult().getClass());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.charArrayCompare1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void charArrayCompare1() throws Throwable {

    // Arrange
    String src = """";
    int offset = 7;
    char[] dest = { '\u0000' };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.charArrayCompare1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void charArrayCompare1() throws Throwable {

    // Arrange
    String src = """";
    int offset = 7;
    char[] dest = { '\u0000' };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.charArrayCompare3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void charArrayCompare3() throws Throwable {

    // Arrange
    String src = ""!!!!!!!\""&&"";
    int offset = 6;
    char[] dest = { '\u0000' };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.charArrayCompare3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void charArrayCompare3() throws Throwable {

    // Arrange
    String src = ""!!!!!!!\""&&"";
    int offset = 6;
    char[] dest = { '\u0000' };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.charArrayCompare4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void charArrayCompare4() throws Throwable {

    // Arrange
    String src = ""!\""&&&&&"";
    int offset = 0;
    char[] dest = { };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.charArrayCompare4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void charArrayCompare4() throws Throwable {

    // Arrange
    String src = ""!\""&&&&&"";
    int offset = 0;
    char[] dest = { };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate1() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 51;
    int d1 = 48;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate1() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 51;
    int d1 = 48;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate2() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '0';
    char M1 = '\u8031';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate2() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '0';
    char M1 = '\u8031';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate3() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 49;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate3() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 49;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate4() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 50;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate4() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 50;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate5() throws Throwable {

    // Arrange
    char y0 = '4';
    char y1 = '\u0000';
    char y2 = '\u0000';
    char y3 = '\u0000';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate5() throws Throwable {

    // Arrange
    char y0 = '4';
    char y1 = '\u0000';
    char y2 = '\u0000';
    char y3 = '\u0000';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate6,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate6() throws Throwable {

    // Arrange
    char y0 = '\u0000';
    char y1 = '\u0000';
    char y2 = '\u0000';
    char y3 = '\u0000';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate6,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate6() throws Throwable {

    // Arrange
    char y0 = '\u0000';
    char y1 = '\u0000';
    char y2 = '\u0000';
    char y3 = '\u0000';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate7,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate7() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '0';
    char M0 = '0';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate7,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate7() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '0';
    char M0 = '0';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate8,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate8() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '\u0011';
    char y2 = '0';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate8,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate8() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '\u0011';
    char y2 = '0';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate9,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate9() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 49;
    int d1 = 49;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate9,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate9() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 49;
    int d1 = 49;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate10,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate10() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 8388658;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate10,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate10() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 8388658;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate11,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate11() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 48;
    int d1 = 49;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate11,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate11() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 48;
    int d1 = 49;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate12,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate12() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '\u8030';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate12,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate12() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '\u8030';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate13,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate13() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 48;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate13,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate13() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 48;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate14,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate14() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 51;
    int d1 = -2147483600;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate14,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate14() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 51;
    int d1 = -2147483600;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate15,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate15() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '\u8031';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate15,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate15() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '\u8031';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate16,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate16() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate16,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate16() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkDate17,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkDate17() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '0';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkDate17,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkDate17() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '0';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '\u0000';
    char h1 = '\u0000';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '\u0000';
    char h1 = '\u0000';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime2() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '2';
    char h1 = '\u0000';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime2() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '2';
    char h1 = '\u0000';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime3() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = '<';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime3() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = '<';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime4() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = ' ';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime4() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = ' ';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime5() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '2';
    char h1 = '5';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime5() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '2';
    char h1 = '5';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime6,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime6() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = '9';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime6,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime6() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = '9';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime7,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime7() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '=';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime7,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime7() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '=';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime8,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime8() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime8,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime8() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime9,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime9() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = ' ';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime9,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime9() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = ' ';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime10,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime10() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = '3';
    char s0 = '1';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime10,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime10() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = '3';
    char s0 = '1';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime11,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime11() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime11,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime11() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime12,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime12() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '6';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime12,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime12() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '6';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime13,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime13() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '>';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime13,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime13() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '>';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime14,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime14() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '6';
    char s1 = '0';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime14,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime14() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '6';
    char s1 = '0';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime15,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime15() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = '3';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime15,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime15() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = '3';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime16,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime16() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = ':';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime16,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime16() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = ':';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.checkTime17,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void checkTime17() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '1';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.checkTime17,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void checkTime17() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '1';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.info1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void info1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    Locale locale = ((Locale)Reflector.getInstance(""java.util.Locale""));
    objectUnderTest.locale = locale;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", ""(((("");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 7;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = ""!!!!"";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    char[] charArray = { '\u0000' };
    objectUnderTest.sbuf = charArray;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    String retval = objectUnderTest.info();

    // Assert result
    Assert.assertEquals(""pos 7, json : (((("", retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.info1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void info1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    Locale locale = ((Locale)Reflector.getInstance(""java.util.Locale""));
    objectUnderTest.locale = locale;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", ""(((("");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 7;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = ""!!!!"";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    char[] charArray = { '\u0000' };
    objectUnderTest.sbuf = charArray;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    String retval = objectUnderTest.info();

    // Assert result
    Assert.assertEquals(""pos 7, json : (((("", retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.isEOF1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isEOF1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u001a';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.isEOF1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isEOF1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u001a';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(true, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.isEOF2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isEOF2() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 1;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.isEOF2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isEOF2() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 1;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.parser.JSONScannerTest.isEOF3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
  public void isEOF3() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 1;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u001a';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.parser.JSONScannerTest.isEOF3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
  public void isEOF3() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 1;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u001a';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(false, retval);

  }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.Bug89.testBug89,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBug89() {
        try {
            String s = ""{\""a\"":ﾃ青ｷﾃ｣ﾂ¢ﾂ催｢ﾂ按£)_,\""}"";
            JSON.parseObject(s);
            fail(""Expect JSONException"");
        } catch (JSONException e) {
            // good
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.Bug89.testBug89,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBug89() {
        try {
            String s = ""{\""a\"":ﾃ青ｷﾃ｣ﾂ¢ﾂ催｢ﾂ按£)_,\""}"";
            JSON.parseObject(s);
            fail(""Expect JSONException"");
        } catch (JSONException e) {
            // good
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testDefault,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
	public void testDefault() throws Exception {
		String json = JSON.toJSONString(Sex.M);
		Assert.assertEquals(json, ""\""M\"""");
		
		Pojo pojo = new Pojo();
		pojo.setSex(Sex.M);
		json = JSON.toJSONString(pojo);
		Assert.assertEquals(json, ""{\""sex\"":\""M\""}"");

        try {
            JSON.parseObject(json, Pojo.class);
            Assert.assertTrue(true);
        } catch (Exception e) {
            Assert.fail(""ﾃｦﾂ楪堙､ﾂｸﾂｾﾃｩﾂｻﾂ佚ｨﾂｮﾂ､ﾃ･ﾂｺﾂ湘･ﾂ按療･ﾂ個墨ameﾃ･ﾂ¢ﾂｼﾃｯﾂｼﾂ古･ﾂ渉ｯﾃ､ﾂｻﾂ･ﾃ･ﾂ渉催･ﾂｺﾂ湘･ﾂ按療･ﾂ個姪ｦﾂ按静･ﾂ環�"");
        }

		Map<String, Pojo> map = new HashMap<String, Pojo>();
		map.put(""a"", pojo);
		json = JSON.toJSONString(map);
		Assert.assertEquals(json, ""{\""a\"":{\""sex\"":\""M\""}}"");
		
		Map<Sex, Pojo> enumMap = new EnumMap<Sex, Pojo>(Sex.class);
		enumMap.put(Sex.M, pojo);
		json = JSON.toJSONString(enumMap);
		Assert.assertEquals(json, ""{\""M\"":{\""sex\"":\""M\""}}"");
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testDefault,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
	public void testDefault() throws Exception {
		String json = JSON.toJSONString(Sex.M);
		Assert.assertEquals(json, ""\""M\"""");
		
		Pojo pojo = new Pojo();
		pojo.setSex(Sex.M);
		json = JSON.toJSONString(pojo);
		Assert.assertEquals(json, ""{\""sex\"":\""M\""}"");

        try {
            JSON.parseObject(json, Pojo.class);
            Assert.assertTrue(true);
        } catch (Exception e) {
            Assert.fail(""ﾃｦﾂ楪堙､ﾂｸﾂｾﾃｩﾂｻﾂ佚ｨﾂｮﾂ､ﾃ･ﾂｺﾂ湘･ﾂ按療･ﾂ個墨ameﾃ･ﾂ¢ﾂｼﾃｯﾂｼﾂ古･ﾂ渉ｯﾃ､ﾂｻﾂ･ﾃ･ﾂ渉催･ﾂｺﾂ湘･ﾂ按療･ﾂ個姪ｦﾂ按静･ﾂ環�"");
        }

		Map<String, Pojo> map = new HashMap<String, Pojo>();
		map.put(""a"", pojo);
		json = JSON.toJSONString(map);
		Assert.assertEquals(json, ""{\""a\"":{\""sex\"":\""M\""}}"");
		
		Map<Sex, Pojo> enumMap = new EnumMap<Sex, Pojo>(Sex.class);
		enumMap.put(Sex.M, pojo);
		json = JSON.toJSONString(enumMap);
		Assert.assertEquals(json, ""{\""M\"":{\""sex\"":\""M\""}}"");
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testDefault1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testDefault1() throws Exception {
//        JSON.DUMP_CLASS = ""/Users/bohr/Downloads/tmp"";
        String json = JSON.toJSONString(Sex.M, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""\""ﾃｧﾂ板ｷ\"""");
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testDefault1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testDefault1() throws Exception {
//        JSON.DUMP_CLASS = ""/Users/bohr/Downloads/tmp"";
        String json = JSON.toJSONString(Sex.M, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""\""ﾃｧﾂ板ｷ\"""");
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testDefault2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testDefault2() throws Exception {
        Pojo pojo = new Pojo();
        pojo.setSex(Sex.M);
        String json = JSON.toJSONString(pojo, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""{\""sex\"":\""ﾃｧﾂ板ｷ\""}"");
        
        try {
            Pojo pojo1 = JSON.parseObject(json, Pojo.class);
            Assert.assertNull(pojo1.getSex());
        } catch (Exception e) {
            Assert.assertTrue(true);
        }

        Map<String, Pojo> map = new HashMap<String, Pojo>();
        map.put(""a"", pojo);
        json = JSON.toJSONString(map, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""{\""a\"":{\""sex\"":\""ﾃｧﾂ板ｷ\""}}"");

        Map<Sex, Pojo> enumMap = new EnumMap<Sex, Pojo>(Sex.class);
        enumMap.put(Sex.M, pojo);
        json = JSON.toJSONString(enumMap, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""{\""ﾃｧﾂ板ｷ\"":{\""sex\"":\""ﾃｧﾂ板ｷ\""}}"");
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testDefault2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testDefault2() throws Exception {
        Pojo pojo = new Pojo();
        pojo.setSex(Sex.M);
        String json = JSON.toJSONString(pojo, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""{\""sex\"":\""ﾃｧﾂ板ｷ\""}"");
        
        try {
            Pojo pojo1 = JSON.parseObject(json, Pojo.class);
            Assert.assertNull(pojo1.getSex());
        } catch (Exception e) {
            Assert.assertTrue(true);
        }

        Map<String, Pojo> map = new HashMap<String, Pojo>();
        map.put(""a"", pojo);
        json = JSON.toJSONString(map, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""{\""a\"":{\""sex\"":\""ﾃｧﾂ板ｷ\""}}"");

        Map<Sex, Pojo> enumMap = new EnumMap<Sex, Pojo>(Sex.class);
        enumMap.put(Sex.M, pojo);
        json = JSON.toJSONString(enumMap, SerializerFeature.WriteEnumUsingToString);
        Assert.assertEquals(json, ""{\""ﾃｧﾂ板ｷ\"":{\""sex\"":\""ﾃｧﾂ板ｷ\""}}"");
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testName,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testName() throws Exception {
        Assert.assertEquals(""\""ﾃｧﾂ板ｷ\"""", JSON.toJSONString(Sex.M, SerializerFeature.WriteEnumUsingToString));
        Assert.assertEquals(""\""ﾃ･ﾂ･ﾂｳ\"""", JSON.toJSONString(Sex.W, SerializerFeature.WriteEnumUsingToString));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testName,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testName() throws Exception {
        Assert.assertEquals(""\""ﾃｧﾂ板ｷ\"""", JSON.toJSONString(Sex.M, SerializerFeature.WriteEnumUsingToString));
        Assert.assertEquals(""\""ﾃ･ﾂ･ﾂｳ\"""", JSON.toJSONString(Sex.W, SerializerFeature.WriteEnumUsingToString));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testWriterSerializerFeature,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWriterSerializerFeature() throws Exception {
        SerializeWriter writer=new SerializeWriter();
        writer.config(SerializerFeature.WriteEnumUsingToString,true);
        Assert.assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString));
        writer.config(SerializerFeature.WriteEnumUsingName,true);
        Assert.assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingName));
        Assert.assertFalse(writer.isEnabled(SerializerFeature.WriteEnumUsingToString));
        writer.config(SerializerFeature.WriteEnumUsingToString,true);
        Assert.assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString));
        Assert.assertFalse(writer.isEnabled(SerializerFeature.WriteEnumUsingName));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.serializer.enum_.EnumTest3.testWriterSerializerFeature,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWriterSerializerFeature() throws Exception {
        SerializeWriter writer=new SerializeWriter();
        writer.config(SerializerFeature.WriteEnumUsingToString,true);
        Assert.assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString));
        writer.config(SerializerFeature.WriteEnumUsingName,true);
        Assert.assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingName));
        Assert.assertFalse(writer.isEnabled(SerializerFeature.WriteEnumUsingToString));
        writer.config(SerializerFeature.WriteEnumUsingToString,true);
        Assert.assertTrue(writer.isEnabled(SerializerFeature.WriteEnumUsingToString));
        Assert.assertFalse(writer.isEnabled(SerializerFeature.WriteEnumUsingName));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1367_jaxrs.testParameterizedTypeBean,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testParameterizedTypeBean() throws Exception {

        String request = ""{\""t\"": \""victor zeng\""}"";

        Response response = target(""beanController"").path(""parameterizedTypeBean"").request().
                accept(""application/json;charset=UTF-8"").post(Entity.json(request));

        System.out.println(response.readEntity(String.class));

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1367_jaxrs.testParameterizedTypeBean,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testParameterizedTypeBean() throws Exception {

        String request = ""{\""t\"": \""victor zeng\""}"";

        Response response = target(""beanController"").path(""parameterizedTypeBean"").request().
                accept(""application/json;charset=UTF-8"").post(Entity.json(request));

        System.out.println(response.readEntity(String.class));

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1367_jaxrs.testTypeVariableBean,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testTypeVariableBean() throws Exception {

        String request = ""{\""id\"": 1}"";

        Response response = target(""beanController"").path(""typeVariableBean"").request().
                accept(""application/json;charset=UTF-8"").post(Entity.json(request));

        System.out.println(response.readEntity(String.class));

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1367_jaxrs.testTypeVariableBean,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testTypeVariableBean() throws Exception {

        String request = ""{\""id\"": 1}"";

        Response response = target(""beanController"").path(""typeVariableBean"").request().
                accept(""application/json;charset=UTF-8"").post(Entity.json(request));

        System.out.println(response.readEntity(String.class));

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1307.test_context_value_filter_not_effected,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_context_value_filter_not_effected () {
        List<Object> params = new ArrayList<Object>();
        Map data = new HashMap();
        data.put(""name"", ""ace"");
        params.add(data);
        //fail Actual   :[{""name"":""ace""}]
        Assert.assertEquals(""[{\""name\"":\""mark-ace\""}]"", JSON.toJSONString(params,
                        new SerializeFilter[]{
                                contextValueFilter
                        })
        );

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1307.test_context_value_filter_not_effected,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_context_value_filter_not_effected () {
        List<Object> params = new ArrayList<Object>();
        Map data = new HashMap();
        data.put(""name"", ""ace"");
        params.add(data);
        //fail Actual   :[{""name"":""ace""}]
        Assert.assertEquals(""[{\""name\"":\""mark-ace\""}]"", JSON.toJSONString(params,
                        new SerializeFilter[]{
                                contextValueFilter
                        })
        );

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1307.test_context_value_filter_effected,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_context_value_filter_effected() {
        List<Object> params = new ArrayList<Object>();
        Map data = new HashMap();
        data.put(""name"", ""ace"");
        params.add(data);
        //success
        Assert.assertEquals(""[{\""name\"":\""mark-ace\""}]"", JSON.toJSONString(params,
                        new SerializeFilter[]{
                                contextValueFilter,
                                valueFilter
                        })
        );
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1307.test_context_value_filter_effected,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_context_value_filter_effected() {
        List<Object> params = new ArrayList<Object>();
        Map data = new HashMap();
        data.put(""name"", ""ace"");
        params.add(data);
        //success
        Assert.assertEquals(""[{\""name\"":\""mark-ace\""}]"", JSON.toJSONString(params,
                        new SerializeFilter[]{
                                contextValueFilter,
                                valueFilter
                        })
        );
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1341.test,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test() {

        final String reponse = target(""book1341"").path(""123"").request().accept(""application/javascript"").get(String.class);
        System.out.println(reponse);
        Assert.assertTrue(reponse.indexOf(""Pythonﾃｦﾂｺﾂ静ｧﾂ£ﾂ�ﾃ･ﾂ可姪ｦﾂ楪�"") > 0);
        Assert.assertTrue(reponse.indexOf(""ﾃｧﾂ板ｵﾃ･ﾂｭﾂ静･ﾂｷﾂ･ﾃ､ﾂｸﾂ堙･ﾂ�ﾂｺﾃｧﾂ可暗ｧﾂ､ﾂｾ"") > 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1341.test,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test() {

        final String reponse = target(""book1341"").path(""123"").request().accept(""application/javascript"").get(String.class);
        System.out.println(reponse);
        Assert.assertTrue(reponse.indexOf(""Pythonﾃｦﾂｺﾂ静ｧﾂ£ﾂ�ﾃ･ﾂ可姪ｦﾂ楪�"") > 0);
        Assert.assertTrue(reponse.indexOf(""ﾃｧﾂ板ｵﾃ･ﾂｭﾂ静･ﾂｷﾂ･ﾃ､ﾂｸﾂ堙･ﾂ�ﾂｺﾃｧﾂ可暗ｧﾂ､ﾂｾ"") > 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1392.test,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test() {

        final String reponse = target(""book1392"").path(""123"").request().accept(""application/javascript"").get(String.class);
        System.out.println(reponse);
        Assert.assertTrue(reponse.indexOf(""Pythonﾃｦﾂｺﾂ静ｧﾂ£ﾂ�ﾃ･ﾂ可姪ｦﾂ楪�"") > 0);
        Assert.assertTrue(reponse.indexOf(""ﾃｧﾂ板ｵﾃ･ﾂｭﾂ静･ﾂｷﾂ･ﾃ､ﾂｸﾂ堙･ﾂ�ﾂｺﾃｧﾂ可暗ｧﾂ､ﾂｾ"") > 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1392.test,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test() {

        final String reponse = target(""book1392"").path(""123"").request().accept(""application/javascript"").get(String.class);
        System.out.println(reponse);
        Assert.assertTrue(reponse.indexOf(""Pythonﾃｦﾂｺﾂ静ｧﾂ£ﾂ�ﾃ･ﾂ可姪ｦﾂ楪�"") > 0);
        Assert.assertTrue(reponse.indexOf(""ﾃｧﾂ板ｵﾃ･ﾂｭﾂ静･ﾂｷﾂ･ﾃ､ﾂｸﾂ堙･ﾂ�ﾂｺﾃｧﾂ可暗ｧﾂ､ﾂｾ"") > 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1367.testParameterizedTypeBean,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testParameterizedTypeBean() throws Exception {
        mockMvc.perform(
                (post(""/parameterizedTypeBean"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)
                        .content(""{\""t\"": \""neil dong\""}"")
                        )).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1367.testParameterizedTypeBean,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testParameterizedTypeBean() throws Exception {
        mockMvc.perform(
                (post(""/parameterizedTypeBean"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)
                        .content(""{\""t\"": \""neil dong\""}"")
                        )).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1300.Issue1367.testTypeVariableBean,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testTypeVariableBean() throws Exception {
        mockMvc.perform(
                (post(""/typeVariableBean"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)
                        .content(""{\""id\"": 1}"")
                        )).andExpect(status().isOk()).andDo(print());

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1300.Issue1367.testTypeVariableBean,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testTypeVariableBean() throws Exception {
        mockMvc.perform(
                (post(""/typeVariableBean"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)
                        .content(""{\""id\"": 1}"")
                        )).andExpect(status().isOk()).andDo(print());

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.FastJsonSerializeIterableTest.testWithIterable,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testWithIterable() {
        class Person {
            private String name;
            public Person(String s) {
                this.name = s;
            }
            public String getName() {
                return name;
            }
        }
        final Person s1 = new Person(""fast"");
        final Person s2 = new Person(""fast"");
        Iterable<Person> iterable = new Iterable<Person>() {
            @Override
            public Iterator<Person> iterator() {
                return new Iterator<Person>() {
                    int cursor = 0;
                    @Override
                    public boolean hasNext() {
                        return cursor < 2;
                    }

                    @Override
                    public Person next() {
                        int val = cursor++;
                        switch (val) {
                            case 0:
                                return s1;
                            case 1:
                                return s2;
                            default:
                                throw new NoSuchElementException();
                        }
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        };
        List<Person> list = new ArrayList<Person>();
        for (Person p : iterable) {
            list.add(p);
        }
        
        Assert.assertEquals(""[{\""name\"":\""fast\""},{\""name\"":\""fast\""}]"", JSON.toJSONString(list));
        Assert.assertEquals(""[{\""name\"":\""fast\""},{\""name\"":\""fast\""}]"", JSON.toJSONString(iterable));
        Assert.assertEquals(""[{\""name\"":\""fast\""},{\""name\"":\""fast\""}]"", JSON.toJSONString(list.iterator()));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.FastJsonSerializeIterableTest.testWithIterable,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testWithIterable() {
        class Person {
            private String name;
            public Person(String s) {
                this.name = s;
            }
            public String getName() {
                return name;
            }
        }
        final Person s1 = new Person(""fast"");
        final Person s2 = new Person(""fast"");
        Iterable<Person> iterable = new Iterable<Person>() {
            @Override
            public Iterator<Person> iterator() {
                return new Iterator<Person>() {
                    int cursor = 0;
                    @Override
                    public boolean hasNext() {
                        return cursor < 2;
                    }

                    @Override
                    public Person next() {
                        int val = cursor++;
                        switch (val) {
                            case 0:
                                return s1;
                            case 1:
                                return s2;
                            default:
                                throw new NoSuchElementException();
                        }
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        };
        List<Person> list = new ArrayList<Person>();
        for (Person p : iterable) {
            list.add(p);
        }
        
        Assert.assertEquals(""[{\""name\"":\""fast\""},{\""name\"":\""fast\""}]"", JSON.toJSONString(list));
        Assert.assertEquals(""[{\""name\"":\""fast\""},{\""name\"":\""fast\""}]"", JSON.toJSONString(iterable));
        Assert.assertEquals(""[{\""name\"":\""fast\""},{\""name\"":\""fast\""}]"", JSON.toJSONString(list.iterator()));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.JSONTest.testParseArray,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testParseArray() throws Exception {
        List list = new ArrayList();
        OuterEntry entry = new OuterEntry();
        list.add(entry);
        entry.setId(1000L);
        entry.setUrl(""http://www.springframework.org/schema/aop"");
        String jsonString = JSONObject.toJSONString(entry);
        String arrayString = JSONObject.toJSONString(list);
        System.out.println(jsonString);
        System.out.println(arrayString);
        list = JSONArray.parseArray(arrayString, OuterEntry.class);
        JSONArray array = JSONArray.parseArray(arrayString);// ﾃｨﾂｿﾂ凖､ﾂｸﾂ¢ﾃｦﾂｭﾂ･ﾃ･ﾂ�ﾂｺﾃｩﾂ板�
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.JSONTest.testParseArray,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testParseArray() throws Exception {
        List list = new ArrayList();
        OuterEntry entry = new OuterEntry();
        list.add(entry);
        entry.setId(1000L);
        entry.setUrl(""http://www.springframework.org/schema/aop"");
        String jsonString = JSONObject.toJSONString(entry);
        String arrayString = JSONObject.toJSONString(list);
        System.out.println(jsonString);
        System.out.println(arrayString);
        list = JSONArray.parseArray(arrayString, OuterEntry.class);
        JSONArray array = JSONArray.parseArray(arrayString);// ﾃｨﾂｿﾂ凖､ﾂｸﾂ¢ﾃｦﾂｭﾂ･ﾃ･ﾂ�ﾂｺﾃｩﾂ板�
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.bug.JSONTest.testInnerEntry,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testInnerEntry() throws Exception {
        List list = new ArrayList();
        InnerEntry entry = new InnerEntry();
        list.add(entry);
        entry.setId(1000L);
        entry.setUrl(""http://www.springframework.org/schema/aop"");
        String jsonString = JSONObject.toJSONString(entry);// //ﾃｨﾂｿﾂ凖､ﾂｸﾂ¢ﾃｦﾂｭﾂ･ﾃ･ﾂ�ﾂｺﾃｩﾂ板�
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.bug.JSONTest.testInnerEntry,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testInnerEntry() throws Exception {
        List list = new ArrayList();
        InnerEntry entry = new InnerEntry();
        list.add(entry);
        entry.setId(1000L);
        entry.setUrl(""http://www.springframework.org/schema/aop"");
        String jsonString = JSONObject.toJSONString(entry);// //ﾃｨﾂｿﾂ凖､ﾂｸﾂ¢ﾃｦﾂｭﾂ･ﾃ･ﾂ�ﾂｺﾃｩﾂ板�
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1400.Issue1405.test7,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@RequestMapping(value = ""/test1405"", method = RequestMethod.GET)
        public
        @ResponseBody
        ModelAndView test7() {

            AuthIdentityRequest authRequest = new AuthIdentityRequest();
            authRequest.setAppId(""cert01"");
            authRequest.setUserId(2307643);
            authRequest.setIdNumber(""34324324234234"");
            authRequest.setRealName(""ﾃｦﾂ敖ｨﾃ･ﾂ環�"");
            authRequest.setBusinessLine("""");
            authRequest.setIgnoreIdNumberRepeat(false);
            authRequest.setOffline(false);

            ModelAndView modelAndView = new ModelAndView();
            modelAndView.addObject(""message"", authRequest);
            modelAndView.addObject(""title"", ""testPage"");
            modelAndView.setViewName(""test"");

            return modelAndView;
        }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1400.Issue1405.test7,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@RequestMapping(value = ""/test1405"", method = RequestMethod.GET)
        public
        @ResponseBody
        ModelAndView test7() {

            AuthIdentityRequest authRequest = new AuthIdentityRequest();
            authRequest.setAppId(""cert01"");
            authRequest.setUserId(2307643);
            authRequest.setIdNumber(""34324324234234"");
            authRequest.setRealName(""ﾃｦﾂ敖ｨﾃ･ﾂ環�"");
            authRequest.setBusinessLine("""");
            authRequest.setIgnoreIdNumberRepeat(false);
            authRequest.setOffline(false);

            ModelAndView modelAndView = new ModelAndView();
            modelAndView.addObject(""message"", authRequest);
            modelAndView.addObject(""title"", ""testPage"");
            modelAndView.setViewName(""test"");

            return modelAndView;
        }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1700.Issue1701.testBean,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBean() throws Exception {
        mockMvc.perform(
                (post(""/download"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON_UTF8)
                        .content(""{\""name\"": \""1.txt\""}"")
                )).andExpect(status().isOk()).andDo(print());

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1700.Issue1701.testBean,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBean() throws Exception {
        mockMvc.perform(
                (post(""/download"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON_UTF8)
                        .content(""{\""name\"": \""1.txt\""}"")
                )).andExpect(status().isOk()).andDo(print());

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1700.issue1763_2.TestIssue1763_2.testFixBug1763_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testFixBug1763_2() {
        BaseResult<PageResult<CouponResult>> data = JSON.parseObject(jsonStr, new TypeReference<BaseResult<PageResult<T>>>(clazz){}.getType());

        Assert.assertTrue(data.isSuccess());
        Assert.assertTrue(data.getContent().getList().size() == 2);
        Assert.assertTrue(data.getContent().getList().get(0).getId().equals(10000001L));
        Assert.assertEquals(CouponResult.class, data.getContent().getList().get(0).getClass());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1700.issue1763_2.TestIssue1763_2.testFixBug1763_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testFixBug1763_2() {
        BaseResult<PageResult<CouponResult>> data = JSON.parseObject(jsonStr, new TypeReference<BaseResult<PageResult<T>>>(clazz){}.getType());

        Assert.assertTrue(data.isSuccess());
        Assert.assertTrue(data.getContent().getList().size() == 2);
        Assert.assertTrue(data.getContent().getList().get(0).getId().equals(10000001L));
        Assert.assertEquals(CouponResult.class, data.getContent().getList().get(0).getClass());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.issue_1700.issue1763_2.TestIssue1763_2.testBug1763_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void testBug1763_2() {
        BaseResult<PageResult<CouponResult>> data = JSON.parseObject(jsonStr, new TypeReferenceBug1763_2<BaseResult<PageResult<T>>>(clazz){}.getType());

        Assert.assertTrue(data.isSuccess());
        Assert.assertTrue(data.getContent().getList().size() == 2);
        try {
            data.getContent().getList().get(0).getId();
        } catch (Throwable ex) {
            Assert.assertEquals(ex.getCause() instanceof ClassCastException, false);
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.issue_1700.issue1763_2.TestIssue1763_2.testBug1763_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void testBug1763_2() {
        BaseResult<PageResult<CouponResult>> data = JSON.parseObject(jsonStr, new TypeReferenceBug1763_2<BaseResult<PageResult<T>>>(clazz){}.getType());

        Assert.assertTrue(data.isSuccess());
        Assert.assertTrue(data.getContent().getList().size() == 2);
        try {
            data.getContent().getList().get(0).getId();
        } catch (Throwable ex) {
            Assert.assertEquals(ex.getCause() instanceof ClassCastException, false);
        }
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.jaxrs.mock.testcase.FastJsonProviderTest.test0,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
	public void test0() throws Exception {
		
		JSONObject json = new JSONObject();
		
		json.put(""id"", 123);
		
		json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");
		
		WebClient client = WebClient.create(REST_SERVICE_URL);
		
		Response response = client.path(""/fastjson/test1"").accept(""application/json"").type(""application/json; charset=UTF-8"").post(json.toJSONString());
		
		System.out.println(response.readEntity(String.class));
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.jaxrs.mock.testcase.FastJsonProviderTest.test0,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
	public void test0() throws Exception {
		
		JSONObject json = new JSONObject();
		
		json.put(""id"", 123);
		
		json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");
		
		WebClient client = WebClient.create(REST_SERVICE_URL);
		
		Response response = client.path(""/fastjson/test1"").accept(""application/json"").type(""application/json; charset=UTF-8"").post(json.toJSONString());
		
		System.out.println(response.readEntity(String.class));
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.jaxrs.mock.testcase.FastJsonProviderTest.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
	public void test1() throws Exception {
		
		JSONObject json = new JSONObject();
		
		json.put(""id"", 123);
		
		json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");
		
		WebClient client = WebClient.create(REST_SERVICE_URL);
		
		Response response = client.path(""/fastjson/test1"").replaceQuery(""pretty"").accept(""application/json"").type(""application/json; charset=UTF-8"").post(json.toJSONString());
		
		System.out.println(response.readEntity(String.class));
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.jaxrs.mock.testcase.FastJsonProviderTest.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
	public void test1() throws Exception {
		
		JSONObject json = new JSONObject();
		
		json.put(""id"", 123);
		
		json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");
		
		WebClient client = WebClient.create(REST_SERVICE_URL);
		
		Response response = client.path(""/fastjson/test1"").replaceQuery(""pretty"").accept(""application/json"").type(""application/json; charset=UTF-8"").post(json.toJSONString());
		
		System.out.println(response.readEntity(String.class));
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.jaxrs.mock.testcase.FastJsonProviderTest.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
	public void test2() throws Exception {
		
		String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";
		
		WebClient client = WebClient.create(REST_SERVICE_URL);
		
		Response response = client.path(""/fastjson/test2"").accept(""application/json"").type(""application/json; charset=UTF-8"").post(jsonStr);
		
		System.out.println(response.readEntity(String.class));
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.jaxrs.mock.testcase.FastJsonProviderTest.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
	public void test2() throws Exception {
		
		String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";
		
		WebClient client = WebClient.create(REST_SERVICE_URL);
		
		Response response = client.path(""/fastjson/test2"").accept(""application/json"").type(""application/json; charset=UTF-8"").post(jsonStr);
		
		System.out.println(response.readEntity(String.class));
	}"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_1() {
        User user = (User) serializer.deserialize(serializer.serialize(new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25)));
        Assert.assertTrue(Objects.equal(user.getId(), 1));
        Assert.assertTrue(Objects.equal(user.getName(), ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�""));
        Assert.assertTrue(Objects.equal(user.getAge(), 25));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_1() {
        User user = (User) serializer.deserialize(serializer.serialize(new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25)));
        Assert.assertTrue(Objects.equal(user.getId(), 1));
        Assert.assertTrue(Objects.equal(user.getName(), ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�""));
        Assert.assertTrue(Objects.equal(user.getAge(), 25));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_2() {
        Assert.assertThat(serializer.serialize(null), Is.is(new byte[0]));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_2() {
        Assert.assertThat(serializer.serialize(null), Is.is(new byte[0]));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_3() {
        Assert.assertThat(serializer.deserialize(new byte[0]), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_3() {
        Assert.assertThat(serializer.deserialize(new byte[0]), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_4() {
        Assert.assertThat(serializer.deserialize(null), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_4() {
        Assert.assertThat(serializer.deserialize(null), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test(expected = SerializationException.class)
    public void test_5() {
        User user = new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25);
        byte[] serializedValue = serializer.serialize(user);
        Arrays.sort(serializedValue); // corrupt serialization result
        serializer.deserialize(serializedValue);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test(expected = SerializationException.class)
    public void test_5() {
        User user = new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25);
        byte[] serializedValue = serializer.serialize(user);
        Arrays.sort(serializedValue); // corrupt serialization result
        serializer.deserialize(serializedValue);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_6,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_6() {

        BaseResult<List<String>> baseResult = new BaseResult<List<String>>();
        baseResult.setCode(""1000"");
        baseResult.setMsg(""success"");
        baseResult.setData(Lists.newArrayList(""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ�1"", ""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ�2"", ""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ�3""));

        GenericFastJsonRedisSerializer genericFastJsonRedisSerializer = new GenericFastJsonRedisSerializer();
        byte[] bytes = genericFastJsonRedisSerializer.serialize(baseResult);
        BaseResult<List<String>> baseResult2 = (BaseResult<List<String>>) genericFastJsonRedisSerializer.deserialize(bytes);

        Assert.assertEquals(baseResult2.getCode(), ""1000"");
        Assert.assertEquals(baseResult2.getData().size(), 3);

        String json = ""{\n"" +
                ""\""@type\"": \""com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest$BaseResult\"",\n"" +
                ""\""code\"": \""1000\"",\n"" +
                ""\""data\"": [\n"" +
                ""\""ﾃｦﾂ個嘉ｦﾂ可凝･ﾂ環ｨﾃｦﾂ篠ｧﾃ･ﾂ按ｶﾃｦﾂ個嘉ｩﾂ陳ｮ\"",\n"" +
                ""\""ﾃ､ﾂｸﾂ催･ﾂ�ﾂ愿ｦﾂ慊ｺ\"",\n"" +
                ""\""ﾃ､ﾂｸﾂ催ｨﾂｽﾂｬﾃ･ﾂ環ｨ\"",\n"" +
                ""\""ﾃ､ﾂｼﾂ£ﾃ･ﾂ環ｨﾃｨﾂｽﾂｴﾃｦﾂ個ｯﾃ･ﾂ環ｨﾃ･ﾂ､ﾂｧ\"",\n"" +
                ""\""ﾃｧﾂｬﾂｬﾃ､ﾂｸﾂ¢ﾃｦﾂ篠ｨﾃｨﾂｿﾂ崚･ﾂ卍ｨ\"",\n"" +
                ""\""ﾃｧﾂ板ｵﾃｦﾂ慊ｺﾃ､ﾂｸﾂ催ｨﾂｿﾂ静ｨﾂ｡ﾂ圭"",\n"" +
                ""],\n"" +
                ""\""msg\"": \""success\""\n"" +
                ""}"";

        BaseResult<List<String>> baseResult3 = (BaseResult<List<String>>) genericFastJsonRedisSerializer.deserialize(json.getBytes(IOUtils.UTF8));
        Assert.assertEquals(baseResult3.getCode(), ""1000"");
        Assert.assertEquals(baseResult3.getData().size(), 6);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest.test_6,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_6() {

        BaseResult<List<String>> baseResult = new BaseResult<List<String>>();
        baseResult.setCode(""1000"");
        baseResult.setMsg(""success"");
        baseResult.setData(Lists.newArrayList(""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ�1"", ""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ�2"", ""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ�3""));

        GenericFastJsonRedisSerializer genericFastJsonRedisSerializer = new GenericFastJsonRedisSerializer();
        byte[] bytes = genericFastJsonRedisSerializer.serialize(baseResult);
        BaseResult<List<String>> baseResult2 = (BaseResult<List<String>>) genericFastJsonRedisSerializer.deserialize(bytes);

        Assert.assertEquals(baseResult2.getCode(), ""1000"");
        Assert.assertEquals(baseResult2.getData().size(), 3);

        String json = ""{\n"" +
                ""\""@type\"": \""com.alibaba.json.bvt.support.spring.GenericFastJsonRedisSerializerTest$BaseResult\"",\n"" +
                ""\""code\"": \""1000\"",\n"" +
                ""\""data\"": [\n"" +
                ""\""ﾃｦﾂ個嘉ｦﾂ可凝･ﾂ環ｨﾃｦﾂ篠ｧﾃ･ﾂ按ｶﾃｦﾂ個嘉ｩﾂ陳ｮ\"",\n"" +
                ""\""ﾃ､ﾂｸﾂ催･ﾂ�ﾂ愿ｦﾂ慊ｺ\"",\n"" +
                ""\""ﾃ､ﾂｸﾂ催ｨﾂｽﾂｬﾃ･ﾂ環ｨ\"",\n"" +
                ""\""ﾃ､ﾂｼﾂ£ﾃ･ﾂ環ｨﾃｨﾂｽﾂｴﾃｦﾂ個ｯﾃ･ﾂ環ｨﾃ･ﾂ､ﾂｧ\"",\n"" +
                ""\""ﾃｧﾂｬﾂｬﾃ､ﾂｸﾂ¢ﾃｦﾂ篠ｨﾃｨﾂｿﾂ崚･ﾂ卍ｨ\"",\n"" +
                ""\""ﾃｧﾂ板ｵﾃｦﾂ慊ｺﾃ､ﾂｸﾂ催ｨﾂｿﾂ静ｨﾂ｡ﾂ圭"",\n"" +
                ""],\n"" +
                ""\""msg\"": \""success\""\n"" +
                ""}"";

        BaseResult<List<String>> baseResult3 = (BaseResult<List<String>>) genericFastJsonRedisSerializer.deserialize(json.getBytes(IOUtils.UTF8));
        Assert.assertEquals(baseResult3.getCode(), ""1000"");
        Assert.assertEquals(baseResult3.getData().size(), 6);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_1() {
        User user = serializer.deserialize(serializer.serialize(new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25)));
        Assert.assertTrue(Objects.equal(user.getId(), 1));
        Assert.assertTrue(Objects.equal(user.getName(), ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�""));
        Assert.assertTrue(Objects.equal(user.getAge(), 25));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_1() {
        User user = serializer.deserialize(serializer.serialize(new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25)));
        Assert.assertTrue(Objects.equal(user.getId(), 1));
        Assert.assertTrue(Objects.equal(user.getName(), ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�""));
        Assert.assertTrue(Objects.equal(user.getAge(), 25));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_2() {
        Assert.assertThat(serializer.serialize(null), Is.is(new byte[0]));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_2() {
        Assert.assertThat(serializer.serialize(null), Is.is(new byte[0]));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_3() {
        Assert.assertThat(serializer.deserialize(new byte[0]), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_3() {
        Assert.assertThat(serializer.deserialize(new byte[0]), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_4() {
        Assert.assertThat(serializer.deserialize(null), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_4() {
        Assert.assertThat(serializer.deserialize(null), IsNull.nullValue());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_5() {
        User user = new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25);
        byte[] serializedValue = serializer.serialize(user);
        Arrays.sort(serializedValue); // corrupt serialization result
        Assert.assertNull(serializer.deserialize(serializedValue));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_5() {
        User user = new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25);
        byte[] serializedValue = serializer.serialize(user);
        Arrays.sort(serializedValue); // corrupt serialization result
        Assert.assertNull(serializer.deserialize(serializedValue));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_6,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test_6() {

        FastJsonConfig fastJsonConfig = new FastJsonConfig();

        SerializerFeature[] serializerFeatures = new SerializerFeature[]{
                SerializerFeature.WriteClassName
        };
        fastJsonConfig.setSerializerFeatures(serializerFeatures);

        ParserConfig parserConfig = ParserConfig.getGlobalInstance();
        parserConfig.setAutoTypeSupport(true);
        fastJsonConfig.setParserConfig(parserConfig);

        FastJsonRedisSerializer fastJsonRedisSerializer = new FastJsonRedisSerializer(Object.class);
        Assert.assertNotNull(fastJsonRedisSerializer.getFastJsonConfig());
        fastJsonRedisSerializer.setFastJsonConfig(fastJsonConfig);

        User userSer = new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25);

        byte[] serializedValue = fastJsonRedisSerializer.serialize(userSer);
        User userDes = (User) fastJsonRedisSerializer.deserialize(serializedValue);

        Assert.assertEquals(userDes.getName(), ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"");
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonRedisSerializerTest.test_6,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test_6() {

        FastJsonConfig fastJsonConfig = new FastJsonConfig();

        SerializerFeature[] serializerFeatures = new SerializerFeature[]{
                SerializerFeature.WriteClassName
        };
        fastJsonConfig.setSerializerFeatures(serializerFeatures);

        ParserConfig parserConfig = ParserConfig.getGlobalInstance();
        parserConfig.setAutoTypeSupport(true);
        fastJsonConfig.setParserConfig(parserConfig);

        FastJsonRedisSerializer fastJsonRedisSerializer = new FastJsonRedisSerializer(Object.class);
        Assert.assertNotNull(fastJsonRedisSerializer.getFastJsonConfig());
        fastJsonRedisSerializer.setFastJsonConfig(fastJsonConfig);

        User userSer = new User(1, ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"", 25);

        byte[] serializedValue = fastJsonRedisSerializer.serialize(userSer);
        User userDes = (User) fastJsonRedisSerializer.deserialize(serializedValue);

        Assert.assertEquals(userDes.getName(), ""ﾃ･ﾂ慊淌ｨﾂｱﾂ�"");
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonJsonViewTest.test_jsonp,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public  void test_jsonp() throws Exception {
        FastJsonJsonView view = new FastJsonJsonView();

        Assert.assertNotNull(view.getFastJsonConfig());
        view.setFastJsonConfig(new FastJsonConfig());
        view.setExtractValueFromSingleKeyModel(true);
        view.setDisableCaching(true);

        MockHttpServletRequest request = new MockHttpServletRequest();
        request.addParameter(""callback"", ""queryName"");
        MockHttpServletResponse response = new MockHttpServletResponse();


        Assert.assertEquals(true, view.isExtractValueFromSingleKeyModel());


        view.render(Collections.singletonMap(""abc"", ""cdeﾃ､ﾂｸﾂｭﾃｦﾂ鳴�""), request, response);
        String contentAsString = response.getContentAsString();
        int contentLength = response.getContentLength();

        Assert.assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonJsonViewTest.test_jsonp,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public  void test_jsonp() throws Exception {
        FastJsonJsonView view = new FastJsonJsonView();

        Assert.assertNotNull(view.getFastJsonConfig());
        view.setFastJsonConfig(new FastJsonConfig());
        view.setExtractValueFromSingleKeyModel(true);
        view.setDisableCaching(true);

        MockHttpServletRequest request = new MockHttpServletRequest();
        request.addParameter(""callback"", ""queryName"");
        MockHttpServletResponse response = new MockHttpServletResponse();


        Assert.assertEquals(true, view.isExtractValueFromSingleKeyModel());


        view.render(Collections.singletonMap(""abc"", ""cdeﾃ､ﾂｸﾂｭﾃｦﾂ鳴�""), request, response);
        String contentAsString = response.getContentAsString();
        int contentLength = response.getContentLength();

        Assert.assertEquals(contentLength, contentAsString.getBytes(view.getFastJsonConfig().getCharset().name()).length);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.FastJsonJsonViewTest.test_jsonp_invalidParam,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public  void test_jsonp_invalidParam() throws Exception {
        FastJsonJsonView view = new FastJsonJsonView();

        Assert.assertNotNull(view.getFastJsonConfig());
        view.setFastJsonConfig(new FastJsonConfig());
        view.setExtractValueFromSingleKeyModel(true);
        view.setDisableCaching(true);

        MockHttpServletRequest request = new MockHttpServletRequest();
        request.addParameter(""callback"", ""-methodName"");
        MockHttpServletResponse response = new MockHttpServletResponse();


        Assert.assertEquals(true, view.isExtractValueFromSingleKeyModel());


        view.render(Collections.singletonMap(""doesn't matter"", Collections.singletonMap(""abc"", ""cdeﾃ､ﾂｸﾂｭﾃｦﾂ鳴�"")), request, response);
        String contentAsString = response.getContentAsString();
        Assert.assertTrue(contentAsString.startsWith(""{\""abc\"":\""cdeﾃ､ﾂｸﾂｭﾃｦﾂ鳴�\""}""));

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.FastJsonJsonViewTest.test_jsonp_invalidParam,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public  void test_jsonp_invalidParam() throws Exception {
        FastJsonJsonView view = new FastJsonJsonView();

        Assert.assertNotNull(view.getFastJsonConfig());
        view.setFastJsonConfig(new FastJsonConfig());
        view.setExtractValueFromSingleKeyModel(true);
        view.setDisableCaching(true);

        MockHttpServletRequest request = new MockHttpServletRequest();
        request.addParameter(""callback"", ""-methodName"");
        MockHttpServletResponse response = new MockHttpServletResponse();


        Assert.assertEquals(true, view.isExtractValueFromSingleKeyModel());


        view.render(Collections.singletonMap(""doesn't matter"", Collections.singletonMap(""abc"", ""cdeﾃ､ﾂｸﾂｭﾃｦﾂ鳴�"")), request, response);
        String contentAsString = response.getContentAsString();
        Assert.assertTrue(contentAsString.startsWith(""{\""abc\"":\""cdeﾃ､ﾂｸﾂｭﾃｦﾂ鳴�\""}""));

    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.isInjectComponent,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.isInjectComponent,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test1"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()
        ).andExpect(content().string(""{\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表""}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test1"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()
        ).andExpect(content().string(""{\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表""}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test2"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()
        ).andExpect(content().string(""{\""description\"":\""fastjsonviewﾃｦﾂｳﾂｨﾃｨﾂｧﾂ｣ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""stock\"":\""haha\""}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test2"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()
        ).andExpect(content().string(""{\""description\"":\""fastjsonviewﾃｦﾂｳﾂｨﾃｨﾂｧﾂ｣ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""stock\"":\""haha\""}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test3"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""rootDepartment\"":{\""description\"":\""ﾃｩﾂδｨﾃｩﾂ猟ｨ1ﾃｦﾂ渉湘ｨﾂｿﾂｰ\""}}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test3"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""rootDepartment\"":{\""description\"":\""ﾃｩﾂδｨﾃｩﾂ猟ｨ1ﾃｦﾂ渉湘ｨﾂｿﾂｰ\""}}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test4"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""rootDepartment\"":{\""children\"":[],\""id\"":1,\""members\"":[],\""name\"":\""ﾃｩﾂδｨﾃｩﾂ猟ｨ1\""}}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test4"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""rootDepartment\"":{\""children\"":[],\""id\"":1,\""members\"":[],\""name\"":\""ﾃｩﾂδｨﾃｩﾂ猟ｨ1\""}}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test5"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""description\"":\""fastjsonviewﾃｦﾂｳﾂｨﾃｨﾂｧﾂ｣ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""rootDepartment\"":{\""children\"":[],\""id\"":1,\""members\"":[],\""name\"":\""ﾃｩﾂδｨﾃｩﾂ猟ｨ1\""},\""stock\"":\""haha\""}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test5"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""description\"":\""fastjsonviewﾃｦﾂｳﾂｨﾃｨﾂｧﾂ｣ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表"",\""rootDepartment\"":{\""children\"":[],\""id\"":1,\""members\"":[],\""name\"":\""ﾃｩﾂδｨﾃｩﾂ猟ｨ1\""},\""stock\"":\""haha\""}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test6,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test6() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test6"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonViewTest.test6,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test6() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test6"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100}""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.isInjectComponent,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.isInjectComponent,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test1_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\"",\""id\"":123})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test1_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\"",\""id\"":123})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test2_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test2_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse()
                .getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse()
                .getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test3_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test3_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test4_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test4_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test5_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5_2() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test5?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""packet\\\"":{\\\""smsType\\\"":\\\""USER_LOGIN\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case2Test.test5_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5_2() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test5?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""packet\\\"":{\\\""smsType\\\"":\\\""USER_LOGIN\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.isInjectComponent,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.isInjectComponent,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test1_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\"",\""id\"":123})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test1_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\"",\""id\"":123})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test2_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test2_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse()
                .getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse()
                .getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test3_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test3_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test4_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test4_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test5_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5_2() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test5?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""packet\\\"":{\\\""smsType\\\"":\\\""USER_LOGIN\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case1Test.test5_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5_2() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test5?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""packet\\\"":{\\\""smsType\\\"":\\\""USER_LOGIN\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(
                        json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON)))
                // .andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(
                        json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON)))
                // .andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                // .andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                // .andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3""))
                .andReturn().getResponse().getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3""))
                .andReturn().getResponse().getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test6,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test6() throws Exception {

        mockMvc.perform(
                (post(""/fastjson/test6"").characterEncoding(""UTF-8"")
                        .param(""userId"", ""1234"")
                        .param(""flag"", ""0"")
                        .contentType(MediaType.APPLICATION_FORM_URLENCODED)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterTest.test6,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test6() throws Exception {

        mockMvc.perform(
                (post(""/fastjson/test6"").characterEncoding(""UTF-8"")
                        .param(""userId"", ""1234"")
                        .param(""flag"", ""0"")
                        .contentType(MediaType.APPLICATION_FORM_URLENCODED)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterCase2Test.isInjectComponent,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(JSONPResponseBodyAdvice.class);
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterCase2Test.isInjectComponent,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(JSONPResponseBodyAdvice.class);
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterCase2Test.test8,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test8() throws Exception {
        mockMvc.perform(
                (post(""/jsonp-fastjsonview/test8"").characterEncoding(""UTF-8"")
                        .contentType(FastJsonHttpMessageConverter.APPLICATION_JAVASCRIPT))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterCase2Test.test8,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test8() throws Exception {
        mockMvc.perform(
                (post(""/jsonp-fastjsonview/test8"").characterEncoding(""UTF-8"")
                        .contentType(FastJsonHttpMessageConverter.APPLICATION_JAVASCRIPT))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterCase2Test.test8_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test8_2() throws Exception {
//        ResultActions actions = mockMvc.perform((post(""/jsonp-fastjsonview/test8?callback=fnUpdateSome"").characterEncoding(
//                ""UTF-8"")));
//        actions.andDo(print());
//        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
//                .andExpect(content().string(""fnUpdateSome({\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表""})""));

        MvcResult mvcResult = mockMvc.perform(post(""/jsonp-fastjsonview/test8?callback=fnUpdateSome"").characterEncoding(""UTF-8""))
                .andExpect(request().asyncStarted())
                .andReturn();


        mockMvc.perform(asyncDispatch(mvcResult))
                .andExpect(status().isOk())
                .andExpect(content().contentType(FastJsonHttpMessageConverter.APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterCase2Test.test8_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test8_2() throws Exception {
//        ResultActions actions = mockMvc.perform((post(""/jsonp-fastjsonview/test8?callback=fnUpdateSome"").characterEncoding(
//                ""UTF-8"")));
//        actions.andDo(print());
//        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
//                .andExpect(content().string(""fnUpdateSome({\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表""})""));

        MvcResult mvcResult = mockMvc.perform(post(""/jsonp-fastjsonview/test8?callback=fnUpdateSome"").characterEncoding(""UTF-8""))
                .andExpect(request().asyncStarted())
                .andReturn();


        mockMvc.perform(asyncDispatch(mvcResult))
                .andExpect(status().isOk())
                .andExpect(content().contentType(FastJsonHttpMessageConverter.APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.checkDefaultJSONPQueryParamNames,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void checkDefaultJSONPQueryParamNames() {
        String[] expected = { ""callback"", ""jsonp"" };
        Assert.assertArrayEquals(expected, FastJsonpResponseBodyAdvice.DEFAULT_JSONP_QUERY_PARAM_NAMES);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.checkDefaultJSONPQueryParamNames,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void checkDefaultJSONPQueryParamNames() {
        String[] expected = { ""callback"", ""jsonp"" };
        Assert.assertArrayEquals(expected, FastJsonpResponseBodyAdvice.DEFAULT_JSONP_QUERY_PARAM_NAMES);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.isInjectComponent,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.isInjectComponent,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test1_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\"",\""id\"":123})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test1_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\"",\""id\"":123})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test2_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test2_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse()
                .getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse()
                .getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test3_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test3_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test4_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test4_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test5_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5_2() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test5?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""packet\\\"":{\\\""smsType\\\"":\\\""USER_LOGIN\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonpHttpMessageConverter4Case3Test.test5_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5_2() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test5?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""packet\\\"":{\\\""smsType\\\"":\\\""USER_LOGIN\\\""}}\"")""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)
                ))
//		.andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)
                ))
//		.andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr).contentType(MediaType.APPLICATION_JSON)
                ))
//		.andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr).contentType(MediaType.APPLICATION_JSON)
                ))
//		.andExpect(status().isOk())
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test3,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse().getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test3,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3"")).andReturn().getResponse().getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test4,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test4,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ﾃ･ﾂ督暗･ﾂ督暗･ﾂ督�\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test5,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverter4Test.test5,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterJSONPCaseTest.isInjectComponent,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(JSONPResponseBodyAdvice.class);
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterJSONPCaseTest.isInjectComponent,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void isInjectComponent() {
        wac.getBean(JSONPResponseBodyAdvice.class);
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterJSONPCaseTest.test1,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1() throws Exception {
        mockMvc.perform(
                (post(""/jsonp-fastjsonview/test1"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterJSONPCaseTest.test1,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1() throws Exception {
        mockMvc.perform(
                (post(""/jsonp-fastjsonview/test1"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_8,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterJSONPCaseTest.test1_2,0,"""public void test_8() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""\""2011-01-09T13:49:53.254\"""");
        parser.config(Feature.AllowISO8601DateFormat, true);
        Object value = parser.parse();
        Assert.assertEquals(new Date(1294552193254L), value);
    }""","""@Test
    public void test1_2() throws Exception {


        ResultActions actions = mockMvc.perform((post(""/jsonp-fastjsonview/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表""})""));
    }"""
alibaba/fastjson,5c6d6fd471ea1fab59f0df2dd31e0b936806780d,,com.alibaba.json.bvt.parser.DefaultExtJSONParser_parseArray.test_7,com.alibaba.json.bvt.support.spring.mock.testcase.FastJsonHttpMessageConverterJSONPCaseTest.test1_2,0,"""public void test_7() throws Exception {
        DefaultJSONParser parser = new DefaultJSONParser(""[\""2011-01-09T13:49:53.254\"", \""xxx\"", true, false, null, {}]"");
        parser.config(Feature.AllowISO8601DateFormat, true);
        ArrayList list = new ArrayList();
        parser.parseArray(list);
        Assert.assertEquals(new Date(1294552193254L), list.get(0));
        Assert.assertEquals(""xxx"", list.get(1));
        Assert.assertEquals(Boolean.TRUE, list.get(2));
        Assert.assertEquals(Boolean.FALSE, list.get(3));
        Assert.assertEquals(null, list.get(4));
        Assert.assertEquals(new JSONObject(), list.get(5));
    }""","""@Test
    public void test1_2() throws Exception {


        ResultActions actions = mockMvc.perform((post(""/jsonp-fastjsonview/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""id\"":100,\""name\"":\""ﾃｦﾂｵﾂ凝ｨﾂｯﾂ表""})""));
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testUpdateWhenNoActiveReservations,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testUpdateWhenNoActiveReservations() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String newName = ""newName"";
        int newMaxInstance = 7;
        String newResourcePoolLink = resourcePool.documentSelfLink;
        int newPriority = 23;
        long newMemoryLimit = MIN_MEMORY;
        long newStorageLimit = 5789L;
        int newCpuShares = 45;
        List<String> newTenantLinks = Arrays.asList(BUSINESS_GROUP);

        placementState.name = newName;
        placementState.maxNumberInstances = newMaxInstance;
        placementState.priority = newPriority;
        placementState.resourcePoolLink = newResourcePoolLink;
        placementState.memoryLimit = newMemoryLimit;
        placementState.storageLimit = newStorageLimit;
        placementState.cpuShares = newCpuShares;
        placementState.tenantLinks = newTenantLinks;

        doOperation(placementState, UriUtils.buildUri(host, placementState.documentSelfLink),
                false, Action.PUT);

        placementState = getDocument(GroupResourcePlacementState.class,
                placementState.documentSelfLink);

        assertEquals(newName, placementState.name);
        assertEquals(newMaxInstance, placementState.maxNumberInstances);
        assertEquals(newPriority, placementState.priority);
        assertEquals(newResourcePoolLink, placementState.resourcePoolLink);
        assertEquals(newMemoryLimit, placementState.memoryLimit);
        assertEquals(newStorageLimit, placementState.storageLimit);
        assertEquals(newCpuShares, placementState.cpuShares);
        assertEquals(newTenantLinks, placementState.tenantLinks);

        doDelete(UriUtils.buildUri(host, placementState.documentSelfLink), false);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testGroupPlacementValidation,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGroupPlacementValidation() throws Throwable {
        createAndStoreGroupResourcePlacement(""negative-memory-limit"", -1L, 0L, 0, 0,
                resourcePool.documentSelfLink, true /* expectFailure */);

        createAndStoreGroupResourcePlacement(""negative-cpu-shares"", 0L, 0L, 0, -1,
                resourcePool.documentSelfLink, true /* expectFailure */);

        createAndStoreGroupResourcePlacement(""negative-priority-shares"", 0L, 0L, -1, 0,
                resourcePool.documentSelfLink, true /* expectFailure */);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testDeleteWhenNoActiveReservation,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testDeleteWhenNoActiveReservation() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        try {
            DeploymentProfileConfig.getInstance().setTest(false);
            doDelete(UriUtils.buildUri(host, placementState.documentSelfLink), false);
        } finally {
            DeploymentProfileConfig.getInstance().setTest(true);
        }

        ServiceDocumentQuery<GroupResourcePlacementState> query = new ServiceDocumentQuery<>(host,
                GroupResourcePlacementState.class);
        AtomicBoolean deleted = new AtomicBoolean();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        query.queryDocument(placementState.documentSelfLink, (r) -> {
            if (!r.hasException() && !r.hasResult()) {
                deleted.set(true);
                countDownLatch.countDown();
            }
        });
        countDownLatch.await();
        assertTrue(deleted.get());
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testGetGroupResourcePlacementState,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGetGroupResourcePlacementState() throws Throwable {
        GroupResourcePlacementState placementState = new GroupResourcePlacementState();
        placementState.name = ""reservation-test"";
        placementState.tenantLinks = Collections.singletonList(""testGroup"");
        placementState.maxNumberInstances = 10;
        placementState.resourcePoolLink = resourcePool.documentSelfLink;

        GroupResourcePlacementState outPlacementState = doPost(placementState,
                GroupResourcePlacementService.FACTORY_LINK);

        GroupResourcePlacementState[] result = new GroupResourcePlacementState[] { null };
        Operation getGroupPlacement = Operation.createGet(
                UriUtils.buildUri(host, outPlacementState.documentSelfLink))
                .setCompletion(
                        (o, e) -> {
                            if (e != null) {
                                host.log(""Can't get reservation state."", Utils.toString(e));
                                host.failIteration(e);
                                return;
                            } else {
                                GroupResourcePlacementState rsrvState = o
                                        .getBody(GroupResourcePlacementState.class);
                                result[0] = rsrvState;
                                host.completeIteration();
                            }
                        });

        host.testStart(1);
        host.send(getGroupPlacement);
        host.testWait();

        GroupResourcePlacementState rsrsPlacementState = result[0];
        assertNotNull(rsrsPlacementState);
        assertEquals(placementState.name, rsrsPlacementState.name);
        assertEquals(placementState.tenantLinks, rsrsPlacementState.tenantLinks);
        assertEquals(placementState.resourcePoolLink,
                rsrsPlacementState.resourcePoolLink);
        assertEquals(placementState.maxNumberInstances, rsrsPlacementState.maxNumberInstances);
        assertEquals(placementState.maxNumberInstances, rsrsPlacementState.availableInstancesCount);
        assertEquals(placementState.allocatedInstancesCount, 0);

        Operation getGroupPlacementExpandedResourcePool = Operation.createGet(
                GroupResourcePlacementPoolState.buildUri(UriUtils.buildUri(host,
                        outPlacementState.documentSelfLink)))
                .setCompletion(
                        (o, e) -> {
                            if (e != null) {
                                host.log(""Can't get reservation state."", Utils.toString(e));
                                host.failIteration(e);
                                return;
                            } else {
                                GroupResourcePlacementPoolState outState = o
                                        .getBody(GroupResourcePlacementPoolState.class);
                                result[0] = outState;
                                host.completeIteration();
                            }
                        });

        host.testStart(1);
        host.send(getGroupPlacementExpandedResourcePool);
        host.testWait();

        GroupResourcePlacementPoolState poolState = (GroupResourcePlacementPoolState) result[0];
        assertNotNull(poolState);
        assertEquals(outPlacementState.name, poolState.name);
        assertEquals(outPlacementState.tenantLinks, poolState.tenantLinks);
        assertEquals(resourcePool.documentSelfLink, poolState.resourcePoolLink);
        assertEquals(outPlacementState.maxNumberInstances, poolState.maxNumberInstances);
        assertEquals(outPlacementState.availableInstancesCount, poolState.availableInstancesCount);
        assertEquals(outPlacementState.allocatedInstancesCount, poolState.allocatedInstancesCount);
        assertNotNull(poolState.resourcePool);
        assertEquals(resourcePool.id, poolState.resourcePool.id);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testGroupResourcePlacementService,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGroupResourcePlacementService() throws Throwable {
        verifyService(
                FactoryService.create(GroupResourcePlacementService.class),
                GroupResourcePlacementState.class,
                (prefix, index) -> {
                    GroupResourcePlacementState reservationState =
                            new GroupResourcePlacementState();
                    reservationState.name = prefix + ""reservation-test"";
                    reservationState.tenantLinks = Collections.singletonList(""testGroup"");
                    reservationState.resourcePoolLink = resourcePool.documentSelfLink;
                    reservationState.maxNumberInstances = 10;
                    reservationState.customProperties = new HashMap<>();

                    return reservationState;
                },
                (prefix, serviceDocument) -> {
                    GroupResourcePlacementState reservationState =
                            (GroupResourcePlacementState) serviceDocument;
                    assertTrue(reservationState.name.startsWith(prefix + ""reservation-test""));
                    assertEquals(Collections.singletonList(""testGroup""),
                            reservationState.tenantLinks);
                    assertEquals(resourcePool.documentSelfLink, reservationState.resourcePoolLink);
                    assertEquals(10, reservationState.maxNumberInstances);
                    assertEquals(10, reservationState.availableInstancesCount);
                    assertEquals(0, reservationState.allocatedInstancesCount);
                });
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testGroupResourcePlacementServiceTenantAndGroup,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGroupResourcePlacementServiceTenantAndGroup() throws Throwable {
        verifyService(
                FactoryService.create(GroupResourcePlacementService.class),
                GroupResourcePlacementState.class,
                (prefix, index) -> {
                    List<String> tenantAndGroup = new LinkedList<String>();
                    tenantAndGroup.add(TENANT);
                    tenantAndGroup.add(BUSINESS_GROUP);
                    GroupResourcePlacementState reservationState =
                            new GroupResourcePlacementState();
                    reservationState.name = prefix + ""reservation-test"";
                    reservationState.tenantLinks = tenantAndGroup;
                    reservationState.resourcePoolLink = resourcePool.documentSelfLink;
                    reservationState.maxNumberInstances = 10;
                    reservationState.customProperties = new HashMap<>();

                    return reservationState;
                },
                (prefix, serviceDocument) -> {
                    GroupResourcePlacementState reservationState =
                            (GroupResourcePlacementState) serviceDocument;
                    assertEquals(TENANT, reservationState.tenantLinks.get(0));
                    assertEquals(BUSINESS_GROUP, reservationState.tenantLinks.get(1));
                });
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testProvisioningWithUnlimitedPlacement,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testProvisioningWithUnlimitedPlacement() throws Throwable {
        GroupResourcePlacementState unlimitedInstancesPlacement = createPlacement(
                ""placement-unlimited-test"",
                8 * CONTAINER_MEMORY + CONTAINER_MEMORY / 2,
                0L, 0, 0, resourcePool.documentSelfLink, 0);
        assertEquals(0, unlimitedInstancesPlacement.maxNumberInstances);
        assertEquals(0, unlimitedInstancesPlacement.availableInstancesCount);
        assertEquals(0, unlimitedInstancesPlacement.allocatedInstancesCount);

        GroupResourcePlacementState savedPlacement = savePlacement(unlimitedInstancesPlacement,
                false);
        assertEquals(0, savedPlacement.maxNumberInstances);
        assertEquals(0, savedPlacement.availableInstancesCount);
        assertEquals(0, savedPlacement.allocatedInstancesCount);

        GroupResourcePlacementState placementStateAfterProvisioning =
                makeResourcePlacementReservationRequest(
                        savedPlacement, 1);
        assertEquals(0, placementStateAfterProvisioning.maxNumberInstances);
        assertEquals(0, placementStateAfterProvisioning.availableInstancesCount);
        assertEquals(1, placementStateAfterProvisioning.allocatedInstancesCount);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testResourcePlacementReservationRequest,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testResourcePlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;
        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(2, placementState.availableInstancesCount);
        assertEquals(count, placementState.allocatedInstancesCount);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // releasing placements within max but more than reserved per desc:
        descLink = createAndStoreContainerDescription(""new-desc"").documentSelfLink;
        count = 4;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        doDelete(UriUtils.buildUri(host, descLink), false);

        // release what's left of the provisioned resources
        releasePlacement(placementState, descLink, count);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testDeleteWhenActiveReservation,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testDeleteWhenActiveReservation() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        placementState = makeResourcePlacementReservationRequest(placementState, 5);

        boolean expectedFailure = true;
        try {
            DeploymentProfileConfig.getInstance().setTest(false);
            doDelete(UriUtils.buildUri(host, placementState.documentSelfLink), expectedFailure);
            fail(""expect validation error during deletion"");
        } catch (LocalizableValidationException e) {
            // expected
        } finally {
            DeploymentProfileConfig.getInstance().setTest(true);
        }
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testDeleteWhenWrongReservationCount,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testDeleteWhenWrongReservationCount() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();

        createContainer(placementState.documentSelfLink);

        boolean expectedFailure = true;
        try {
            DeploymentProfileConfig.getInstance().setTest(false);
            doDelete(UriUtils.buildUri(host, placementState.documentSelfLink), expectedFailure);
            fail(""expect validation error during deletion"");
        } catch (LocalizableValidationException e) {
            // expected
        } finally {
            DeploymentProfileConfig.getInstance().setTest(true);
        }
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testUpdateWhenActiveReservations,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testUpdateWhenActiveReservations() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();

        int count = (int) placementState.maxNumberInstances
                - (int) placementState.maxNumberInstances / 2;
        placementState = makeResourcePlacementReservationRequest(placementState, count);

        String newName = ""newName"";
        int newPriority = 23;
        // make sure the new maxInstances is more the currently reserved instances
        int newMaxInstance = count + 1;

        placementState.name = newName;
        placementState.priority = newPriority;
        placementState.maxNumberInstances = newMaxInstance;

        boolean expectedFailure = false;
        doOperation(placementState, UriUtils.buildUri(host, placementState.documentSelfLink),
                expectedFailure, Action.PUT);

        placementState = getDocument(GroupResourcePlacementState.class,
                placementState.documentSelfLink);

        assertEquals(newName, placementState.name);
        assertEquals(newMaxInstance, placementState.maxNumberInstances);
        assertEquals(newPriority, placementState.priority);

        expectedFailure = true;
        // failure when the current maxInstance count less than the currently reserved instances
        newMaxInstance = count - 1;
        placementState.maxNumberInstances = newMaxInstance;
        try {
            doOperation(placementState, UriUtils.buildUri(host, placementState.documentSelfLink),
                    expectedFailure, Action.PUT);
            fail(""expect maxNumberInstances validation error"");
        } catch (LocalizableValidationException e) {
            // expected
        }

        placementState = getDocument(GroupResourcePlacementState.class,
                placementState.documentSelfLink);
        placementState.resourcePoolLink = createResourcePool(""new"", 0L, 0L).documentSelfLink;
        try {
            doOperation(placementState, UriUtils.buildUri(host, placementState.documentSelfLink),
                    expectedFailure, Action.PUT);
            fail(""expect resourcePoolLink can't be changed validation error"");
        } catch (LocalizableValidationException e) {
            // expected
        } finally {
            doDelete(UriUtils.buildUri(host, placementState.resourcePoolLink), false);
        }

        placementState = getDocument(GroupResourcePlacementState.class,
                placementState.documentSelfLink);
        placementState.storageLimit = 567L;
        try {
            doOperation(placementState, UriUtils.buildUri(host, placementState.documentSelfLink),
                    expectedFailure, Action.PUT);
            fail(""expect storageLimit can't be changed validation error"");
        } catch (LocalizableValidationException e) {
            // expect resourcePoolLink validation error
        }

        placementState = getDocument(GroupResourcePlacementState.class,
                placementState.documentSelfLink);
        placementState.cpuShares = 34;
        try {
            doOperation(placementState, UriUtils.buildUri(host, placementState.documentSelfLink),
                    expectedFailure, Action.PUT);
            fail(""expect cpuShares can't be changed validation error"");
        } catch (LocalizableValidationException e) {
            // expect resourcePoolLink validation error
        }

        releasePlacement(placementState, containerDescription.documentSelfLink, count);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testGroupPlacementResourcePoolValidation,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGroupPlacementResourcePoolValidation() throws Throwable {
        Set<String> linksToDelete = new HashSet<>();

        ResourcePoolState resourcePool1 =
                createResourcePool(""resourcePool1"", MIN_MEMORY * 2 + 1, 1000L);
        linksToDelete.add(resourcePool1.documentSelfLink);

        // Try to create a placement with more resources than the resource pool
        boolean expectFailure = true;
        // moreMemoryThanRP
        createAndStoreGroupResourcePlacement(""moreMemoryThanRP"", MIN_MEMORY * 2 + 2, 1000L, 0, 0,
                resourcePool1.documentSelfLink, expectFailure);

        // Create some placements to fill up the resource pool
        expectFailure = false;
        GroupResourcePlacementState firstPlacement = createAndStoreGroupResourcePlacement(
                ""firstPlacement"",
                MIN_MEMORY, 200L, 0, 0, resourcePool1.documentSelfLink, expectFailure);
        linksToDelete.add(firstPlacement.documentSelfLink);

        expectFailure = false;
        GroupResourcePlacementState secondPlacement = createAndStoreGroupResourcePlacement(
                ""secondPlacement"",
                MIN_MEMORY, 200L, 0, 0, resourcePool1.documentSelfLink, expectFailure);
        linksToDelete.add(secondPlacement.documentSelfLink);

        // The remaining resources in the RP shouldn't be enough for these
        expectFailure = true;
        // moreMemoryThanWhatsLeft
        createAndStoreGroupResourcePlacement(""moreMemoryThanWhatsLeft"",
                MIN_MEMORY, 200L, 0, 0, resourcePool1.documentSelfLink, expectFailure);

        linksToDelete.forEach(link -> {
            try {
                doDelete(UriUtils.buildUri(host, link), false);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
            }
        });
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementPatchRequest,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testMemoryPlacementPatchRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // Set the memory limit to something smaller than what's already reserved
        placementState.memoryLimit = 700;
        expectFailure = true;

        host.testStart(1);
        host.send(Operation
                .createPut(UriUtils.buildUri(host, placementState.documentSelfLink))
                .setBody(placementState)
                .setCompletion(expectFailure ? host.getExpectedFailureCompletion()
                        : host.getCompletion()));
        host.testWait(""Asd"", (int) TimeUnit.MINUTES.toSeconds(1));

        releasePlacement(placementState, descLink, count);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testGroupResourcePlacementQueryEmptyTenantLinks,1,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGroupResourcePlacementQueryEmptyTenantLinks() throws Throwable {

        GroupResourcePlacementState state = new GroupResourcePlacementState();
        state.name = ""reservation-test"";
        state.tenantLinks = Collections.singletonList(""testGroup"");
        state.maxNumberInstances = 10;
        state.resourcePoolLink = resourcePool.documentSelfLink;
        state.documentSelfLink = UUID.randomUUID().toString();

        doPost(state, GroupResourcePlacementService.FACTORY_LINK);

        // match on group property:
        QueryTask q = QueryUtil.buildQuery(GroupResourcePlacementState.class, false);

        /**
         * When new policy is created it sets Project id in tenantLinks. In ReservationTaskService
         * we search for available GroupResourcePlacementStates, passing a query clause for
         * tenantLinks which are retrieved from ReservationTaskService itself. In stand alone mode
         * they are equal to null - means only global (default) placements should be returned as
         * result of query. That's why if default placement is missing, the query doesn't find any
         * results. This proves that tenant clause should be added only if
         * ReservationTaskService.tenantLinks are not null.
         */
        Query tenantLinksQuery = QueryUtil.addTenantAndGroupClause(null);
        q.querySpec.query.addBooleanClause(tenantLinksQuery);

        // match on available number of instances:
        QueryTask.Query numOfInstancesClause = new QueryTask.Query();

        QueryTask.Query moreInstancesThanRequired = new QueryTask.Query()
                .setTermPropertyName(
                        GroupResourcePlacementState.FIELD_NAME_AVAILABLE_INSTANCES_COUNT)
                .setNumericRange(NumericRange.createLongRange(Long.valueOf(10),
                        Long.MAX_VALUE, true, false))
                .setTermMatchType(MatchType.TERM);

        QueryTask.Query unlimitedInstances = new QueryTask.Query()
                .setTermPropertyName(GroupResourcePlacementState.FIELD_NAME_MAX_NUMBER_INSTANCES)
                .setNumericRange(NumericRange.createEqualRange(0L))
                .setTermMatchType(MatchType.TERM);

        moreInstancesThanRequired.occurance = Occurance.SHOULD_OCCUR;
        numOfInstancesClause.addBooleanClause(moreInstancesThanRequired);
        unlimitedInstances.occurance = Occurance.SHOULD_OCCUR;
        numOfInstancesClause.addBooleanClause(unlimitedInstances);
        numOfInstancesClause.occurance = Occurance.MUST_OCCUR;

        q.querySpec.query.addBooleanClause(numOfInstancesClause);

        List<GroupResourcePlacementState> placements = new ArrayList<>();

        QueryUtil.addExpandOption(q);

        ServiceDocumentQuery<GroupResourcePlacementState> query = new ServiceDocumentQuery<>(
                host,
                GroupResourcePlacementState.class);

        host.testStart(1);
        query.query(
                q,
                (r) -> {
                    if (r.hasException()) {
                        host.log(""Exception while quering for placements:"",
                                Utils.toString(r.getException()));
                        host.failIteration(r.getException());
                    } else if (r.hasResult()) {
                        placements.add(r.getResult());
                    } else {
                        // Global placement (empty tenantLinks) should exists in list.
                        if (placements.isEmpty()) {
                            host.log(Level.SEVERE, ""No suitable host available"");
                            host.failIteration(
                                    new LocalizableValidationException(
                                            ""No suitable host available"",
                                            ""request.placement.compute.missing""));
                            ;
                        }
                        host.completeIteration();
                    }
                });
        host.testWait();

        assertEquals(placements.size(), 1);

        // Query retrieves only global placement, because of tenantLinks clause ( tenantLinks=null )
        assertTrue(!placements.get(0).documentSelfLink.equals(state.documentSelfLink));

    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testCoreAgentContainerCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testCoreAgentContainerCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(SystemContainerDescriptions.AGENT_CONTAINER_DESCRIPTION_LINK);
        ContainerDescription agentDesc = getDocument(ContainerDescription.class,
                SystemContainerDescriptions.AGENT_CONTAINER_DESCRIPTION_LINK);

        assertNotNull(agentDesc);

        assertEquals(SystemContainerDescriptions.AGENT_CONTAINER_NAME, agentDesc.name);
        String expectedImageName = String.format(""%s:%s"",
                SystemContainerDescriptions.AGENT_IMAGE_NAME,
                SystemContainerDescriptions.getAgentImageVersion());
        assertEquals(expectedImageName, agentDesc.image);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testCoreAgentContainerUpdatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testCoreAgentContainerUpdatedOnStartUp() throws Throwable {
        waitForServiceAvailability(SystemContainerDescriptions.AGENT_CONTAINER_DESCRIPTION_LINK);
        ContainerDescription agentDesc = getDocument(ContainerDescription.class,
                SystemContainerDescriptions.AGENT_CONTAINER_DESCRIPTION_LINK);

        assertNotNull(agentDesc);

        waitForInitialBootServiceToBeSelfStopped(ComputeInitialBootService.SELF_LINK);

        String newVersion = ""new version"";
        System.setProperty(SystemContainerDescriptions.AGENT_IMAGE_VERSION_PROPERTY_NAME,
                newVersion);

        //simulate a restart of the service host
        startInitialBootService(ComputeInitialBootService.class,
                ComputeInitialBootService.SELF_LINK);

        waitFor(() -> {
            ContainerDescription updatedDocument = getDocument(ContainerDescription.class,
                    SystemContainerDescriptions.AGENT_CONTAINER_DESCRIPTION_LINK);
            return updatedDocument.documentVersion > agentDesc.documentVersion;
        });

        ContainerDescription updatedAgentDesc = getDocument(ContainerDescription.class,
                SystemContainerDescriptions.AGENT_CONTAINER_DESCRIPTION_LINK);
        String expectedImageName = String.format(""%s:%s"",
                SystemContainerDescriptions.AGENT_IMAGE_NAME,
                newVersion);
        assertEquals(expectedImageName, updatedAgentDesc.image);

        assertFalse(updatedAgentDesc.image.equals(agentDesc.image));
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testContainerHostDataCollectionServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testContainerHostDataCollectionServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(ContainerHostDataCollectionService
                .HOST_INFO_DATA_COLLECTION_LINK);
        ContainerHostDataCollectionState dataCollectionState = getDocument(
                ContainerHostDataCollectionState.class,
                ContainerHostDataCollectionService.HOST_INFO_DATA_COLLECTION_LINK);

        assertNotNull(dataCollectionState);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testKubernetesEntityListDataCollectionServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testKubernetesEntityListDataCollectionServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(KubernetesEntityDataCollection
                .DEFAULT_KUBERNETES_ENTITY_DATA_COLLECTION_LINK);
        KubernetesEntityDataCollectionState dataCollectionState = getDocument(
                KubernetesEntityDataCollectionState.class,
                KubernetesEntityDataCollection.DEFAULT_KUBERNETES_ENTITY_DATA_COLLECTION_LINK);

        assertNotNull(dataCollectionState);
        assertEquals(TaskStage.STARTED, dataCollectionState.taskInfo.stage);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testHostContainerListDataCollectionServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testHostContainerListDataCollectionServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(HostContainerListDataCollection
                .DEFAULT_HOST_CONTAINER_LIST_DATA_COLLECTION_LINK);
        HostContainerListDataCollectionState dataCollectionState = getDocument(
                HostContainerListDataCollectionState.class,
                HostContainerListDataCollection.DEFAULT_HOST_CONTAINER_LIST_DATA_COLLECTION_LINK);

        assertNotNull(dataCollectionState);
        assertEquals(TaskStage.STARTED, dataCollectionState.taskInfo.stage);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testHostNetworkListDataCollectionServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testHostNetworkListDataCollectionServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(HostNetworkListDataCollection
                .DEFAULT_HOST_NETWORK_LIST_DATA_COLLECTION_LINK);
        HostNetworkListDataCollectionState dataCollectionState = getDocument(
                HostNetworkListDataCollectionState.class,
                HostNetworkListDataCollection.DEFAULT_HOST_NETWORK_LIST_DATA_COLLECTION_LINK);

        assertNotNull(dataCollectionState);
        assertEquals(TaskStage.STARTED, dataCollectionState.taskInfo.stage);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testHostVolumeListDataCollectionServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testHostVolumeListDataCollectionServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(HostVolumeListDataCollection
                .DEFAULT_HOST_VOLUME_LIST_DATA_COLLECTION_LINK);
        HostVolumeListDataCollectionState dataCollectionState = getDocument(
                HostVolumeListDataCollectionState.class,
                HostVolumeListDataCollection.DEFAULT_HOST_VOLUME_LIST_DATA_COLLECTION_LINK);

        assertNotNull(dataCollectionState);
        assertEquals(TaskStage.STARTED, dataCollectionState.taskInfo.stage);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testDefaultGroupPlacementServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testDefaultGroupPlacementServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(GroupResourcePlacementService.DEFAULT_RESOURCE_PLACEMENT_LINK);
        GroupResourcePlacementState groupResourcePlacementState = getDocument(
                GroupResourcePlacementState.class,
                GroupResourcePlacementService.DEFAULT_RESOURCE_PLACEMENT_LINK);

        assertNotNull(groupResourcePlacementState);
        assertEquals(GroupResourcePlacementService.DEFAULT_RESOURCE_PLACEMENT_ID,
                groupResourcePlacementState.name);
        assertEquals(GroupResourcePlacementService.DEFAULT_RESOURCE_POOL_LINK,
                groupResourcePlacementState.resourcePoolLink);
        assertEquals(1000000, groupResourcePlacementState.maxNumberInstances);
        assertEquals(100, groupResourcePlacementState.priority);
        assertNull(groupResourcePlacementState.tenantLinks);// assert global default group placement
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testDefaultResourcePoolServiceCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testDefaultResourcePoolServiceCreatedOnStartUp() throws Throwable {
        waitForServiceAvailability(GroupResourcePlacementService.DEFAULT_RESOURCE_POOL_LINK);
        ResourcePoolState resourcePoolState = getDocument(ResourcePoolState.class,
                GroupResourcePlacementService.DEFAULT_RESOURCE_POOL_LINK);

        assertNotNull(resourcePoolState);
        assertEquals(GroupResourcePlacementService.DEFAULT_RESOURCE_POOL_ID,
                resourcePoolState.name);
        assertEquals(GroupResourcePlacementService.DEFAULT_RESOURCE_POOL_ID, resourcePoolState.id);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.host.ComputeInitialBootServiceTest.testDefaultFavoriteImagesCreatedOnStartUp,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testDefaultFavoriteImagesCreatedOnStartUp() throws Throwable {
        List<FavoriteImage> defaultImages = FavoriteImagesService.buildDefaultFavoriteImages(host);
        List<FavoriteImage> favoriteImages = getDocumentsOfType(FavoriteImage.class);

        assertEquals(defaultImages.size(), favoriteImages.size());

        favoriteImages.forEach(i -> {
            assertTrue(defaultImages.contains(i));
        });

        FavoriteImagePopulateFlag shouldPopulateFlag = getDocument(FavoriteImagePopulateFlag.class,
                FavoriteImagePopulateFlagService.FAVORITE_IMAGE_POPULATE_FLAG_LINK);

        assertFalse(shouldPopulateFlag.shouldPopulate);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.image.service.ContainerImageServiceTest.testSearchInBaseRegistry,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testSearchInBaseRegistry() throws Throwable {
        createBaseRegistryState();
        List<Result> results = searchForImages(host.getUri().toString() + QUERY_IN_THE_BASE);
        verifyResults(results, 5, 3, true);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.image.service.ContainerImageServiceTest.testSearchInRegistryWithNamespace,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testSearchInRegistryWithNamespace() throws Throwable {
        createRegistryWithNamespaceState();
        List<Result> results = searchForImages(host.getUri().toString() + QUERY_IN_THE_NAMESPACE);
        verifyResults(results, 0, 3, false);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.image.service.ContainerImageServiceTest.testSearchInRegistryWithNamespaceShouldFail,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test(expected = LocalizableValidationException.class)
    public void testSearchInRegistryWithNamespaceShouldFail() throws Throwable {
        createRegistryWithNamespaceState();
        searchForImages(host.getUri().toString() + QUERY_IN_NOT_EXISTING_NAMESPACE);
    }"""
vmware/admiral,e4b02936cc7d4ff2714e7231db0c4373ba5d48a2,compute,com.vmware.admiral.compute.container.GroupResourcePlacementServiceTest.testMemoryPlacementReservationRequest,com.vmware.admiral.image.service.PopularImagesServiceTest.testGetDefaultPopularImages,0,"""@Test
    public void testMemoryPlacementReservationRequest() throws Throwable {
        GroupResourcePlacementState placementState = createAndStoreGroupResourcePlacement();
        String descLink = containerDescription.documentSelfLink;
        int count = 8;

        boolean expectFailure = false;

        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(CONTAINER_MEMORY / 2, placementState.availableMemory);

        // release resource placements:
        count = -5;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);
        assertEquals(7, placementState.availableInstancesCount);
        assertEquals(3, placementState.allocatedInstancesCount);

        // try to release resource placements more than max (success with log warning):
        count = (int) -(placementState.maxNumberInstances - placementState.availableInstancesCount
                + 1);
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // use the max number of resources. they should require more memory than the placement
        // provides
        count = 7;
        expectFailure = true;
        placementState = makeResourcePlacementReservationRequest(count, descLink, placementState,
                expectFailure);

        // create groupResourcePlacement without memory limit
        GroupResourcePlacementState noLimitsGroupResourcePlacement =
                createAndStoreGroupResourcePlacement(
                        ""test"", 0L, 0L, 0, 0, resourcePool.documentSelfLink, false);
        expectFailure = false;
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1, descLink,
                noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(9, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(1, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        ContainerDescriptionService.ContainerDescription noLimitsContainerDescription =
                createAndStoreContainerDescription(
                        ""no-limits"", 0L);
        noLimitsGroupResourcePlacement = makeResourcePlacementReservationRequest(1,
                noLimitsContainerDescription.documentSelfLink, noLimitsGroupResourcePlacement,
                expectFailure);
        assertEquals(0, noLimitsGroupResourcePlacement.availableMemory);
        assertEquals(0, noLimitsGroupResourcePlacement.memoryLimit);
        assertEquals(8, noLimitsGroupResourcePlacement.availableInstancesCount);
        assertEquals(2, noLimitsGroupResourcePlacement.allocatedInstancesCount);

        // release what's left of the requested resources
        releasePlacement(placementState, descLink, count);
        releasePlacement(noLimitsGroupResourcePlacement, descLink, 1);
        releasePlacement(noLimitsGroupResourcePlacement,
                noLimitsContainerDescription.documentSelfLink, 1);

        doDelete(UriUtils.buildUri(host, descLink), false);
        doDelete(UriUtils.buildUri(host, noLimitsContainerDescription.documentSelfLink), false);
    }""","""@Test
    public void testGetDefaultPopularImages() throws Throwable {

        // without the 'container.user.resources.path' configuration attribute set
        // the default popular images will be returned

        HostInitImageServicesConfig.startServices(host);
        waitForServiceAvailability(PopularImagesService.SELF_LINK);

        Collection<?> images = getDocument(Collection.class, PopularImagesService.SELF_LINK);
        assertNotNull(images);
        assertEquals(15, images.size());
    }"""
doanduyhai/Achilles,e3099bdce342910951c4862c78751fd81ed4552e,integration-test-2_1,info.archinnov.achilles.it.TestCRUDSimpleEntity.should_insert_with_insert_strategy_non_null_fields,info.archinnov.achilles.it.bugs.ClassLevelTracing.should_activate_tracing_programmatically,1,"""@Test
    public void should_insert_with_insert_strategy_non_null_fields() throws Exception {
        //Given
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        final Date date = buildDateKey();
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_single_row.cql"", ImmutableMap.of(""id"", id, ""table"", ""simple""));
        final SimpleEntity entity = new SimpleEntity(id, date, null);

        //When
        manager
                .crud()
                .insert(entity)
                .withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS)
                .execute();

        //Then
        final Row row = session.execute(""SELECT value FROM simple WHERE id = "" + id).one();
        assertThat(row).isNotNull();
        assertThat(row.getString(""value"")).isEqualTo(""0 AM"");
    }""","""@Test
    public void should_activate_tracing_programmatically() throws Exception {
        //Given
        Long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);

        CassandraLogAsserter logAsserter = new CassandraLogAsserter();
        logAsserter.prepareLogLevel(SimpleEntity.class.getCanonicalName());

        //When
        manager
                .crud()
                .insert(new SimpleEntity(id, new Date(), ""value""))
                .withTracing()
                .execute();


        //Then
        logAsserter.assertContains(""Tracing for Query ID"");
    }"""
doanduyhai/Achilles,e3099bdce342910951c4862c78751fd81ed4552e,integration-test-2_1,info.archinnov.achilles.it.TestCRUDSimpleEntity.should_insert_with_insert_strategy_non_null_fields,info.archinnov.achilles.it.TestTypedQueries.should_limit_displayed_returned_results,1,"""@Test
    public void should_insert_with_insert_strategy_non_null_fields() throws Exception {
        //Given
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        final Date date = buildDateKey();
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_single_row.cql"", ImmutableMap.of(""id"", id, ""table"", ""simple""));
        final SimpleEntity entity = new SimpleEntity(id, date, null);

        //When
        manager
                .crud()
                .insert(entity)
                .withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS)
                .execute();

        //Then
        final Row row = session.execute(""SELECT value FROM simple WHERE id = "" + id).one();
        assertThat(row).isNotNull();
        assertThat(row.getString(""value"")).isEqualTo(""0 AM"");
    }""","""@Test
    public void should_limit_displayed_returned_results() throws Exception {
        //Given
        final Map<String, Object> values = new HashMap<>();
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        values.put(""id"", id);
        values.put(""date1"", ""'2015-10-01 00:00:00+0000'"");
        values.put(""date2"", ""'2015-10-02 00:00:00+0000'"");
        values.put(""date3"", ""'2015-10-03 00:00:00+0000'"");
        values.put(""date4"", ""'2015-10-04 00:00:00+0000'"");
        values.put(""date5"", ""'2015-10-05 00:00:00+0000'"");
        values.put(""date6"", ""'2015-10-06 00:00:00+0000'"");
        values.put(""date7"", ""'2015-10-07 00:00:00+0000'"");
        values.put(""date8"", ""'2015-10-08 00:00:00+0000'"");
        values.put(""date9"", ""'2015-10-09 00:00:00+0000'"");
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_many_rows.cql"", values);

        final SimpleStatement statement = new SimpleStatement(""SELECT * FROM simple WHERE id = :id LIMIT 100"");

        CassandraLogAsserter logAsserter = new CassandraLogAsserter();

        logAsserter.prepareLogLevel(SimpleEntity.class.getCanonicalName());

        //When
        final List<SimpleEntity> found = manager.raw()
                .typedQueryForSelect(statement, id)
                .withDMLResultsDisplaySize(2)
                .getList();

        //Then
        assertThat(found).hasSize(9);

        logAsserter.assertNotContains(""value: id - date3"");

    }"""
doanduyhai/Achilles,e3099bdce342910951c4862c78751fd81ed4552e,integration-test-2_1,info.archinnov.achilles.it.TestCRUDSimpleEntity.should_insert_with_insert_strategy_non_null_fields,info.archinnov.achilles.it.TestNativeQueries.should_limit_displayed_returned_results,1,"""@Test
    public void should_insert_with_insert_strategy_non_null_fields() throws Exception {
        //Given
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        final Date date = buildDateKey();
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_single_row.cql"", ImmutableMap.of(""id"", id, ""table"", ""simple""));
        final SimpleEntity entity = new SimpleEntity(id, date, null);

        //When
        manager
                .crud()
                .insert(entity)
                .withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS)
                .execute();

        //Then
        final Row row = session.execute(""SELECT value FROM simple WHERE id = "" + id).one();
        assertThat(row).isNotNull();
        assertThat(row.getString(""value"")).isEqualTo(""0 AM"");
    }""","""@Test
    public void should_limit_displayed_returned_results() throws Exception {
        //Given
        final Map<String, Object> values = new HashMap<>();
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        values.put(""id"", id);
        values.put(""date1"", ""'2015-10-01 00:00:00+0000'"");
        values.put(""date2"", ""'2015-10-02 00:00:00+0000'"");
        values.put(""date3"", ""'2015-10-03 00:00:00+0000'"");
        values.put(""date4"", ""'2015-10-04 00:00:00+0000'"");
        values.put(""date5"", ""'2015-10-05 00:00:00+0000'"");
        values.put(""date6"", ""'2015-10-06 00:00:00+0000'"");
        values.put(""date7"", ""'2015-10-07 00:00:00+0000'"");
        values.put(""date8"", ""'2015-10-08 00:00:00+0000'"");
        values.put(""date9"", ""'2015-10-09 00:00:00+0000'"");
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_many_rows.cql"", values);

        final SimpleStatement statement = new SimpleStatement(""SELECT * FROM simple WHERE id = :id LIMIT 100"");

        CassandraLogAsserter logAsserter = new CassandraLogAsserter();

        logAsserter.prepareLogLevel(SimpleEntity.class.getCanonicalName());

        //When
        final List<TypedMap> typedMaps = manager.raw()
                .nativeQuery(statement, id)
                .withDMLResultsDisplaySize(2)
                .getTypedMaps();

        //Then
        try {
            assertThat(typedMaps).hasSize(9);

            logAsserter.assertNotContains(""value: id - date3"");
        } finally {

        }
    }"""
doanduyhai/Achilles,e3099bdce342910951c4862c78751fd81ed4552e,integration-test-2_1,info.archinnov.achilles.it.TestCRUDSimpleEntity.should_insert_with_insert_strategy_non_null_fields,info.archinnov.achilles.it.TestEntityWithComplexIndices.should_query_using_full_collection_index,0,"""@Test
    public void should_insert_with_insert_strategy_non_null_fields() throws Exception {
        //Given
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        final Date date = buildDateKey();
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_single_row.cql"", ImmutableMap.of(""id"", id, ""table"", ""simple""));
        final SimpleEntity entity = new SimpleEntity(id, date, null);

        //When
        manager
                .crud()
                .insert(entity)
                .withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS)
                .execute();

        //Then
        final Row row = session.execute(""SELECT value FROM simple WHERE id = "" + id).one();
        assertThat(row).isNotNull();
        assertThat(row.getString(""value"")).isEqualTo(""0 AM"");
    }""","""@Test
    public void should_query_using_full_collection_index() throws Exception {
        //Given
        final Long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        scriptExecutor.executeScriptTemplate(""EntityWithIndicesForJSON/insertRows.cql"", ImmutableMap.of(""id"", id));

        //When
        final List<EntityWithComplexIndices> actual = manager
                .indexed()
                .select()
                .allColumns_FromBaseTable()
                .where()
                .indexed_fullIndexOnCollection().Eq(Sets.newHashSet(""311""))
                .getList();

        //Then
        assertThat(actual).hasSize(1);
        final EntityWithComplexIndices entity = actual.get(0);
        assertThat(entity.getSimpleIndex()).isEqualTo(""311"");
    }"""
doanduyhai/Achilles,e3099bdce342910951c4862c78751fd81ed4552e,integration-test-2_1,info.archinnov.achilles.it.TestCRUDSimpleEntity.should_insert_with_insert_strategy_non_null_fields,info.archinnov.achilles.it.TestEntityWithComplexIndices.should_query_using_index_and_clustering_column_slice,0,"""@Test
    public void should_insert_with_insert_strategy_non_null_fields() throws Exception {
        //Given
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        final Date date = buildDateKey();
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_single_row.cql"", ImmutableMap.of(""id"", id, ""table"", ""simple""));
        final SimpleEntity entity = new SimpleEntity(id, date, null);

        //When
        manager
                .crud()
                .insert(entity)
                .withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS)
                .execute();

        //Then
        final Row row = session.execute(""SELECT value FROM simple WHERE id = "" + id).one();
        assertThat(row).isNotNull();
        assertThat(row.getString(""value"")).isEqualTo(""0 AM"");
    }""","""@Test
    public void should_query_using_index_and_clustering_column_slice() throws Exception {
        //Given
        final Long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        scriptExecutor.executeScriptTemplate(""EntityWithIndicesForJSON/insertRows.cql"", ImmutableMap.of(""id"", id));

        //When
        final List<EntityWithComplexIndices> actual = manager
                .indexed()
                .select()
                .allColumns_FromBaseTable()
                .where()
                .indexed_simpleIndex().Eq(""312"")
                .clust1().Gte_And_Lte(1, 4)
                .getList();

        //Then
        assertThat(actual).hasSize(1);
        final EntityWithComplexIndices entity = actual.get(0);
        assertThat(entity.getSimpleIndex()).isEqualTo(""312"");
    }"""
doanduyhai/Achilles,e3099bdce342910951c4862c78751fd81ed4552e,integration-test-2_1,info.archinnov.achilles.it.TestCRUDSimpleEntity.should_insert_with_insert_strategy_non_null_fields,info.archinnov.achilles.it.TestEntityWithComplexIndices.should_query_using_index_and_clustering_column,0,"""@Test
    public void should_insert_with_insert_strategy_non_null_fields() throws Exception {
        //Given
        final long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        final Date date = buildDateKey();
        scriptExecutor.executeScriptTemplate(""SimpleEntity/insert_single_row.cql"", ImmutableMap.of(""id"", id, ""table"", ""simple""));
        final SimpleEntity entity = new SimpleEntity(id, date, null);

        //When
        manager
                .crud()
                .insert(entity)
                .withInsertStrategy(InsertStrategy.NOT_NULL_FIELDS)
                .execute();

        //Then
        final Row row = session.execute(""SELECT value FROM simple WHERE id = "" + id).one();
        assertThat(row).isNotNull();
        assertThat(row.getString(""value"")).isEqualTo(""0 AM"");
    }""","""@Test
    public void should_query_using_index_and_clustering_column() throws Exception {
        //Given
        final Long id = RandomUtils.nextLong(0L, Long.MAX_VALUE);
        scriptExecutor.executeScriptTemplate(""EntityWithIndicesForJSON/insertRows.cql"", ImmutableMap.of(""id"", id));

        //When
        final List<EntityWithComplexIndices> actual = manager
                .indexed()
                .select()
                .allColumns_FromBaseTable()
                .where()
                .indexed_simpleIndex().Eq(""312"")
                .clust1().Eq(3)
                .clust3().Eq(""2"")
                .getList();

        //Then
        assertThat(actual).hasSize(1);
        final EntityWithComplexIndices entity = actual.get(0);
        assertThat(entity.getSimpleIndex()).isEqualTo(""312"");
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,NA,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testCopyTo,1,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testCopyTo() {
        fixture.setDirectory(testResourcesDir);
        assertTrue(fixture.exists(txtFilename));
        try {
            String res = fixture.copyTo(txtFilename, copyFilename);
            String expectedPath = getExpectedUrlPath();
            assertEquals(""<a href=\""file:"" + expectedPath + ""\"" target=\""_blank\"">"" + copyFilename + ""</a>"", res);
        } catch (IOException ioe) {
            fail(""Should not happen: "" + ioe.getMessage());
        }
        assertTrue(fixture.exists(copyFilename));
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,NA,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testTakeFirstLineFrom,1,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testTakeFirstLineFrom() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.copyTo(txtFilename, copyFilename);
            assertEquals(""# Expected as first line of text."",
                    fixture.takeFirstLineFrom(copyFilename));
            assertEquals(""# Expected as 2nd line of text."",
                    fixture.takeFirstLineFrom(copyFilename));
            fixture.textIn(""foobar"");
        } catch (SlimFixtureException sfe) {
            assertEquals(""message:<<Unable to find: "" + testResourcesDir + ""foobar>>"", sfe.getMessage());
        } catch (IOException ioe) {
            fail(""Should not happen: "" + ioe.getMessage());
        }
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,NA,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testAppendContainingOnNewline,1,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testAppendContainingOnNewline() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.copyTo(txtFilename, copyFilename);
            String res = fixture.appendToOnNewLine(""Third line"", copyFilename);
            String expectedPath = getExpectedUrlPath();
            assertEquals(""<a href=\""file:"" + expectedPath + ""\"" target=\""_blank\"">"" + copyFilename + ""</a>"", res);
            assertEquals(""# Expected as first line of text.\n# Expected as 2nd line of text.\nThird line"",
                    new LineEndingHelper().convertEndingsTo(fixture.textIn(copyFilename), ""\n""));
        } catch (IOException ioe) {
            fail(""Should not happen: "" + ioe.getMessage());
        }
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,NA,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testAppendContainingOnSameline,1,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testAppendContainingOnSameline() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.copyTo(txtFilename, copyFilename);
            String res = fixture.appendTo(""Third line"", copyFilename);
            String expectedPath = getExpectedUrlPath();
            assertEquals(""<a href=\""file:"" + expectedPath + ""\"" target=\""_blank\"">"" + copyFilename + ""</a>"", res);
            assertEquals(""# Expected as first line of text.\n# Expected as 2nd line of text.Third line"",
                    fixture.textIn(copyFilename));
        } catch (IOException ioe) {
            fail(""Should not happen: "" + ioe.getMessage());
        }
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.junit.reportmerge.HtmlReportIndexGeneratorTest.testBadParent,0,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testBadParent() throws IOException {
        String path = ""htmlReports"";
        try {
            String result = generator.createFrom(path);
            fail(""Expected exception, got: "" + result);
        } catch (IllegalArgumentException e) {
            assertTrue(""Bad message: "" + e.getMessage(), e.getMessage().endsWith(""htmlReports is not an existing directory""));
        }
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.junit.reportmerge.HtmlReportIndexGeneratorTest.testCreateFrom,0,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testCreateFrom() throws Exception {
        String path = getTestReportsPath();

        String resultFile = generator.createFrom(path);
        assertNotNull(resultFile);

        File report = new File(resultFile);
        assertEquals(""index.html"", FilenameUtils.getName(resultFile));
        assertEquals(new File(path).getAbsolutePath(), report.getParentFile().getAbsolutePath());
        assertTrue(report.getAbsolutePath() + "" does not exist"", report.exists());

        try (FileInputStream s = new FileInputStream(report)) {
            String contents = FileUtil.streamToString(s, resultFile).trim();

            assertTrue(""File does not start with expected content, but was:\n"" + contents, contents.startsWith(""<html><head>""));
            assertTrue(""File does not end with expected content, but was:\n"" + contents, contents.endsWith(""</body></html>""));
            assertTrue(""File does not have expected CSS link:\n"" + contents, contents.contains(""href='Fit/css/fitnesse.css'""));
            assertTrue(""File does not have Overview Pages section:\n"" + contents, contents.contains(""<h2>Overview Pages</h2>""));
            String[] rows = contents.split(""</tr>\\s*<tr"");
            assertEquals(""Unexpected number of rows: \n"" + String.join(""\n"", rows), 42, rows.length);
        }

        File jsonReport = new File(path, ""test-results.json"");
        assertTrue(jsonReport.exists());
        try (FileInputStream s = new FileInputStream(jsonReport)) {
            String contents = FileUtil.streamToString(s, jsonReport.getName());
            assertTrue(contents, contents.startsWith(""[""));
            JSONObject jsonObject = new JSONObject(""{'a': "" + contents + ""}"");
            org.json.JSONArray array = (org.json.JSONArray) jsonObject.get(""a"");
            assertEquals(EXPECTED_TEST_COUNT, array.length());
        }

        File csvReport = new File(path, ""test-results.csv"");
        assertTrue(csvReport.exists());
        try (FileInputStream s = new FileInputStream(csvReport)) {
            String contents = FileUtil.streamToString(s, csvReport.getName());
            String[] lines = contents.split(""\n"");
            assertEquals(EXPECTED_TEST_COUNT + 1, lines.length);
            for (String line : lines) {
                String[] fields = line.split(""\t"");
                assertEquals(""Unexpected number of fields in: "" + line, 6, fields.length);
            }
        }
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.junit.reportmerge.ReportFinderTest.testFindTestResultPages,0,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testFindTestResultPages() throws Exception {
        String path = getTestReportsPath();
        List<TestReportHtml> reports = new ReportFinder().findTestResultPages(new File(path));
        List<TestReportHtml> overviews = reports.stream().filter(TestReportHtml::isOverviewPage).collect(Collectors.toList());
        assertEquals(""Unexpected number of run: "" + overviews, 3, overviews.size());
        assertEquals(""Unexpected number of results"", EXPECTED_TEST_COUNT, reports.size());

        assertEquals(-1, getActual(reports, ""MockXmlServerTest"").getTime());
        assertTrue(reports.stream().filter(r -> !""MockXmlServerTest"".equals(r.getRunName())).noneMatch(r -> r.getTime() == -1));

        assertEquals(0, getActual(overviews, ""Fit"").getTime());
        assertEquals(2979, getActual(overviews, ""Http"").getTime());
        assertEquals(2435, getActual(overviews, ""Util"").getTime());
    }"""
fhoeben/hsac-fitnesse-fixtures,a64c18d9c4bac8271275c7b089d40be20f0604b5,,nl.hsac.fitnesse.fixture.slim.FileFixtureTest.testDelete,nl.hsac.fitnesse.junit.selenium.LocalSeleniumDriverFactoryFactoryTest.testSupportNull,0,"""@Test
    public void testDelete() {
        try {
            fixture.setDirectory(testResourcesDir);
            fixture.delete(copyFilename);
        } catch (SlimFixtureException sfe) {
            fail(""Should not happen: "" + sfe.getMessage());
        }
    }""","""@Test
    public void testSupportNull() {
        System.clearProperty(SeleniumDriverFactoryFactoryBase.SELENIUM_BROWSER);
        assertNull(factoryFactory.getProperty(SeleniumDriverFactoryFactoryBase.SELENIUM_BROWSER));
    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.aCreateStandaloneTaskForGroup,1,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void aCreateStandaloneTaskForGroup() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""group task"")
                .withGroup(""activitiTeam"")
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                                                         50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isNull();
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);

        currentTaskId = task.getId();

    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.dCreateStandaloneTaskAndClaimAndReleaseUnAuthorized,1,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void dCreateStandaloneTaskAndClaimAndReleaseUnAuthorized() {

        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""group task"")
                .withGroup(""activitiTeam"")
                .build());


        assertThat(standAloneTask.getAssignee()).isNull();
        assertThat(standAloneTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);
        currentTaskId = standAloneTask.getId();
    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeUnAuthorizedTest.bClaimNotFoundBecauseYouAreNotACandidate,org.activiti.spring.boot.tasks.TaskRuntimeUnAuthorizedTest.aCreateStandaloneTaskForGroup,1,"""@Test(expected = NotFoundException.class)
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimNotFoundBecauseYouAreNotACandidate(){
        taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void aCreateStandaloneTaskForGroup() {

        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""group task"")
                .withGroup(""doctor"")
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                                                         50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isNull();
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);

        currentTaskId = task.getId();


    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.eCreateStandaloneTaskAndClaimAndReleaseUnAuthorized,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.aCreateStandaloneTaskForGroup,1,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void eCreateStandaloneTaskAndClaimAndReleaseUnAuthorized() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);
    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void aCreateStandaloneTaskForGroup() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""group task"")
                .withGroup(""activitiTeam"")
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                                                         50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isNull();
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);

        currentTaskId = task.getId();

    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.eCreateStandaloneTaskAndClaimAndReleaseUnAuthorized,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.dCreateStandaloneTaskAndClaimAndReleaseUnAuthorized,1,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void eCreateStandaloneTaskAndClaimAndReleaseUnAuthorized() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);
    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void dCreateStandaloneTaskAndClaimAndReleaseUnAuthorized() {

        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""group task"")
                .withGroup(""activitiTeam"")
                .build());


        assertThat(standAloneTask.getAssignee()).isNull();
        assertThat(standAloneTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);
        currentTaskId = standAloneTask.getId();
    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeCompleteTaskTest.ctryCompletingWithUnauthorizedUser,org.activiti.spring.boot.tasks.TaskRuntimeCompleteTaskTest.bCreateStandaloneTask,1,"""@Test(expected = NotFoundException.class)
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void ctryCompletingWithUnauthorizedUser() {
        taskRuntime.complete(TaskPayloadBuilder.complete().withTaskId(currentTaskId).build());
    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bCreateStandaloneTask() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();

        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""simple task"")
                .withAssignee(authenticatedUserId)
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        currentTaskId = task.getId();
    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeTaskAssigneeTest.bCreateCheckTaskCreatedForSalaboyFromAnotherUser,org.activiti.spring.boot.tasks.TaskRuntimeTaskAssigneeTest.aCreateStandaloneTaskForAnotherAssignee,1,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bCreateCheckTaskCreatedForSalaboyFromAnotherUser() {

        // the target user should be able to see the task as well
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        assertThat(task.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task deletedTask = taskRuntime.delete(TaskPayloadBuilder
                .delete()
                .withTaskId(task.getId())
                .withReason(""test clean up"")
                .build());

        assertThat(deletedTask).isNotNull();
        assertThat(deletedTask.getStatus()).isEqualTo(Task.TaskStatus.DELETED);

        tasks = taskRuntime.tasks(Pageable.of(0,
                50));
        assertThat(tasks.getContent()).hasSize(0);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void aCreateStandaloneTaskForAnotherAssignee() {

        taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""task for salaboy"")
                .withAssignee(""salaboy"")
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                                                         50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isEqualTo(""salaboy"");
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);


    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeDeleteTaskTest.dClaimTaskCreatedForGroup,org.activiti.spring.boot.tasks.TaskRuntimeDeleteTaskTest.cCreateStandaloneGroupTaskClaimAndDeleteFail,1,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void dClaimTaskCreatedForGroup() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void cCreateStandaloneGroupTaskClaimAndDeleteFail() {


        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""simple task"")
                .withGroup(""activitiTeam"")
                .build());

        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isNull();
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);

        currentTaskId = task.getId();


    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeCompleteTaskTest.bCreateStandaloneTask,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bCreateStandaloneTask() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();

        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""simple task"")
                .withAssignee(authenticatedUserId)
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        currentTaskId = task.getId();
    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeTaskAssigneeTest.aCreateStandaloneTaskForAnotherAssignee,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void aCreateStandaloneTaskForAnotherAssignee() {

        taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""task for salaboy"")
                .withAssignee(""salaboy"")
                .build());

        // the owner should be able to see the created task
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                                                         50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isEqualTo(""salaboy"");
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);


    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeCompleteTaskTest.ctryCompletingWithUnauthorizedUser,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test(expected = NotFoundException.class)
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void ctryCompletingWithUnauthorizedUser() {
        taskRuntime.complete(TaskPayloadBuilder.complete().withTaskId(currentTaskId).build());
    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeTaskAssigneeTest.bCreateCheckTaskCreatedForSalaboyFromAnotherUser,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bCreateCheckTaskCreatedForSalaboyFromAnotherUser() {

        // the target user should be able to see the task as well
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        assertThat(task.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task deletedTask = taskRuntime.delete(TaskPayloadBuilder
                .delete()
                .withTaskId(task.getId())
                .withReason(""test clean up"")
                .build());

        assertThat(deletedTask).isNotNull();
        assertThat(deletedTask.getStatus()).isEqualTo(Task.TaskStatus.DELETED);

        tasks = taskRuntime.tasks(Pageable.of(0,
                50));
        assertThat(tasks.getContent()).hasSize(0);


    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeDeleteTaskTest.fCleanUpWithAdmin,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""admin"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void fCleanUpWithAdmin() {
        Page<Task> tasks = taskAdminRuntime.tasks(Pageable.of(0, 50));
        for (Task t : tasks.getContent()) {
            taskAdminRuntime.delete(TaskPayloadBuilder
                    .delete()
                    .withTaskId(t.getId())
                    .withReason(""test clean up"")
                    .build());
        }

    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeStandaloneTaskTest.bCreateStandaloneTaskForGroup,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""garth"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bCreateStandaloneTaskForGroup() {

        Task standAloneTask = taskRuntime.create(TaskPayloadBuilder.create()
                .withName(""find Lucien Sanchez"")
                .withGroup(""doctor"")
                .build());

        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        assertThat(task.getAssignee()).isNull();
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.CREATED);

        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(task.getId()).build());

        assertThat(claimedTask.getAssignee()).isEqualTo(securityManager.getAuthenticatedUserId());
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task deletedTask = taskRuntime.delete(TaskPayloadBuilder
                .delete()
                .withTaskId(task.getId())
                .withReason(""test clean up"")
                .build());

        assertThat(deletedTask).isNotNull();
        assertThat(deletedTask.getStatus()).isEqualTo(Task.TaskStatus.DELETED);

        tasks = taskRuntime.tasks(Pageable.of(0,
                50));
        assertThat(tasks.getContent()).hasSize(0);


    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeStandaloneTaskTest.cCleanUpWithAdmin,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test
    @WithUserDetails(value = ""admin"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void cCleanUpWithAdmin() {
        Page<Task> tasks = taskAdminRuntime.tasks(Pageable.of(0, 50));
        for (Task t : tasks.getContent()) {
            taskAdminRuntime.delete(TaskPayloadBuilder
                    .delete()
                    .withTaskId(t.getId())
                    .withReason(""test clean up"")
                    .build());
        }

    }"""
Activiti/Activiti,b11f757a48600e53aaf3fcb7a3ba1ece6c463cb4,activiti-spring-boot-starter,org.activiti.spring.boot.tasks.TaskRuntimeClaimReleaseTest.bClaimAndRelease,org.activiti.spring.boot.tasks.TaskRuntimeUnAuthorizedTest.bClaimNotFoundBecauseYouAreNotACandidate,0,"""@Test
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimAndRelease() {

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        Task claimedTask = taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
        assertThat(claimedTask.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(claimedTask.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task releasedTask = taskRuntime.release(TaskPayloadBuilder.release().withTaskId(claimedTask.getId()).build());
        assertThat(releasedTask.getAssignee()).isNull();
        assertThat(releasedTask.getStatus()).isEqualTo(Task.TaskStatus.CREATED);


    }""","""@Test(expected = NotFoundException.class)
    @WithUserDetails(value = ""salaboy"", userDetailsServiceBeanName = ""myUserDetailsService"")
    public void bClaimNotFoundBecauseYouAreNotACandidate(){
        taskRuntime.claim(TaskPayloadBuilder.claim().withTaskId(currentTaskId).build());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,1,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication1,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void checkApplication1() throws Exception {
        try {
            ConfigUtils.setProperties(null);
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);

            writeDubboProperties(Constants.SHUTDOWN_WAIT_KEY, ""100"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            ApplicationConfig appConfig = interfaceConfig.getApplication();
            TestCase.assertEquals(""demo"", appConfig.getName());
            TestCase.assertEquals(""100"", System.getProperty(Constants.SHUTDOWN_WAIT_KEY));

            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            ConfigUtils.setProperties(null);
            writeDubboProperties(Constants.SHUTDOWN_WAIT_SECONDS_KEY, ""1000"");
            System.setProperty(""dubbo.application.name"", ""demo"");
            interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkApplication();
            TestCase.assertEquals(""1000"", System.getProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY));
        } finally {
            ConfigUtils.setProperties(null);
            System.clearProperty(""dubbo.application.name"");
            System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);
            System.clearProperty(Constants.SHUTDOWN_WAIT_SECONDS_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock6,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void checkStubAndMock6() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,1,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testProtocol,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testProtocol() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setProtocol(""protocol"");
        assertThat(registry.getProtocol(), equalTo(registry.getProtocol()));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testAddress,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testAddress() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""localhost"");
        assertThat(registry.getAddress(), equalTo(""localhost""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, not(hasKey(""address"")));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testUsername,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testUsername() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setUsername(""username"");
        assertThat(registry.getUsername(), equalTo(""username""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testPassword,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testPassword() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setPassword(""password"");
        assertThat(registry.getPassword(), equalTo(""password""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testWait,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testWait() throws Exception {
        try {
            RegistryConfig registry = new RegistryConfig();
            registry.setWait(10);
            assertThat(registry.getWait(), is(10));
            assertThat(System.getProperty(Constants.SHUTDOWN_WAIT_KEY), equalTo(""10""));
        } finally {
            System.clearProperty(Constants.SHUTDOWN_TIMEOUT_KEY);
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testCheck,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testCheck() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCheck(true);
        assertThat(registry.isCheck(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testFile,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testFile() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setFile(""file"");
        assertThat(registry.getFile(), equalTo(""file""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testTransporter,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testTransporter() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTransporter(""transporter"");
        assertThat(registry.getTransporter(), equalTo(""transporter""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testClient,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testClient() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setClient(""client"");
        assertThat(registry.getClient(), equalTo(""client""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testTimeout,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testTimeout() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setTimeout(10);
        assertThat(registry.getTimeout(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testSession,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testSession() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSession(10);
        assertThat(registry.getSession(), is(10));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testDynamic,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testDynamic() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDynamic(true);
        assertThat(registry.isDynamic(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testRegister,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testRegister() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setRegister(true);
        assertThat(registry.isRegister(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testSubscribe,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testSubscribe() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setSubscribe(true);
        assertThat(registry.isSubscribe(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testCluster,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testCluster() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setCluster(""cluster"");
        assertThat(registry.getCluster(), equalTo(""cluster""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testGroup,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testGroup() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setGroup(""group"");
        assertThat(registry.getGroup(), equalTo(""group""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testVersion,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testVersion() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setVersion(""1.0.0"");
        assertThat(registry.getVersion(), equalTo(""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testParameters,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testParameters() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setParameters(Collections.singletonMap(""k1"", ""v1""));
        assertThat(registry.getParameters(), hasEntry(""k1"", ""v1""));
        Map<String, String> parameters = new HashMap<String, String>();
        RegistryConfig.appendParameters(parameters, registry);
        assertThat(parameters, hasEntry(""k1"", ""v1""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.RegistryConfigTest.testDefault,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testDefault() throws Exception {
        RegistryConfig registry = new RegistryConfig();
        registry.setDefault(true);
        assertThat(registry.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ArgumentConfigTest.testIndex,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testIndex() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        assertThat(argument.getIndex(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ArgumentConfigTest.testType,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testType() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setType(""int"");
        assertThat(argument.getType(), equalTo(""int""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ArgumentConfigTest.testCallback,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testCallback() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setCallback(true);
        assertThat(argument.isCallback(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ArgumentConfigTest.testArguments,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testArguments() throws Exception {
        ArgumentConfig argument = new ArgumentConfig();
        argument.setIndex(1);
        argument.setType(""int"");
        argument.setCallback(true);
        Map<String, String> parameters = new HashMap<String, String>();
        AbstractServiceConfig.appendParameters(parameters, argument);
        assertThat(parameters, hasEntry(""callback"", ""true""));
        assertThat(parameters.size(), is(1));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ReferenceConfigTest.testInjvm,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testInjvm() throws Exception {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-protocol-random-port"");

        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");

        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ServiceConfig<DemoService> demoService;
        demoService = new ServiceConfig<DemoService>();
        demoService.setInterface(DemoService.class);
        demoService.setRef(new DemoServiceImpl());
        demoService.setApplication(application);
        demoService.setRegistry(registry);
        demoService.setProtocol(protocol);

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());
        rc.setInjvm(false);

        try {
            demoService.export();
            rc.get();
            Assert.assertTrue(!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(
                    rc.getInvoker().getUrl().getProtocol()));
        } finally {
            demoService.unexport();
        }
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ReferenceConfigTest.testReferenceRetry,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testReferenceRetry() {
        ApplicationConfig application = new ApplicationConfig();
        application.setName(""test-reference-retry"");
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress(""multicast://224.5.6.7:1234"");
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""dubbo"");

        ReferenceConfig<DemoService> rc = new ReferenceConfig<DemoService>();
        rc.setApplication(application);
        rc.setRegistry(registry);
        rc.setInterface(DemoService.class.getName());

        boolean success = false;
        DemoService demoService = null;
        try {
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertFalse(success);
        Assert.assertNull(demoService);

        ServiceConfig<DemoService> sc = new ServiceConfig<DemoService>();
        sc.setInterface(DemoService.class);
        sc.setRef(new DemoServiceImpl());
        sc.setApplication(application);
        sc.setRegistry(registry);
        sc.setProtocol(protocol);

        try {
            sc.export();
            demoService = rc.get();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assert.assertTrue(success);
        Assert.assertNotNull(demoService);

    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testName1,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test(expected = IllegalStateException.class)
    public void testName1() throws Exception {
        ModuleConfig module = new ModuleConfig();
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testName2,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testName2() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        assertThat(module.getName(), equalTo(""module-name""));
        assertThat(module.getId(), equalTo(""module-name""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module"", ""module-name""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testVersion,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testVersion() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setName(""module-name"");
        module.setVersion(""1.0.0"");
        assertThat(module.getVersion(), equalTo(""1.0.0""));
        Map<String, String> parameters = new HashMap<String, String>();
        ModuleConfig.appendParameters(parameters, module);
        assertThat(parameters, hasEntry(""module.version"", ""1.0.0""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testOwner,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testOwner() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOwner(""owner"");
        assertThat(module.getOwner(), equalTo(""owner""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testOrganization,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testOrganization() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setOrganization(""org"");
        assertThat(module.getOrganization(), equalTo(""org""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testRegistry,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testRegistry() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistry(registry);
        assertThat(module.getRegistry(), sameInstance(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testRegistries,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testRegistries() throws Exception {
        ModuleConfig module = new ModuleConfig();
        RegistryConfig registry = new RegistryConfig();
        module.setRegistries(Collections.singletonList(registry));
        assertThat(module.getRegistries(), Matchers.<RegistryConfig>hasSize(1));
        assertThat(module.getRegistries(), contains(registry));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testMonitor,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testMonitor() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setMonitor(""monitor-addr1"");
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr1""));
        module.setMonitor(new MonitorConfig(""monitor-addr2""));
        assertThat(module.getMonitor().getAddress(), equalTo(""monitor-addr2""));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ModuleConfigTest.testDefault,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testDefault() throws Exception {
        ModuleConfig module = new ModuleConfig();
        module.setDefault(true);
        assertThat(module.isDefault(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ProtocolConfigTest.testDestroy,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testDestroy() throws Exception {
        Protocol protocol = Mockito.mock(Protocol.class);
        MockProtocol2.delegate = protocol;
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName(""mockprotocol2"");
        protocolConfig.destroy();
        Mockito.verify(protocol).destroy();
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ProtocolConfigTest.testName,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testName() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName(""name"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getName(), equalTo(""name""));
        assertThat(protocol.getId(), equalTo(""name""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadMonitor,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testLoadMonitor() throws Exception {
        System.setProperty(""dubbo.monitor.address"", ""monitor-addr:12080"");
        System.setProperty(""dubbo.monitor.protocol"", ""monitor"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        URL url = interfaceConfig.loadMonitor(new URL(""dubbo"", ""addr1"", 9090));
        TestCase.assertEquals(""monitor-addr:12080"", url.getAddress());
        TestCase.assertEquals(MonitorService.class.getName(), url.getParameter(""interface""));
        TestCase.assertNotNull(url.getParameter(""dubbo""));
        TestCase.assertNotNull(url.getParameter(""pid""));
        TestCase.assertNotNull(url.getParameter(""timestamp""));
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock2,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry2,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void testCheckRegistry2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkRegistry();
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCluster,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testCluster() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCluster(""mockcluster"");
        TestCase.assertEquals(""mockcluster"", interfaceConfig.getCluster());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCheckRegistry1,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testCheckRegistry1() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1|addr2"");
        try {
            InterfaceConfig interfaceConfig = new InterfaceConfig();
            interfaceConfig.checkRegistry();
            TestCase.assertEquals(2, interfaceConfig.getRegistries().size());
        } finally {
            System.clearProperty(""dubbo.registry.address"");
        }
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOwner,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testOwner() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOwner(""owner"");
        TestCase.assertEquals(""owner"", interfaceConfig.getOwner());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock3,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void checkStubAndMock3() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal3.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testStub,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testStub() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub((Boolean) null);
        TestCase.assertNull(interfaceConfig.getStub());
        interfaceConfig.setStub(true);
        TestCase.assertEquals(""true"", interfaceConfig.getStub());
        interfaceConfig.setStub(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getStub());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock1,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testScope,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testScope() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setScope(""scope"");
        TestCase.assertEquals(""scope"", interfaceConfig.getScope());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testApplication,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testApplication() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ApplicationConfig applicationConfig = new ApplicationConfig();
        interfaceConfig.setApplication(applicationConfig);
        TestCase.assertSame(applicationConfig, interfaceConfig.getApplication());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLocal,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testLocal() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLocal((Boolean) null);
        TestCase.assertNull(interfaceConfig.getLocal());
        interfaceConfig.setLocal(true);
        TestCase.assertEquals(""true"", interfaceConfig.getLocal());
        interfaceConfig.setLocal(""GreetingMock"");
        TestCase.assertEquals(""GreetingMock"", interfaceConfig.getLocal());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock5,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock5() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOnconnect,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testOnconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOnconnect(""onConnect"");
        TestCase.assertEquals(""onConnect"", interfaceConfig.getOnconnect());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testFilter,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testFilter() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setFilter(""mockfilter"");
        TestCase.assertEquals(""mockfilter"", interfaceConfig.getFilter());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testListener,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testListener() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setListener(""mockinvokerlistener"");
        TestCase.assertEquals(""mockinvokerlistener"", interfaceConfig.getListener());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod5,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void checkInterfaceAndMethod5() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""hello"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testConnections,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testConnections() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setConnections(1);
        TestCase.assertEquals(1, interfaceConfig.getConnections().intValue());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods2,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(AbstractInterfaceConfigTest.class, null);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethods1,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethods1() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(null, null);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testCallbacks,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testCallbacks() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setCallbacks(2);
        TestCase.assertEquals(2, interfaceConfig.getCallbacks().intValue());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testProxy,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testProxy() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setProxy(""mockproxyfactory"");
        TestCase.assertEquals(""mockproxyfactory"", interfaceConfig.getProxy());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkApplication2,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkApplication2() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkApplication();
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLoadRegistries,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testLoadRegistries() throws Exception {
        System.setProperty(""dubbo.registry.address"", ""addr1"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        List<URL> urls = interfaceConfig.loadRegistries(true);
        TestCase.assertEquals(1, urls.size());
        URL url = urls.get(0);
        TestCase.assertEquals(""registry"", url.getProtocol());
        TestCase.assertEquals(""addr1:9090"", url.getAddress());
        TestCase.assertEquals(RegistryService.class.getName(), url.getPath());
        TestCase.assertTrue(url.getParameters().containsKey(""timestamp""));
        TestCase.assertTrue(url.getParameters().containsKey(""pid""));
        TestCase.assertTrue(url.getParameters().containsKey(""registry""));
        TestCase.assertTrue(url.getParameters().containsKey(""dubbo""));
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock8,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock8() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistry,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testRegistry() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistry(registryConfig);
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistry());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testOndisconnect,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testOndisconnect() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setOndisconnect(""onDisconnect"");
        TestCase.assertEquals(""onDisconnect"", interfaceConfig.getOndisconnect());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock9,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock9() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(GreetingMock2.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testRegistries,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testRegistries() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        RegistryConfig registryConfig = new RegistryConfig();
        interfaceConfig.setRegistries(Collections.singletonList(registryConfig));
        TestCase.assertEquals(1, interfaceConfig.getRegistries().size());
        TestCase.assertSame(registryConfig, interfaceConfig.getRegistries().get(0));
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testModule,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testModule() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        ModuleConfig moduleConfig = new ModuleConfig();
        interfaceConfig.setModule(moduleConfig);
        TestCase.assertSame(moduleConfig, interfaceConfig.getModule());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod3,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod3() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock7,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock7() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMock(""return {a, b}"");
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testMonitor,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testMonitor() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setMonitor(""monitor-addr"");
        TestCase.assertEquals(""monitor-addr"", interfaceConfig.getMonitor().getAddress());
        MonitorConfig monitorConfig = new MonitorConfig();
        interfaceConfig.setMonitor(monitorConfig);
        TestCase.assertSame(monitorConfig, interfaceConfig.getMonitor());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkStubAndMock4,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkStubAndMock4() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setStub(GreetingLocal1.class.getName());
        interfaceConfig.checkStubAndMock(Greeting.class);
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.checkInterfaceAndMethod4,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test(expected = IllegalStateException.class)
    public void checkInterfaceAndMethod4() throws Exception {
        MethodConfig methodConfig = new MethodConfig();
        methodConfig.setName(""nihao"");
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.checkInterfaceAndMethods(Greeting.class, Collections.singletonList(methodConfig));
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-config/dubbo-config-api,org.apache.dubbo.config.AbstractInterfaceConfigTest.testLayer,org.apache.dubbo.config.ProtocolConfigTest.testHost,0,"""@Test
    public void testLayer() throws Exception {
        InterfaceConfig interfaceConfig = new InterfaceConfig();
        interfaceConfig.setLayer(""layer"");
        TestCase.assertEquals(""layer"", interfaceConfig.getLayer());
    }""","""@Test
    public void testHost() throws Exception {
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setHost(""host"");
        Map<String, String> parameters = new HashMap<String, String>();
        ProtocolConfig.appendParameters(parameters, protocol);
        assertThat(protocol.getHost(), equalTo(""host""));
        assertThat(parameters.isEmpty(), is(true));
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-rpc/dubbo-rpc-dubbo,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolWithMina,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocol,1,"""@Test
    public void testDubboProtocolWithMina() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY, ""mina"")));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY, ""mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(service.enumlength(new Type[]{}), Type.Lower);
            assertEquals(service.getSize(null), -1);
            assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        for (int i = 0; i < 10; i++) {
            Set<String> set = service.keys(map);
            assertEquals(set.size(), 1);
            assertEquals(set.iterator().next(), ""aa"");
            service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");
        }

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()), buf.toString());
            assertEquals(echo.$echo(""test""), ""test"");
            assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
            assertEquals(echo.$echo(1234), 1234);
        }
    }""","""@Test
    public void testDubboProtocol() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName())));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName())));
        assertEquals(service.enumlength(new Type[]{}), Type.Lower);
        assertEquals(service.getSize(null), -1);
        assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        Set<String> set = service.keys(map);
        assertEquals(set.size(), 1);
        assertEquals(set.iterator().next(), ""aa"");
        service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=netty"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=netty"")));
        assertEquals(echo.$echo(buf.toString()), buf.toString());
        assertEquals(echo.$echo(""test""), ""test"");
        assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
        assertEquals(echo.$echo(1234), 1234);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-rpc/dubbo-rpc-dubbo,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolWithMina,org.apache.dubbo.rpc.protocol.dubbo.RpcFilterTest.testRpcFilter,1,"""@Test
    public void testDubboProtocolWithMina() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY, ""mina"")));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY, ""mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(service.enumlength(new Type[]{}), Type.Lower);
            assertEquals(service.getSize(null), -1);
            assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        for (int i = 0; i < 10; i++) {
            Set<String> set = service.keys(map);
            assertEquals(set.size(), 1);
            assertEquals(set.iterator().next(), ""aa"");
            service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");
        }

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()), buf.toString());
            assertEquals(echo.$echo(""test""), ""test"");
            assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
            assertEquals(echo.$echo(1234), 1234);
        }
    }""","""@Test
    public void testRpcFilter() throws Exception {
        DemoService service = new DemoServiceImpl();
        URL url = URL.valueOf(""dubbo://127.0.0.1:9010/org.apache.dubbo.rpc.DemoService?service.filter=echo"");
        protocol.export(proxy.getInvoker(service, DemoService.class, url));
        service = proxy.getProxy(protocol.refer(DemoService.class, url));
        Assert.assertEquals(""123"", service.echo(""123""));
        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, url));
        Assert.assertEquals(echo.$echo(""test""), ""test"");
        Assert.assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
        Assert.assertEquals(echo.$echo(1234), 1234);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-rpc/dubbo-rpc-dubbo,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolWithMina,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolMultiService,1,"""@Test
    public void testDubboProtocolWithMina() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY, ""mina"")));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY, ""mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(service.enumlength(new Type[]{}), Type.Lower);
            assertEquals(service.getSize(null), -1);
            assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        for (int i = 0; i < 10; i++) {
            Set<String> set = service.keys(map);
            assertEquals(set.size(), 1);
            assertEquals(set.iterator().next(), ""aa"");
            service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");
        }

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()), buf.toString());
            assertEquals(echo.$echo(""test""), ""test"");
            assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
            assertEquals(echo.$echo(1234), 1234);
        }
    }""","""@Test
    public void testDubboProtocolMultiService() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName())));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName())));

        RemoteService remote = new RemoteServiceImpl();
        protocol.export(proxy.getInvoker(remote, RemoteService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + RemoteService.class.getName())));
        remote = proxy.getProxy(protocol.refer(RemoteService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + RemoteService.class.getName())));

        service.sayHello(""world"");

        // test netty client
        assertEquals(""world"", service.echo(""world""));
        assertEquals(""hello world@"" + RemoteServiceImpl.class.getName(), remote.sayHello(""world""));

        EchoService serviceEcho = (EchoService) service;
        assertEquals(serviceEcho.$echo(""test""), ""test"");

        EchoService remoteEecho = (EchoService) remote;
        assertEquals(remoteEecho.$echo(""ok""), ""ok"");
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-rpc/dubbo-rpc-dubbo,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolWithMina,org.apache.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandlerTest.testChangeMessageNull,0,"""@Test
    public void testDubboProtocolWithMina() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY, ""mina"")));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY, ""mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(service.enumlength(new Type[]{}), Type.Lower);
            assertEquals(service.getSize(null), -1);
            assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        for (int i = 0; i < 10; i++) {
            Set<String> set = service.keys(map);
            assertEquals(set.size(), 1);
            assertEquals(set.iterator().next(), ""aa"");
            service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");
        }

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()), buf.toString());
            assertEquals(echo.$echo(""test""), ""test"");
            assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
            assertEquals(echo.$echo(1234), 1234);
        }
    }""","""@Test
    public void testChangeMessageNull() throws RemotingException {
        String result = change.telnet(mockChannel, null);
        assertEquals(""Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService"", result);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-rpc/dubbo-rpc-dubbo,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolWithMina,org.apache.dubbo.rpc.protocol.dubbo.telnet.ChangeTelnetHandlerTest.testChangeName,0,"""@Test
    public void testDubboProtocolWithMina() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY, ""mina"")));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY, ""mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(service.enumlength(new Type[]{}), Type.Lower);
            assertEquals(service.getSize(null), -1);
            assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        for (int i = 0; i < 10; i++) {
            Set<String> set = service.keys(map);
            assertEquals(set.size(), 1);
            assertEquals(set.iterator().next(), ""aa"");
            service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");
        }

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()), buf.toString());
            assertEquals(echo.$echo(""test""), ""test"");
            assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
            assertEquals(echo.$echo(1234), 1234);
        }
    }""","""@Test
    public void testChangeName() throws RemotingException {
        DubboProtocol.getDubboProtocol().export(mockInvoker);
        String result = change.telnet(mockChannel, ""org.apache.dubbo.rpc.protocol.dubbo.support.DemoService"");
        assertEquals(""Used the org.apache.dubbo.rpc.protocol.dubbo.support.DemoService as default.\r\nYou can cancel default service by command: cd /"",
                result);
    }"""
apache/incubator-dubbo,737f7a7ea67832d7f17517326fb2491d0a086dd7,dubbo-rpc/dubbo-rpc-dubbo,org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolTest.testDubboProtocolWithMina,org.apache.dubbo.rpc.protocol.dubbo.ImplicitCallBackTest.test_Sync_NoFuture,0,"""@Test
    public void testDubboProtocolWithMina() throws Exception {
        DemoService service = new DemoServiceImpl();
        protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.SERVER_KEY, ""mina"")));
        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName()).addParameter(Constants.CLIENT_KEY, ""mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(service.enumlength(new Type[]{}), Type.Lower);
            assertEquals(service.getSize(null), -1);
            assertEquals(service.getSize(new String[]{"""", """", """"}), 3);
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put(""aa"", ""bb"");
        for (int i = 0; i < 10; i++) {
            Set<String> set = service.keys(map);
            assertEquals(set.size(), 1);
            assertEquals(set.iterator().next(), ""aa"");
            service.invoke(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + """", ""invoke"");
        }

        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        // test netty client
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 1024 * 32 + 32; i++)
            buf.append('A');
        System.out.println(service.stringLength(buf.toString()));

        // cast to EchoService
        EchoService echo = proxy.getProxy(protocol.refer(EchoService.class, URL.valueOf(""dubbo://127.0.0.1:9010/"" + DemoService.class.getName() + ""?client=mina"")));
        for (int i = 0; i < 10; i++) {
            assertEquals(echo.$echo(buf.toString()), buf.toString());
            assertEquals(echo.$echo(""test""), ""test"");
            assertEquals(echo.$echo(""abcdefg""), ""abcdefg"");
            assertEquals(echo.$echo(1234), 1234);
        }
    }""","""@Test
    public void test_Sync_NoFuture() throws Exception {
        initOrResetUrl(false);
        initImplicitCallBackURL_onlyOnreturn();
        destroyService();
        exportService();
        referService();

        int requestId = 2;
        Person ret = demoProxy.get(requestId);
        Assert.assertEquals(requestId, ret.getId());
        Future<Person> pFuture = RpcContext.getContext().getFuture();
        Assert.assertEquals(null, pFuture);
        destroyService();
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testBindNested,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testBindNested() throws Exception {
        final Name name = new CompositeName(""nested/test"");
        final Object value = new Object();
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.bind(name, value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }
        assertEquals(value, store.lookup(name));
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.subsystem.NamingSubsystemTestCase.testCompositeBindingUpdate,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testCompositeBindingUpdate() throws Exception {
        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();
        // updates binding 'a' through composite op
        // binding-type used is lookup, op should succeed even if lookup value is set by a followup step
        final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/a"");
        final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()
                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.BINDING_TYPE, NamingSubsystemModel.LOOKUP))
                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/b""))
                .build().getOperation();
        ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.subsystem.NamingSubsystemTestCase.testOnlyExternalContextAllowsCache,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testOnlyExternalContextAllowsCache() throws Exception {
        KernelServices services = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
                .build();
        Assert.assertTrue(services.isSuccessfulBoot());

        List<ModelNode> list = parse(ModelTestUtils.readResource(this.getClass(), ""subsystem.xml""));

        for (ModelNode addOp : list) {
            PathAddress addr = PathAddress.pathAddress(addOp.require(ModelDescriptionConstants.OP_ADDR));
            if (addr.size() == 2 && addr.getLastElement().getKey().equals(NamingSubsystemModel.BINDING) && BindingType.forName(addOp.get(NamingBindingResourceDefinition.BINDING_TYPE.getName()).asString()) != BindingType.EXTERNAL_CONTEXT) {
                //Add the cache attribute and make sure it fails
                addOp.get(NamingBindingResourceDefinition.CACHE.getName()).set(true);
                services.executeForFailure(addOp);

                //Remove the cache attribute and make sure it succeeds
                addOp.remove(NamingBindingResourceDefinition.CACHE.getName());
                ModelTestUtils.checkOutcome(services.executeOperation(addOp));

                //Try to write the cache attribute, which should fail
                ModelTestUtils.checkFailed(services.executeOperation(Util.getWriteAttributeOperation(addr, NamingBindingResourceDefinition.CACHE.getName(), new ModelNode(true))));

            } else {
                ModelTestUtils.checkOutcome(services.executeOperation(addOp));
            }
        }


    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingEventCoordinatorTestCase.testFireObjectEvent,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testFireObjectEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(1);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE);

        objectListener.latch.await(1, TimeUnit.SECONDS);

        assertEquals(1, objectListener.capturedEvents.size());
        assertTrue(oneLevelListener.capturedEvents.isEmpty());
        assertTrue(subtreeListener.capturedEvents.isEmpty());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingEventCoordinatorTestCase.testFireSubTreeEvent,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testFireSubTreeEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(0);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.SUBTREE_SCOPE);

        subtreeListener.latch.await(1, TimeUnit.SECONDS);

        assertTrue(objectListener.capturedEvents.isEmpty());
        assertTrue(oneLevelListener.capturedEvents.isEmpty());
        assertEquals(1, subtreeListener.capturedEvents.size());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testBind,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testBind() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object value = new Object();
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.bind(name, value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }
        assertEquals(value, store.lookup(name));
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.subsystem.NamingSubsystemTestCase.testRejectionsEAP6,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testRejectionsEAP6() throws Exception {
        testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_6_4_0, ModelVersion.create(1, 3),""jboss-as-naming"");
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingEventCoordinatorTestCase.testFireOneLevelEvent,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testFireOneLevelEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(0);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.ONELEVEL_SCOPE);

        oneLevelListener.latch.await(1, TimeUnit.SECONDS);

        assertTrue(objectListener.capturedEvents.isEmpty());
        assertTrue(subtreeListener.capturedEvents.isEmpty());
        assertEquals(1, oneLevelListener.capturedEvents.size());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.subsystem.NamingSubsystemTestCase.testRejectionsEAP7,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testRejectionsEAP7() throws Exception {
        testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_7_0_0, ModelVersion.create(2, 0), ""wildfly-naming"");
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.subsystem.NamingSubsystemTestCase.testSubsystem,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.subsystem.NamingSubsystemTestCase.testCompositeBindingOps,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testCompositeBindingOps() throws Exception {
        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();
        // add binding 'alookup' through composite op
        // note that a binding-type of 'lookup' requires 'lookup' attr value, which in this case is set by a followup step
        final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/alookup"");
        final ModelNode addOp = Operations.createAddOperation(addr);
        addOp.get(NamingSubsystemModel.BINDING_TYPE).set(NamingSubsystemModel.LOOKUP);
        final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()
                .addStep(addOp)
                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/a""))
                .build().getOperation();
        ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingEventCoordinatorTestCase.testFireAllEvent,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testFireAllEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(1);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);

        objectListener.latch.await(1, TimeUnit.SECONDS);
        oneLevelListener.latch.await(1, TimeUnit.SECONDS);
        subtreeListener.latch.await(1, TimeUnit.SECONDS);

        assertEquals(1, objectListener.capturedEvents.size());
        assertEquals(1, subtreeListener.capturedEvents.size());
        assertEquals(1, oneLevelListener.capturedEvents.size());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingEventCoordinatorTestCase.testFireMultiLevelEvent,1,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testFireMultiLevelEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener subtreeListener = new CollectingListener(1);
        coordinator.addListener(""foo"", EventContext.SUBTREE_SCOPE, subtreeListener);

        final CollectingListener subtreeListenerTwo = new CollectingListener(1);
        coordinator.addListener(""foo/bar"", EventContext.SUBTREE_SCOPE, subtreeListenerTwo);

        final CollectingListener subtreeListenerThree = new CollectingListener(1);
        coordinator.addListener(""foo/bar/baz"", EventContext.SUBTREE_SCOPE, subtreeListenerThree);

        coordinator.fireEvent(context, new CompositeName(""foo/bar/baz/boo""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);

        subtreeListener.latch.await(1, TimeUnit.SECONDS);
        subtreeListenerTwo.latch.await(1, TimeUnit.SECONDS);
        subtreeListenerThree.latch.await(1, TimeUnit.SECONDS);

        assertEquals(1, subtreeListener.capturedEvents.size());
        assertEquals(1, subtreeListenerTwo.capturedEvents.size());
        assertEquals(1, subtreeListenerThree.capturedEvents.size());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testRebindReferenceable,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testRebindReferenceable() throws Exception {
        final Name name = new CompositeName(""test"");
        final TestObjectReferenceable referenceable = new TestObjectReferenceable(""addr"");
        namingContext.bind(name, referenceable);
        TestObjectReferenceable newReferenceable = new TestObjectReferenceable(""newAddr"");
        namingContext.rebind(name, newReferenceable);
        Object result = namingContext.lookup(name);
        assertEquals(newReferenceable.addr, result);

        //the same with security permissions
        newReferenceable = new TestObjectReferenceable(""yetAnotherNewAddr"");
        testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newReferenceable);
        result = namingContext.lookup(name);
        assertEquals(newReferenceable.addr, result);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.ServiceBasedNamingStoreTestCase.testLookupBinding,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testLookupBinding() throws Exception {
        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"");
        final Object value = new Object();
        bindObject(bindingName, value);

        final Object obj = store.lookup(new CompositeName(""foo/bar""));
        assertNotNull(obj);
        assertEquals(value, obj);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testListBindingsNameNotFound,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testListBindingsNameNotFound() throws Exception {
        try {
            namingContext.listBindings(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch (NameNotFoundException expected) {
        }

        //the same with security permissions
        try {
            testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, ""test"");
            fail(""Should have thrown and NameNotFoundException with appropriate permissions"");
        } catch (NameNotFoundException expected) {
        }
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testLookupEmptyName,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testLookupEmptyName() throws Exception {
        Object result = namingContext.lookup(new CompositeName());
        assertTrue(result instanceof NamingContext);
        result = namingContext.lookup(new CompositeName(""""));
        assertTrue(result instanceof NamingContext);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, null);
        assertTrue(result instanceof NamingContext);
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, """");
        assertTrue(result instanceof NamingContext);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testLookupReference,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testLookupReference() throws Exception {
        final Name name = new CompositeName(""test"");
        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blah"", ""test""), TestObjectFactory.class.getName(), null);
        namingStore.bind(name, reference);

        Object result = namingContext.lookup(name);
        assertEquals(""test"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
        assertEquals(""test"", result);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testRebind,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testRebind() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object value = new Object();
        namingStore.bind(name, value);
        Object newValue = new Object();
        namingContext.rebind(name, newValue);
        assertEquals(newValue, namingStore.lookup(name));

        //the same with security permissions
        newValue = new Object();
        testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newValue);
        assertEquals(newValue, namingStore.lookup(name));
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testLookupNameNotFound,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testLookupNameNotFound() throws Exception {
        try {
            namingContext.lookup(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch (NameNotFoundException expected) {
        }

        //the same with security permissions
        try {
            testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
            fail(""Should have thrown and NameNotFoundException with appropriate permissions"");
        } catch (NameNotFoundException expected) {
        }
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.InitialContextFactoryTestCase.testInitialFactory,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testInitialFactory() throws Exception {
        // Test with sys prop
        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
        InitialContext initialContext = new InitialContext();
        Context context = (Context) initialContext.lookup("""");
        assertTrue(context instanceof NamingContext);

        // Test with builder
        if (!NamingManager.hasInitialContextFactoryBuilder()) {
            NamingManager.setInitialContextFactoryBuilder(new InitialContextFactoryBuilder());
        }
        initialContext = new InitialContext();
        context = (Context) initialContext.lookup("""");
        assertTrue(context instanceof NamingContext);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testLookupWitResolveResult,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testLookupWitResolveResult() throws Exception {
        namingStore.bind(new CompositeName(""test/nested""), ""test"");

        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blahh"", ""test""), TestObjectFactoryWithNameResolution.class.getName(), null);
        namingStore.bind(new CompositeName(""comp""), reference);

        Object result = namingContext.lookup(new CompositeName(""comp/nested""));
        assertEquals(""test"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test/nested"", ""lookup"")), namingContext, ""comp/nested"");
        assertEquals(""test"", result);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testListWithContinuation,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    @SuppressWarnings(""unchecked"")
    public void testListWithContinuation() throws Exception {
        bindListWithContinuations();

        NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName(""comp""));
        checkListWithContinuationsResults(results);

        //the same with security permissions
        results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, Arrays.asList(
                new JndiPermission(""test"", ""list"")), namingContext, ""comp"");

        checkListWithContinuationsResults(results);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testLookupLink,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testLookupLink() throws Exception {
        final Name name = new CompositeName(""test"");
        namingStore.bind(name, ""testValue"", String.class);
        final Name linkName = new CompositeName(""link"");
        namingStore.bind(linkName, new LinkRef(""./test""));
        Object result = namingContext.lookup(linkName);
        assertEquals(""testValue"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");
        assertEquals(""testValue"", result);

        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
        namingStore.rebind(linkName, new LinkRef(name));
        result = namingContext.lookup(linkName);
        assertEquals(""testValue"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");
        assertEquals(""testValue"", result);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testBindReferenceable,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    public void testBindReferenceable() throws Exception {
        Name name = new CompositeName(""test"");
        final TestObjectReferenceable referenceable = new TestObjectReferenceable(""addr"");
        namingContext.bind(name, referenceable);
        Object result = namingContext.lookup(name);
        assertEquals(referenceable.addr, result);

        //the same with security permissions
        name = new CompositeName(""securitytest"");
        testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", referenceable);
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""securitytest"");
        assertEquals(referenceable.addr, result);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,naming,org.jboss.as.naming.WritableServiceBasedNamingStoreTestCase.testPermissions,org.jboss.as.naming.NamingContextTestCase.testListBindingsWithContinuation,0,"""@Test
    public void testPermissions() throws Exception {

        final NamingContext namingContext = new NamingContext(store, null);
        final String name = ""a/b"";
        final Object value = new Object();
        ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();

        // simple bind test, note that permission must have absolute path
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            permissions.add(new JndiPermission(store.getBaseName()+""/""+name,""bind,list,listBindings""));
            store.bind(new CompositeName(name), value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        // all of these lookup should work
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
                permissions.set(0,new JndiPermission(store.getBaseName()+""/a/*"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/a/-"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(""<<ALL BINDINGS>>"",JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name));
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, store.getBaseName()+""/""+name));
        NamingContext aNamingContext = (NamingContext) namingContext.lookup(""a"");
        permissions.set(0,new JndiPermission(store.getBaseName()+""/""+name,JndiPermission.ACTION_LOOKUP));
        assertEquals(value, testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, aNamingContext, ""b""));
        // this lookup should not work, no permission
        try {
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, Collections.<JndiPermission>emptyList(), namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // a permission which only allows entries in store.getBaseName()
        try {
            permissions.set(0,new JndiPermission(store.getBaseName()+""/*"",JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        // permissions which are not absolute paths (do not include store base name, i.e. java:)
        try {
            permissions.set(0,new JndiPermission(name,JndiPermission.ACTION_LOOKUP));
            testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
            fail(""Should have failed due to missing permission"");
        } catch (AccessControlException e) {

        }
        if (! ""java:"".equals(store.getBaseName().toString())) {
            try {
                permissions.set(0,new JndiPermission(""/""+name,JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {

            }
            try {
                permissions.set(0,new JndiPermission(""/-"",JndiPermission.ACTION_LOOKUP));
                testActionWithPermission(JndiPermission.ACTION_LOOKUP, permissions, namingContext, name);
                fail(""Should have failed due to missing permission"");
            } catch (AccessControlException e) {
            }
        }
    }""","""@Test
    @SuppressWarnings(""unchecked"")
    public void testListBindingsWithContinuation() throws Exception {
        bindListWithContinuations();

        NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName(""comp""));
        checkListWithContinuationsResults(results);

        //the same with security permissions
        results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, Arrays.asList(
                new JndiPermission(""test"", ""listBindings"")), namingContext, ""comp"");

        checkListWithContinuationsResults(results);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSchema,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSchema() throws Exception {
        String schemaPath = getSubsystemXsdPath();
        Assume.assumeTrue(""getSubsystemXsdPath() has been overridden to disable the validation of the subsystem templates"",
                schemaPath != null);
        SchemaValidator.validateXML(getSubsystemXml(), schemaPath, getResolvedProperties());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv11UnitTestCase.testSchema,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSchema() throws Exception {
        String schemaPath = getSubsystemXsdPath();
        Assume.assumeTrue(""getSubsystemXsdPath() has been overridden to disable the validation of the subsystem templates"",
                schemaPath != null);
        SchemaValidator.validateXML(getSubsystemXml(), schemaPath, getResolvedProperties());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv11UnitTestCase.testSubsystem,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.JSSEExpressionsUnitTestCase.testSubsystem,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityTransformersTestCase.testSubsystem,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv20UnitTestCase.testSchema,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSchema() throws Exception {
        String schemaPath = getSubsystemXsdPath();
        Assume.assumeTrue(""getSubsystemXsdPath() has been overridden to disable the validation of the subsystem templates"",
                schemaPath != null);
        SchemaValidator.validateXML(getSubsystemXml(), schemaPath, getResolvedProperties());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv20UnitTestCase.testSubsystem,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.JSSEExpressionsUnitTestCase.testSchema,1,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testSchema() throws Exception {
        String schemaPath = getSubsystemXsdPath();
        Assume.assumeTrue(""getSubsystemXsdPath() has been overridden to disable the validation of the subsystem templates"",
                schemaPath != null);
        SchemaValidator.validateXML(getSubsystemXml(), schemaPath, getResolvedProperties());
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv20UnitTestCase.testSchemaOfSubsystemTemplates,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    @Override
    public void testSchemaOfSubsystemTemplates() throws Exception {
        super.testSchemaOfSubsystemTemplates();
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testOrder,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testOrder() throws Exception {
        KernelServices service = createKernelServicesBuilder(createAdditionalInitialization())
                .setSubsystemXmlResource(""securitysubsystemv12.xml"")
                .build();
        PathAddress address = PathAddress.pathAddress().append(""subsystem"", ""security"").append(""security-domain"", ""ordering"");
        address = address.append(""authentication"", ""classic"");

        ModelNode writeOp = Util.createOperation(""write-attribute"", address);
        writeOp.get(""name"").set(""login-modules"");
        for (int i = 1; i <= 6; i++) {
            ModelNode module = writeOp.get(""value"").add();
            module.get(""code"").set(""module-"" + i);
            module.get(""flag"").set(""optional"");
            module.get(""module-options"");

        }
        service.executeOperation(writeOp);
        ModelNode readOp = Util.createOperation(""read-attribute"", address);
        readOp.get(""name"").set(""login-modules"");
        ModelNode result = service.executeForResult(readOp);
        List<ModelNode> modules = result.asList();
        Assert.assertEquals(""There should be exactly 6 modules but there are not"", 6, modules.size());
        for (int i = 1; i <= 6; i++) {
            ModelNode module = modules.get(i - 1);
            Assert.assertEquals(module.get(""code"").asString(), ""module-"" + i);
        }
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.JSSEParsingUnitTestCase.testParseMissingPasswordJSSE,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testParseMissingPasswordJSSE() throws Exception {
        try {
            parse(""securityErrorMissingPassword.xml"");
            Assert.fail(""There should have been an error."");
        } catch (XMLStreamException ex) {
            Assert.assertTrue(ex.getMessage(), ex.getMessage().contains(""WFLYSEC0023""));
        }
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.JSSEParsingUnitTestCase.testParseWrongJSSE,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testParseWrongJSSE() throws Exception {
        try {
            parse(""securityParserError.xml"");
            Assert.fail(""There should have been an error."");
        } catch (XMLStreamException ex) {
            Assert.assertTrue(ex.getMessage(), ex.getMessage().contains(""WFLYSEC0023""));
        }
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.JSSEParsingUnitTestCase.testParseValidJSSE,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testParseValidJSSE() throws Exception {
        parse(""securityParserValidJSSE.xml"");

    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv1UnitTestCase.testParseAndMarshalModel,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testParseAndMarshalModel() throws Exception {

        //Parse the subsystem xml and install into the first controller
        String subsystemXml = readResource(""securitysubsystemv1.xml"");

        KernelServices servicesA = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
                .setSubsystemXml(subsystemXml)
                .build();
        //Get the model and the persisted xml from the first controller
        ModelNode modelA = servicesA.readWholeModel();
        String marshalled = servicesA.getPersistedSubsystemXml();
        servicesA.shutdown();

        //Install the persisted xml from the first controller into a second controller
        KernelServices servicesB = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
                .setSubsystemXml(marshalled)
                .build();
        ModelNode modelB = servicesB.readWholeModel();

        //Make sure the models from the two controllers are identical
        super.compare(modelA, modelB);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityDomainModelv1UnitTestCase.testParseAndMarshalModelWithJASPI,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testParseAndMarshalModelWithJASPI() throws Exception {
        //Parse the subsystem xml and install into the first controller
        String subsystemXml = readResource(""securitysubsystemJASPIv1.xml"");

        KernelServices servicesA = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
                .setSubsystemXml(subsystemXml)
                .build();
        //Get the model and the persisted xml from the first controller
        ModelNode modelA = servicesA.readWholeModel();
        String marshalled = servicesA.getPersistedSubsystemXml();
        servicesA.shutdown();

        //Install the persisted xml from the first controller into a second controller
        KernelServices servicesB = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
                .setSubsystemXml(marshalled)
                .build();
        ModelNode modelB = servicesB.readWholeModel();

        //Make sure the models from the two controllers are identical
        super.compare(modelA, modelB);

        assertRemoveSubsystemResources(servicesB);
    }"""
wildfly/wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993,security/subsystem,org.jboss.as.security.SecurityDomainModelv12UnitTestCase.testSubsystem,org.jboss.as.security.SecurityTransformersTestCase.testTransformersEAP64,0,"""@Test
    public void testSubsystem() throws Exception {
        standardSubsystemTest(null);
    }""","""@Test
    public void testTransformersEAP64() throws Exception {
        testTransformers(ModelTestControllerVersion.EAP_6_4_0);
    }"""
spring-projects/spring-boot,daa3d457b71896a758995c264977bdd1414ee4d4,spring-boot-project/spring-boot-test-autoconfigure,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverIntegrationTests.shouldBeADifferentWebClient,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverIntegrationTests.shouldAutoConfigureWebClient,1,"""@Test
public void shouldBeADifferentWebClient() {
this.webDriver.get(""/html"");
WebElement element = this.webDriver.findElement(By.tagName(""body""));
assertThat(element.getText()).isEqualTo(""Hello"");
try {
ReflectionTestUtils.invokeMethod(previousWebDriver, ""getCurrentWindow"");
fail(""Did not call quit()"");
}
catch (NoSuchWindowException ex) {
// Expected
}
assertThat(previousWebDriver).isNotNull().isNotSameAs(this.webDriver);
}""","""@Test
public void shouldAutoConfigureWebClient() {
this.webDriver.get(""/html"");
WebElement element = this.webDriver.findElement(By.tagName(""body""));
assertThat(element.getText()).isEqualTo(""Hello"");
WebMvcTestWebDriverIntegrationTests.previousWebDriver = this.webDriver;
}"""
spring-projects/spring-boot,daa3d457b71896a758995c264977bdd1414ee4d4,spring-boot-project/spring-boot-test-autoconfigure,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverCustomScopeIntegrationTests.shouldBeTheSameWebClient,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverCustomScopeIntegrationTests.shouldAutoConfigureWebClient,1,"""@Test
public void shouldBeTheSameWebClient() {
assertThat(previousWebDriver).isNotNull().isSameAs(this.webDriver);
}""","""@Test
public void shouldAutoConfigureWebClient() {
WebMvcTestWebDriverCustomScopeIntegrationTests.previousWebDriver = this.webDriver;
}"""
spring-projects/spring-boot,daa3d457b71896a758995c264977bdd1414ee4d4,spring-boot-project/spring-boot-test-autoconfigure,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverIntegrationTests.shouldBeADifferentWebClient,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverCustomScopeIntegrationTests.shouldAutoConfigureWebClient,0,"""@Test
public void shouldBeADifferentWebClient() {
this.webDriver.get(""/html"");
WebElement element = this.webDriver.findElement(By.tagName(""body""));
assertThat(element.getText()).isEqualTo(""Hello"");
try {
ReflectionTestUtils.invokeMethod(previousWebDriver, ""getCurrentWindow"");
fail(""Did not call quit()"");
}
catch (NoSuchWindowException ex) {
// Expected
}
assertThat(previousWebDriver).isNotNull().isNotSameAs(this.webDriver);
}""","""@Test
public void shouldAutoConfigureWebClient() {
WebMvcTestWebDriverCustomScopeIntegrationTests.previousWebDriver = this.webDriver;
}"""
spring-projects/spring-boot,daa3d457b71896a758995c264977bdd1414ee4d4,spring-boot-project/spring-boot-test-autoconfigure,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverIntegrationTests.shouldBeADifferentWebClient,org.springframework.boot.test.autoconfigure.web.servlet.mockmvc.WebMvcTestWebDriverCustomScopeIntegrationTests.shouldBeTheSameWebClient,0,"""@Test
public void shouldBeADifferentWebClient() {
this.webDriver.get(""/html"");
WebElement element = this.webDriver.findElement(By.tagName(""body""));
assertThat(element.getText()).isEqualTo(""Hello"");
try {
ReflectionTestUtils.invokeMethod(previousWebDriver, ""getCurrentWindow"");
fail(""Did not call quit()"");
}
catch (NoSuchWindowException ex) {
// Expected
}
assertThat(previousWebDriver).isNotNull().isNotSameAs(this.webDriver);
}""","""@Test
public void shouldBeTheSameWebClient() {
assertThat(previousWebDriver).isNotNull().isSameAs(this.webDriver);
}"""
spring-projects/spring-boot,daa3d457b71896a758995c264977bdd1414ee4d4,spring-boot-project/spring-boot-test,org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.test002,org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.test001,1,"""@Test
public void test002() {
assertThat(getMock(""none"").greeting()).isEqualTo(""none"");
assertThat(getMock(""before"").greeting()).isNull();
assertThat(getMock(""after"").greeting()).isNull();
}""","""@Test
public void test001() {
given(getMock(""none"").greeting()).willReturn(""none"");
given(getMock(""before"").greeting()).willReturn(""before"");
given(getMock(""after"").greeting()).willReturn(""after"");
}"""
spring-projects/spring-boot,daa3d457b71896a758995c264977bdd1414ee4d4,spring-boot-project/spring-boot-test,org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListenerTests.test002,org.springframework.boot.test.util.TestPropertyValuesTests.applyToEnvironmentShouldAttachConfigurationPropertySource,0,"""@Test
public void test002() {
assertThat(getMock(""none"").greeting()).isEqualTo(""none"");
assertThat(getMock(""before"").greeting()).isNull();
assertThat(getMock(""after"").greeting()).isNull();
}""","""@Test
	public void applyToEnvironmentShouldAttachConfigurationPropertySource() {
		TestPropertyValues.of(""foo.bar=baz"").applyTo(this.environment);
		PropertySource<?> source = this.environment.getPropertySources()
				.get(""configurationProperties"");
		assertThat(source).isNotNull();
	}"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_example,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_example() throws Exception {
    User u = new User(""findOneByProperty"", ""findOneByProperty"", ""findOneByProperty@163.com"");
    userRepository.save(u);
    u.setEmailAddress(""FINDOneByProperty"");
    List<User> result1 = userRepository.findAll(Example.of(u, ExampleMatcher.matchingAll()
            .withIgnoreCase(true)
            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)));
    assertEquals(1, result1.size());
    assertEquals(""findOneByProperty"", result1.get(0).getFullName().getLastName());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath_pageable,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath_pageable() throws Exception {
    User u = new User(""findAll_fetchPath_pageable"", ""findAll_fetchPath_pageable"", ""findAll_fetchPath_pageable@163.com"");
    userRepository.save(u);
    Page<User> page = userRepository.findAll(""fullName(lastName)"",
            PageRequest.of(0, 20, Sort.Direction.DESC, ""id""));
    assertNotNull(page);
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.updateQuery,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void updateQuery() throws Exception {
    assertNotNull(userRepository.updateQuery());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteAll_entities,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void deleteAll_entities() throws Exception {
    List<User> users = new ArrayList<>(3);
    for (int i = 0; i < 3; i++) {
      User u = new User();
      u.setId(i + 1L);
      users.add(u);
    }
    userRepository.deleteAll(users);
    users = userRepository.findAllById(Arrays.asList(1L, 2L, 3L));
    assertEquals(0, users.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll() throws Exception {
    List<User> users = userRepository.findAll();
    assertEquals(1, users.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAllByProperty_fetchPath_sort,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAllByProperty_fetchPath_sort() throws Exception {
    User u = new User(""findAllByProperty_fetchPath_sort"", ""findAllByProperty_fetchPath_sort"", ""findAllByProperty_fetchPath_sort@163.com"");
    userRepository.save(u);
    List<User> users = userRepository.findAllByProperty(""fullName(lastName)"",
            ""id"", u.getId(),
            Sort.by(Sort.Direction.DESC, ""id""));
    assertNotEquals(0, users.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findUserByEmailAddressEqualsOql_pageable,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findUserByEmailAddressEqualsOql_pageable() {
    Page<User> page = userRepository.findUserByEmailAddressEqualsOql(""yuanxuegui@163.com"", PageRequest.of(0, 20, Sort.Direction.DESC, ""id""));
    assertNotNull(page);
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.testDomainEvent,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void testDomainEvent() {
    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);
    assertEquals(""yuanxuegui@126.com"", u.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.createNamedDtoQuery,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void createNamedDtoQuery() {
    UserDTO userDTO = queryChannel.createNamedDtoQuery(UserDTO.class, ""byEmail"")
        .setParameter(""emailAddress"", ""testquerychannel@163.com"")
        .findOne();
    assertEquals(""QueryChannel"", userDTO.getFirstName());
    assertEquals(""testquerychannel@163.com"", userDTO.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.save,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void save() throws Exception {
    User u = new User(""test"", ""test"", ""test@163.com"");
    u = userRepository.save(u);
    assertNotNull(u.getId());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findOne_example,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findOne_example() throws Exception {
    User u = new User(""findOne_example"", ""findOne_example"", ""findOne_example@163.com"");
    userRepository.save(u);
    User userExample = new User(""example"", ""example"", ""example"");
    assertEquals(true, userRepository.findOne(Example.of(userExample, ExampleMatcher.matchingAll()
            .withIgnoreCase(true)
            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING))).isPresent());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAllById,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAllById() throws Exception {
    User u = new User(""findAllById"", ""findAllById"", ""findAllById@163.com"");
    userRepository.save(u);
    List<User> users = userRepository.findAllById(Arrays.asList(u.getId()));
    assertEquals(1, users.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.createNamedQuery,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void createNamedQuery() {
    UserInfo userInfo = queryChannel.createNamedQuery(UserInfo.class,
        ""userInfoByEmail"").setParameter(""emailAddress"",
        ""testquerychannel@163.com"").findOne();
    assertEquals(""QueryChannel"", userInfo.getFirstName());
    assertEquals(""testquerychannel@163.com"", userInfo.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.applyQueryObject,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void applyQueryObject() {
    UserQuery userQuery = new UserQuery();
    userQuery.setEmailAddress(""testquerychannel@163.com"");
    userQuery.setAgeStart(1);
    userQuery.setAgeEnd(30);
    UserInfo userInfo = EbeanQueryChannelService.applyWhere(queryChannel.createNamedQuery(UserInfo.class,
            ""userInfo"").where(), userQuery).findOne();
    assertEquals(""QueryChannel"", userInfo.getFirstName());
    assertEquals(""testquerychannel@163.com"", userInfo.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.existsById,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void existsById() throws Exception {
    User u = new User(""existsById"", ""existsById"", ""existsById@163.com"");
    userRepository.save(u);
    User userExample = new User(""existsById"", ""existsById"", ""existsById"");
    assertEquals(true, userRepository.existsById(u.getId()));
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findByProperty,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findByProperty() throws Exception {
    User u = new User(""findOneByProperty"", ""findOneByProperty"", ""findOneByProperty@163.com"");
    userRepository.save(u);
    User u1 = userRepository.findByProperty(""id"", u.getId()).get();
    assertEquals(""findOneByProperty@163.com"", u1.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath_sort,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath_sort() throws Exception {
    User u = new User(""findAll_fetchPath_ids"", ""findAll_fetchPath_ids"", ""findAll_fetchPath_ids@163.com"");
    userRepository.save(u);
    List<User> result1 = userRepository.findAll(""fullName(lastName)"",
            Sort.by(Sort.Direction.DESC, ""id""));
    assertNotEquals(1, result1.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.updateAll,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void updateAll() throws Exception {
    List<User> users = new ArrayList<>(3);
    for (int i = 0; i < 3; i++) {
      User u = new User();
      u.setId(i + 1L);
      u.setAge(32);
      users.add(u);
    }
    userRepository.updateAll(users);
    users = userRepository.findAllById(Arrays.asList(1L, 2L, 3L));
    for (User u : users) {
      assertEquals(32, u.getAge());
    }
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.createDtoQuery,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void createDtoQuery() {
    String sql = ""select first_name, last_name, email_address from user where email_address = :emailAddress"";
    UserDTO userDTO = queryChannel.createDtoQuery(UserDTO.class, sql)
        .setParameter(""emailAddress"", ""testquerychannel@163.com"")
        .findOne();
    assertEquals(""QueryChannel"", userDTO.getFirstName());
    assertEquals(""testquerychannel@163.com"", userDTO.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAllByProperty_fetchPath,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAllByProperty_fetchPath() throws Exception {
    User u = new User(""findOneByProperty"", ""findOneByProperty"", ""findOneByProperty@163.com"");
    userRepository.save(u);
    List<User> users = userRepository.findAllByProperty(""fullName(lastName)"", ""id"", u.getId());
    assertNotEquals(0, users.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAllByProperty,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAllByProperty() throws Exception {
    User u = new User(""findOneByProperty"", ""findOneByProperty"", ""findOneByProperty@163.com"");
    userRepository.save(u);
    List<User> users = userRepository.findAllByProperty(""id"", u.getId());
    assertNotEquals(0, users.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.update,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void update() throws Exception {
    User u = new User(""update"", ""update"", ""update@163.com"");
    userRepository.save(u);

    User u1 = new User();
    u1.setId(u.getId());
    u1.setAge(31);
    userRepository.update(u1);
    u = userRepository.findById(u.getId()).get();
    assertEquals(31, u.getAge());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findById,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findById() throws Exception {
    User u = new User(""findById"", ""findById"", ""findById@163.com"");
    userRepository.save(u);
    assertEquals(true, userRepository.findById(u.getId()).isPresent());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_example_sort,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_example_sort() throws Exception {
    User u = new User(""findAll_example_sort"", ""findAll_example_sort"", ""findAll_example_sort@163.com"");
    userRepository.save(u);
    u.setEmailAddress(""findAll_example_sort"");
    List<User> result1 = userRepository.findAll(Example.of(u, ExampleMatcher.matchingAll()
                    .withIgnoreCase(true)
                    .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)),
            Sort.by(Sort.Direction.DESC, ""id"")
    );
    assertEquals(1, result1.size());
    assertEquals(""findAll_example_sort"", result1.get(0).getFullName().getLastName());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findById_fetchPath,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findById_fetchPath() throws Exception {
    User u = new User(""find"", ""find"", ""find@163.com"");
    userRepository.save(u);
    u = userRepository.findById(""emailAddress"", u.getId()).get();
    assertEquals(""find@163.com"", u.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.count_example,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void count_example() throws Exception {
    User u = new User(""count_example"", ""count_example"", ""count_example@163.com"");
    userRepository.save(u);
    User userExample = new User(""count_example"", ""count_example"", ""count_example"");
    assertEquals(1, userRepository.count(Example.of(userExample, ExampleMatcher.matchingAll()
            .withIgnoreCase(true)
            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING))));
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.testFindByMethodName,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void testFindByMethodName() {
    List<User> result1 = userRepository.findAllByEmailAddressAndFullNameLastName(""yuanxuegui@163.com"", ""Yuan"");
    assertEquals(1, result1.size());
    assertEquals(""Yuan"", result1.get(0).getFullName().getLastName());
    assertThat(result1, hasItem(user));
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath_ids,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath_ids() throws Exception {
    User u = new User(""findAll_fetchPath_ids"", ""findAll_fetchPath_ids"", ""findAll_fetchPath_ids@163.com"");
    userRepository.save(u);
    List<User> result1 = userRepository.findAll(""fullName(lastName)"", Arrays.asList(u.getId()));
    assertEquals(1, result1.size());
    assertEquals(""findAll_fetchPath_ids"", result1.get(0).getFullName().getLastName());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.query_queryObject,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void query_queryObject() {
    UserQuery userQuery = new UserQuery();
    userQuery.setEmailAddress(""testquerychannel@163.com"");
    userQuery.setAgeStart(1);
    userQuery.setAgeEnd(30);

    User user = queryChannel.createQuery(User.class, userQuery)
            .findOne();
    assertEquals(""testquerychannel@163.com"", user.getEmailAddress());

    UserDTO userDTO = queryChannel.createQuery(User.class, userQuery)
            .asDto(UserDTO.class)
            .setRelaxedMode()
            .findOne();
    assertEquals(""testquerychannel@163.com"", userDTO.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.count,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void count() throws Exception {
    User u = new User(""findOne_example"", ""findOne_example"", ""findOne_example@163.com"");
    userRepository.save(u);
    User userExample = new User(""example"", ""example"", ""example"");
    assertEquals(true, userRepository.findOne(Example.of(userExample, ExampleMatcher.matchingAll()
            .withIgnoreCase(true)
            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING))).isPresent());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findByProperty_fetchPath,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findByProperty_fetchPath() throws Exception {
    User u = new User(""findOneByProperty_fetchPath"", ""findOneByProperty_fetchPath"", ""findOneByProperty_fetchPath@163.com"");
    userRepository.save(u);
    User u1 = userRepository.findByProperty(""id,emailAddress"", ""id"", u.getId()).get();
    assertEquals(""findOneByProperty_fetchPath@163.com"", u1.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.queryAndMethod,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void queryAndMethod() {
    // test find all orm query
    List<User> result1 = (List<User>) userRepository.findAll();
    result1.forEach(it -> System.out.println(it));
    assertEquals(1, result1.size());
    assertEquals(""Yuan"", result1.get(0).getFullName().getLastName());
    assertThat(result1, hasItem(user));

    // test find list orm query
    List<User> result2 = userRepository.findByLastnameOql(""Yuan"");
    assertEquals(1, result2.size());
    assertEquals(""Yuan"", result2.get(0).getFullName().getLastName());
    assertThat(result2, hasItem(user));

    // test find list sql query
    List<User> result3 = userRepository.findUsersByLastNameEquals(""Yuan"");
    assertEquals(1, result3.size());
    assertEquals(""Yuan"", result3.get(0).getFullName().getLastName());

    // test find one orm query
    User result4 = userRepository.findUserByEmailAddressEqualsOql(""yuanxuegui@163.com"");
    assertEquals(""yuanxuegui@163.com"", result4.getEmailAddress());

    // test find one sql query
    User result5 = userRepository.findUserByEmailAddressEquals(""yuanxuegui@163.com"");
    assertEquals(""yuanxuegui@163.com"", result5.getEmailAddress());

    // test update orm query
    int result6 = userRepository.changeUserEmailAddress(""yuanxuegui@163.com"", ""yuanxuegui@126.com"");
    assertEquals(1, result6);

    // test find list orm query
    List<User> result7 = userRepository.findByLastnameOql(""Yuan"");
    assertEquals(""yuanxuegui@126.com"", result7.get(0).getEmailAddress());

    // test delete sql query
    int result8 = userRepository.deleteUserByEmailAddress(""yuanxuegui@126.com"");
    assertEquals(1, result8);

    // test find one sql query
    User result9 = userRepository.findUserByEmailAddressEquals(""yuanxuegui@126.com"");
    assertNull(result9);

    // test create
    user = new User(""Xuegui"", ""Yuan"", ""yuanxuegui@163.com"");
    user.setAge(29);
    user = userRepository.save(user);

    // test find list named orm query
    List<User> result10 = userRepository.findByLastNameNamedOql(""Yuan"");
    assertEquals(1, result10.size());
    assertEquals(""Yuan"", result10.get(0).getFullName().getLastName());

    // test find one orm query
    User result11 = userRepository.findUserByEmailAddressEquals(""yuanxuegui@163.com"");
    assertNotNull(result11);

    // test delete orm update
    int result12 = userRepository.deleteUserByEmailAddressOql(""yuanxuegui@163.com"");
    assertEquals(1, result12);

    // test find one sql query
    User result13 = userRepository.findUserByEmailAddressEquals(""yuanxuegui@163.com"");
    assertNull(result13);
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.createNamedQueryWhere,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void createNamedQueryWhere() {
    UserInfo userInfo = queryChannel.createNamedQuery(UserInfo.class,
        ""userInfo"").where()
        .eq(""emailAddress"", ""testquerychannel@163.com"").findOne();
    assertEquals(""QueryChannel"", userInfo.getFirstName());
    assertEquals(""testquerychannel@163.com"", userInfo.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath_example,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath_example() throws Exception {
    User u = new User(""findAll_fetchPath_example"", ""findAll_fetchPath_example"", ""findAll_fetchPath_example@163.com"");
    userRepository.save(u);
    u.setEmailAddress(""FINDAll_fetchPath_example"");
    List<User> result1 = userRepository.findAll(""fullName(lastName)"", Example.of(u, ExampleMatcher.matchingAll()
            .withIgnoreCase(true)
            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)));
    assertEquals(1, result1.size());
    assertEquals(""findAll_fetchPath_example"", result1.get(0).getFullName().getLastName());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_pageable,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_pageable() {
    Page<User> page = userRepository.findAll(PageRequest.of(0, 20, Sort.Direction.DESC, ""id""));
    assertNotNull(page);
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.testAuditable,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void testAuditable() {
    User u = userRepository.findUserByEmailAddressEqualsOql(""yuanxuegui@163.com"");
    assertEquals(""test"", u.getCreatedBy().orElse(null));
    assertEquals(""test"", u.getLastModifiedBy().orElse(null));
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_sort,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_sort() throws Exception {
    User u = new User(""findAll_sort"", ""findAll_sort"", ""findAll_sort@163.com"");
    userRepository.save(u);
    List<User> result1 = userRepository.findAll(Sort.by(Sort.Direction.DESC, ""id""));
    assertNotEquals(0, result1.size());
    assertEquals(""findAll_sort"", result1.get(0).getFullName().getLastName());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.saveAll,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void saveAll() throws Exception {
    List<User> users = new ArrayList<>(3);
    for (int i = 0; i < 3; i++) {
      users.add(new User(""test"", ""test"" + i, ""test"" + i + ""@163.com""));
    }
    userRepository.saveAll(users);
    for (User u : users) {
      assertNotNull(u.getId());
    }
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath_example_pageable,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath_example_pageable() throws Exception {
    User userExample = new User(""X"", ""Y"", ""y"");
    Page<User> page = userRepository.findAll(""fullName(lastName)"", Example.of(userExample),
            PageRequest.of(0, 20, Sort.Direction.DESC, ""id""));
    assertNotNull(page);
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.delete,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void delete() throws Exception {
    User u = new User();
    u.setId(1L);
    userRepository.delete(u);
    assertEquals(false, userRepository.findById(1L).isPresent());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_example_pageable,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_example_pageable() throws Exception {
    User userExample = new User(""X"", ""Y"", ""y"");
    Page<User> page = userRepository.findAll(Example.of(userExample),
            PageRequest.of(0, 20, Sort.Direction.DESC, ""id""));
    assertNotNull(page);
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath_example_sort,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath_example_sort() throws Exception {
    User u = new User(""findAll_fetchPath_example_sort"", ""findAll_fetchPath_example_sort"", ""findAll_fetchPath_example_sort@163.com"");
    userRepository.save(u);
    u.setEmailAddress(""FINDAll_fetchPath_example_sort"");
    List<User> result1 = userRepository.findAll(""fullName(lastName)"",
            Example.of(u, ExampleMatcher.matchingAll()
                    .withIgnoreCase(true)
                    .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)),
            Sort.by(Sort.Direction.DESC, ""fullName.lastName"")

    );
    assertEquals(1, result1.size());
    assertEquals(""findAll_fetchPath_example_sort"", result1.get(0).getFullName().getLastName());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.querychannel.EbeanQueryChannelServiceIntegrationTest.createSqlQueryMappingColumns,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void createSqlQueryMappingColumns() {
    String sql1 = ""select first_name, last_name, email_address from user where last_name= :lastName"";
    String sql2 = ""select first_name as firstName, last_name as lastName, email_address as emailAddress from user where last_name= :lastName"";
    Map<String, String> columnsMapping = new HashMap<>();
    columnsMapping.put(""first_name"", ""firstName"");
    columnsMapping.put(""last_name"", ""lastName"");

    Query<UserInfo> query1 = queryChannel.createSqlQuery(UserInfo.class,
        sql1);
    Query<UserInfo> query2 = queryChannel.createSqlQuery(UserInfo.class,
        sql2);
    Query<UserInfo> query3 = queryChannel.createSqlQueryMappingColumns(UserInfo.class,
        sql1, columnsMapping);

    query1.setParameter(""lastName"", ""Test"");
    query2.setParameter(""lastName"", ""Test"");
    query3.setParameter(""lastName"", ""Test"");
    UserInfo userInfo1 = query1.findOne();
    UserInfo userInfo2 = query2.findOne();
    UserInfo userInfo3 = query3.findOne();
    assertEquals(""QueryChannel"", userInfo1.getFirstName());
    assertEquals(""testquerychannel@163.com"", userInfo1.getEmailAddress());
    assertEquals(""QueryChannel"", userInfo2.getFirstName());
    assertEquals(""testquerychannel@163.com"", userInfo2.getEmailAddress());
    assertEquals(""QueryChannel"", userInfo3.getFirstName());
    assertEquals(""testquerychannel@163.com"", userInfo3.getEmailAddress());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.findAll_fetchPath,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void findAll_fetchPath() throws Exception {
    User u = new User(""findAll_fetchPath"", ""findAll_fetchPath"", ""findAll_fetchPath@163.com"");
    userRepository.save(u);
    List<User> result1 = userRepository.findAll(""fullName(lastName)"");
    assertNotEquals(0, result1.size());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteAll,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void deleteAll() throws Exception {
    userRepository.deleteAll();
    assertEquals(0, userRepository.count());
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.exists_example,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void exists_example() throws Exception {
    User u = new User(""exists_example"", ""exists_example"", ""exists_example@163.com"");
    userRepository.save(u);
    User userExample = new User(""exists_example"", ""exists_example"", ""exists_example"");
    assertEquals(true, userRepository.exists(Example.of(userExample, ExampleMatcher.matchingAll()
            .withIgnoreCase(true)
            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING))));
  }"""
hexagonframework/spring-data-ebean,dd11b97654982403b50dd1d5369cadad71fce410,NA,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.deleteById,org.springframework.data.ebean.repository.UserRepositoryIntegrationTest.sqlUpdateOf,1,"""@Test
  public void deleteById() throws Exception {
    userRepository.deleteById(1L);
    assertEquals(false, userRepository.findById(1L).isPresent());

    user.changeEmail(""yuanxuegui@126.com"");
    userRepository.save(user);
    User u = userRepository.findByProperty(""emailAddress"", ""yuanxuegui@126.com"").get();
    assertNotNull(u);

    userRepository.deleteById(u.getId());
  }""","""@Test
  public void sqlUpdateOf() throws Exception {
    assertNotNull(userRepository.sqlUpdateOf(""update user set age = 30 where id = ?""));
  }"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.inaccessibleStatus,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void inaccessibleStatus() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
wrf.setReturnFailingReaders(true);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.downloadNoDumpFile,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoDumpFile() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.missingDumpFile,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void missingDumpFile() throws IOException {
Path thisDumpPath = this.dmPath.resolve(""daily-20140220"");
dm.setDirectory(thisDumpPath);
WmfLocalDumpFile dumpFile = new WmfLocalDumpFile(""20140220"",
""wikidatawiki"", dm, DumpContentType.DAILY);
assertEquals(dumpFile.isAvailable(), false);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.emptyDumpProperties,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void emptyDumpProperties() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", """");
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
assertEquals(dateStamp, dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.validCurrentDumpPropertiesNewFormat,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void validCurrentDumpPropertiesNewFormat() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140508-index.html"", this.getClass());
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"", CompressionType.BZ2);
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.CURRENT, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentFullDumpFileProcessing,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testMwRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processAllRecentRevisionDumps();

assertEquals(19, mwrpStats.getTotalRevisionCount());
assertEquals(5, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllFullDumps,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllFullDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());

setLocalDump(""20140210"", DumpContentType.FULL, false);
setLocalDump(""20140123"", DumpContentType.FULL, true);
setLocalDump(""20140106"", DumpContentType.CURRENT, true);
setLocalDump(""20131201"", DumpContentType.FULL, true);
setLocalDump(""nodate"", DumpContentType.FULL, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.FULL);

String[] dumpDates = { ""20140210"", ""20140123"", ""20140106"", ""20131221"",
""20131201"" };
boolean[] dumpIsLocal = { false, true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.FULL);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(dumpFiles.get(i) instanceof WmfOnlineStandardDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoDumpFile,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoDumpFile() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllRelevantDumpsMainDumpMissing,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllRelevantDumpsMainDumpMissing() throws IOException {
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140210"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllRelevantRevisionDumps(false);

assertEquals(dumpFiles.size(), 1);
assertEquals(dumpFiles.get(0).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(0).getDateStamp(), ""20140220"");
assertTrue(dumpFiles.get(0) instanceof WmfLocalDumpFile);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.downloadNoRevisionId,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoRevisionId() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/wikidatawiki-"" + dateStamp
+ ""-pages-meta-hist-incr.xml.bz2"", ""Line1"",
CompressionType.BZ2);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.missingFullDumpProperties,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void missingFullDumpProperties() {
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);

assertFalse(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllCurrentDumps,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllCurrentDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());

setLocalDump(""20140210"", DumpContentType.CURRENT, false);
setLocalDump(""20140123"", DumpContentType.CURRENT, true);
setLocalDump(""20140106"", DumpContentType.DAILY, true);
setLocalDump(""20131201"", DumpContentType.CURRENT, true);
setLocalDump(""nodate"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.CURRENT);

String[] dumpDates = { ""20140210"", ""20140123"", ""20140106"", ""20131221"",
""20131201"" };
boolean[] dumpIsLocal = { false, true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(dumpFiles.get(i) instanceof WmfOnlineStandardDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllDailyDumps,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllDailyDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/"",
""/other-incr-wikidatawiki-index.html"", this.getClass());

setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.CURRENT, true);
setLocalDump(""20140215"", DumpContentType.DAILY, false);
setLocalDump(""20140205"", DumpContentType.DAILY, true);
setLocalDump(""nodate"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.DAILY);

String[] dumpDates = { ""20140221"", ""20140220"", ""20140219"", ""20140218"",
""20140217"", ""20140216"", ""20140215"", ""20140214"", ""20140213"",
""20140212"", ""20140211"", ""20140210"", ""20140209"", ""20140208"",
""20140205"" };
boolean[] dumpIsLocal = { false, true, false, false, false, false,
false, false, false, false, false, false, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(
""Dumpfile "" + dumpFiles.get(i) + "" should be local."",
dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(""Dumpfile "" + dumpFiles.get(i)
+ "" should be online."",
dumpFiles.get(i) instanceof WmfOnlineDailyDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.validDumpProperties,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void validDumpProperties() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/wikidatawiki-"" + dateStamp
+ ""-pages-meta-hist-incr.xml.bz2"", ""Line1"",
CompressionType.BZ2);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertTrue(dump.isAvailable()); // second time should use cached entry
assertEquals(dateStamp, dump.getDateStamp());
assertEquals(""wikidatawiki"", dump.getProjectName());
assertEquals(""wikidatawiki-daily-"" + dateStamp, dump.toString());
assertEquals(DumpContentType.DAILY, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.inaccessibleCurrentDumpProperties,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void inaccessibleCurrentDumpProperties() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
wrf.setReturnFailingReaders(true);

MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

assertFalse(dump.isAvailable());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoRevisionId,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoRevisionId() throws IOException {
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllCurrentDumpsOffline,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllCurrentDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.CURRENT, true);
setLocalDump(""20140205"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.CURRENT);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllDailyDumpsOffline,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllDailyDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140205"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.DAILY);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.directoryDoesNotExist,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IllegalArgumentException.class)
public void directoryDoesNotExist() {
new WmfLocalDumpFile(""20140220"", ""wikidatawiki"", dm,
DumpContentType.DAILY);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoMd5sum,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoMd5sum() throws IOException {
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.directoryNotReadable,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IllegalArgumentException.class)
public void directoryNotReadable() throws IOException {
MockDirectoryManager dm = Mockito.mock(MockDirectoryManager.class);
Mockito.when(dm.hasSubdirectory(""daily-20140220"")).thenReturn(true);
Mockito.doThrow(new IOException()).when(dm)
.getSubdirectoryManager(""daily-20140220"");

new WmfLocalDumpFile(""20140220"", ""wikidatawiki"", dm,
DumpContentType.DAILY);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testBuggyJsonProcessing,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testBuggyJsonProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-with-bugs.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertTrue(timer.entityCount >= 3);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllFullDumpsOffline,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllFullDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.FULL, true);
setLocalDump(""20140205"", DumpContentType.FULL, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.FULL);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.FULL);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.SitesTest.getSiteInformation,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getSiteInformation() throws IOException {
Path dumpFilePath = this.dmPath.resolve(""dumpfiles"").resolve(
""wikidatawiki"");
Path thisDumpPath = dumpFilePath.resolve(DumpContentType.SITES
.toString().toLowerCase() + ""-"" + ""20140420"");
dm.setDirectory(dumpFilePath);
dm.setDirectory(thisDumpPath);

URL resourceUrl = this.getClass().getResource(
""/wikidatawiki-20140420-sites.sql"");
Path filePath = thisDumpPath.resolve(""wikidatawiki-"" + ""20140420""
+ WmfDumpFile.getDumpFilePostfix(DumpContentType.SITES));
dm.setFileContents(filePath, MockStringContentFactory.getStringFromUrl(resourceUrl),
WmfDumpFile.getDumpFileCompressionType(filePath.toString()));

this.dpc.setOfflineMode(true);

DataObjectFactory factory = new DataObjectFactoryImpl();
SiteLink siteLink = factory.getSiteLink(""Douglas Adams"", ""dewiki"",
Collections.emptyList());

Sites sites = this.dpc.getSitesInformation();

assertEquals(""en"", sites.getLanguageCode(""enwikivoyage""));
// Test sites with protocol-relative URLs:
assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//de.wikipedia.org/wiki/Douglas_Adams"",
sites.getSiteLinkUrl(siteLink));
assertEquals(
SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//ar.wikipedia.org/wiki/%D8%AF%D9%88%D8%BA%D9%84%D8%A7%D8%B3_%D8%A2%D8%AF%D9%85%D8%B2"",
sites.getPageUrl(""arwiki"", ""ﾘｯ�ｿｽ?ﾘｺ�ｿｽ?ﾘｧﾘｳ_ﾘ｢ﾘｯ�ｿｽ?ﾘｲ""));
assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//en.wikipedia.org/w/api.php"",
sites.getFileUrl(""enwiki"", ""api.php""));

// Site with explicit http URL:
assertEquals(""http://aa.wikipedia.org/wiki/Test"",
sites.getPageUrl(""aawiki"", ""Test""));

}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testNonTimeout,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testNonTimeout() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-for-long-testing.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);
dpc.registerEntityDocumentProcessor(new SlowDocumentProcessor(), null,
true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertEquals(101, timer.entityCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.missingDumpProperties,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void missingDumpProperties() {
String dateStamp = ""20140220"";
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
assertEquals(dateStamp, dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.processAllRelevantDumps,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void processAllRelevantDumps() throws IOException {

setLocalDump(""20140221"", DumpContentType.DAILY, true);
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

TestDumpfileProcessor dfp = new TestDumpfileProcessor();

for (MwDumpFile dumpFile : dumpFileManager
.findAllRelevantRevisionDumps(true)) {
dfp.processDumpFileContents(dumpFile.getDumpFileStream(), dumpFile);
}

assertEquals(
dfp.result,
""Contents of daily 20140221\nContents of daily 20140220\nContents of current 20140219\n"");
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testRegularJsonProcessing,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testRegularJsonProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-for-testing.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertEquals(3, timer.entityCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllRelevantDumps,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllRelevantDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/"",
""/other-incr-wikidatawiki-index.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());

setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.FULL, true);
setLocalDump(""20140205"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllRelevantRevisionDumps(true);

String[] dumpDates = { ""20140221"", ""20140220"", ""20140219"", ""20140218"",
""20140217"", ""20140216"", ""20140215"", ""20140214"", ""20140213"",
""20140212"", ""20140211"", ""20140210"" };
boolean[] dumpIsLocal = { false, true, false, false, false, false,
false, false, false, false, false, false };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
if (i == dumpFiles.size() - 1) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
} else {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
}
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertFalse(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.emptyFullDumpIsDone,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void emptyFullDumpIsDone() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);

assertFalse(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.FULL, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.validCurrentDumpPropertiesOldFormat,1,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void validCurrentDumpPropertiesOldFormat() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"", CompressionType.BZ2);
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.CURRENT, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.inaccessibleStatus,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void inaccessibleStatus() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
wrf.setReturnFailingReaders(true);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.downloadNoDumpFile,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IOException.class)
public void downloadNoDumpFile() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllJsonDumps,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllJsonDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/wikidata/"",
""/other-wikidata-index.html"", this.getClass());

setLocalDump(""20141110"", DumpContentType.JSON, true);
setLocalDump(""20150105"", DumpContentType.CURRENT, true);
setLocalDump(""20141201"", DumpContentType.JSON, true);
setLocalDump(""nodate"", DumpContentType.JSON, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.JSON);

String[] dumpDates = { ""20150112"", ""20150105"", ""20141229"", ""20141222"",
""20141215"", ""20141210"", ""20141201"", ""20141124"", ""20141117"",
""20141110"" };
boolean[] dumpIsLocal = { false, false, false, false, false, false,
true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.JSON);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(
""Dumpfile "" + dumpFiles.get(i) + "" should be local."",
dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(""Dumpfile "" + dumpFiles.get(i)
+ "" should be online."",
dumpFiles.get(i) instanceof JsonOnlineDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.missingDumpFile,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void missingDumpFile() throws IOException {
Path thisDumpPath = this.dmPath.resolve(""daily-20140220"");
dm.setDirectory(thisDumpPath);
WmfLocalDumpFile dumpFile = new WmfLocalDumpFile(""20140220"",
""wikidatawiki"", dm, DumpContentType.DAILY);
assertEquals(dumpFile.isAvailable(), false);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.emptyDumpProperties,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void emptyDumpProperties() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", """");
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
assertEquals(dateStamp, dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.validCurrentDumpPropertiesNewFormat,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void validCurrentDumpPropertiesNewFormat() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140508-index.html"", this.getClass());
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"", CompressionType.BZ2);
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.CURRENT, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentFullDumpFileProcessing,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void testMwRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processAllRecentRevisionDumps();

assertEquals(19, mwrpStats.getTotalRevisionCount());
assertEquals(5, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllFullDumps,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllFullDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());

setLocalDump(""20140210"", DumpContentType.FULL, false);
setLocalDump(""20140123"", DumpContentType.FULL, true);
setLocalDump(""20140106"", DumpContentType.CURRENT, true);
setLocalDump(""20131201"", DumpContentType.FULL, true);
setLocalDump(""nodate"", DumpContentType.FULL, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.FULL);

String[] dumpDates = { ""20140210"", ""20140123"", ""20140106"", ""20131221"",
""20131201"" };
boolean[] dumpIsLocal = { false, true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.FULL);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(dumpFiles.get(i) instanceof WmfOnlineStandardDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoDumpFile,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IOException.class)
public void downloadNoDumpFile() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllRelevantDumpsMainDumpMissing,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllRelevantDumpsMainDumpMissing() throws IOException {
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140210"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllRelevantRevisionDumps(false);

assertEquals(dumpFiles.size(), 1);
assertEquals(dumpFiles.get(0).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(0).getDateStamp(), ""20140220"");
assertTrue(dumpFiles.get(0) instanceof WmfLocalDumpFile);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.downloadNoRevisionId,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IOException.class)
public void downloadNoRevisionId() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/wikidatawiki-"" + dateStamp
+ ""-pages-meta-hist-incr.xml.bz2"", ""Line1"",
CompressionType.BZ2);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.missingFullDumpProperties,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void missingFullDumpProperties() {
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);

assertFalse(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllCurrentDumps,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllCurrentDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());

setLocalDump(""20140210"", DumpContentType.CURRENT, false);
setLocalDump(""20140123"", DumpContentType.CURRENT, true);
setLocalDump(""20140106"", DumpContentType.DAILY, true);
setLocalDump(""20131201"", DumpContentType.CURRENT, true);
setLocalDump(""nodate"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.CURRENT);

String[] dumpDates = { ""20140210"", ""20140123"", ""20140106"", ""20131221"",
""20131201"" };
boolean[] dumpIsLocal = { false, true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(dumpFiles.get(i) instanceof WmfOnlineStandardDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllDailyDumps,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllDailyDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/"",
""/other-incr-wikidatawiki-index.html"", this.getClass());

setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.CURRENT, true);
setLocalDump(""20140215"", DumpContentType.DAILY, false);
setLocalDump(""20140205"", DumpContentType.DAILY, true);
setLocalDump(""nodate"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.DAILY);

String[] dumpDates = { ""20140221"", ""20140220"", ""20140219"", ""20140218"",
""20140217"", ""20140216"", ""20140215"", ""20140214"", ""20140213"",
""20140212"", ""20140211"", ""20140210"", ""20140209"", ""20140208"",
""20140205"" };
boolean[] dumpIsLocal = { false, true, false, false, false, false,
false, false, false, false, false, false, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(
""Dumpfile "" + dumpFiles.get(i) + "" should be local."",
dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(""Dumpfile "" + dumpFiles.get(i)
+ "" should be online."",
dumpFiles.get(i) instanceof WmfOnlineDailyDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.validDumpProperties,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void validDumpProperties() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/wikidatawiki-"" + dateStamp
+ ""-pages-meta-hist-incr.xml.bz2"", ""Line1"",
CompressionType.BZ2);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertTrue(dump.isAvailable()); // second time should use cached entry
assertEquals(dateStamp, dump.getDateStamp());
assertEquals(""wikidatawiki"", dump.getProjectName());
assertEquals(""wikidatawiki-daily-"" + dateStamp, dump.toString());
assertEquals(DumpContentType.DAILY, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.inaccessibleCurrentDumpProperties,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void inaccessibleCurrentDumpProperties() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
wrf.setReturnFailingReaders(true);

MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

assertFalse(dump.isAvailable());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoRevisionId,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IOException.class)
public void downloadNoRevisionId() throws IOException {
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllCurrentDumpsOffline,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllCurrentDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.CURRENT, true);
setLocalDump(""20140205"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.CURRENT);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllDailyDumpsOffline,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllDailyDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140205"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.DAILY);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.directoryDoesNotExist,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IllegalArgumentException.class)
public void directoryDoesNotExist() {
new WmfLocalDumpFile(""20140220"", ""wikidatawiki"", dm,
DumpContentType.DAILY);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoMd5sum,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IOException.class)
public void downloadNoMd5sum() throws IOException {
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.directoryNotReadable,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IllegalArgumentException.class)
public void directoryNotReadable() throws IOException {
MockDirectoryManager dm = Mockito.mock(MockDirectoryManager.class);
Mockito.when(dm.hasSubdirectory(""daily-20140220"")).thenReturn(true);
Mockito.doThrow(new IOException()).when(dm)
.getSubdirectoryManager(""daily-20140220"");

new WmfLocalDumpFile(""20140220"", ""wikidatawiki"", dm,
DumpContentType.DAILY);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllFullDumpsOffline,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllFullDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.FULL, true);
setLocalDump(""20140205"", DumpContentType.FULL, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.FULL);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.FULL);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.SitesTest.getSiteInformation,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getSiteInformation() throws IOException {
Path dumpFilePath = this.dmPath.resolve(""dumpfiles"").resolve(
""wikidatawiki"");
Path thisDumpPath = dumpFilePath.resolve(DumpContentType.SITES
.toString().toLowerCase() + ""-"" + ""20140420"");
dm.setDirectory(dumpFilePath);
dm.setDirectory(thisDumpPath);

URL resourceUrl = this.getClass().getResource(
""/wikidatawiki-20140420-sites.sql"");
Path filePath = thisDumpPath.resolve(""wikidatawiki-"" + ""20140420""
+ WmfDumpFile.getDumpFilePostfix(DumpContentType.SITES));
dm.setFileContents(filePath, MockStringContentFactory.getStringFromUrl(resourceUrl),
WmfDumpFile.getDumpFileCompressionType(filePath.toString()));

this.dpc.setOfflineMode(true);

DataObjectFactory factory = new DataObjectFactoryImpl();
SiteLink siteLink = factory.getSiteLink(""Douglas Adams"", ""dewiki"",
Collections.emptyList());

Sites sites = this.dpc.getSitesInformation();

assertEquals(""en"", sites.getLanguageCode(""enwikivoyage""));
// Test sites with protocol-relative URLs:
assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//de.wikipedia.org/wiki/Douglas_Adams"",
sites.getSiteLinkUrl(siteLink));
assertEquals(
SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//ar.wikipedia.org/wiki/%D8%AF%D9%88%D8%BA%D9%84%D8%A7%D8%B3_%D8%A2%D8%AF%D9%85%D8%B2"",
sites.getPageUrl(""arwiki"", ""ﾘｯ�ｿｽ?ﾘｺ�ｿｽ?ﾘｧﾘｳ_ﾘ｢ﾘｯ�ｿｽ?ﾘｲ""));
assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//en.wikipedia.org/w/api.php"",
sites.getFileUrl(""enwiki"", ""api.php""));

// Site with explicit http URL:
assertEquals(""http://aa.wikipedia.org/wiki/Test"",
sites.getPageUrl(""aawiki"", ""Test""));

}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.missingDumpProperties,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void missingDumpProperties() {
String dateStamp = ""20140220"";
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
assertEquals(dateStamp, dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.processAllRelevantDumps,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void processAllRelevantDumps() throws IOException {

setLocalDump(""20140221"", DumpContentType.DAILY, true);
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

TestDumpfileProcessor dfp = new TestDumpfileProcessor();

for (MwDumpFile dumpFile : dumpFileManager
.findAllRelevantRevisionDumps(true)) {
dfp.processDumpFileContents(dumpFile.getDumpFileStream(), dumpFile);
}

assertEquals(
dfp.result,
""Contents of daily 20140221\nContents of daily 20140220\nContents of current 20140219\n"");
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllRelevantDumps,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void getAllRelevantDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/"",
""/other-incr-wikidatawiki-index.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());

setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.FULL, true);
setLocalDump(""20140205"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllRelevantRevisionDumps(true);

String[] dumpDates = { ""20140221"", ""20140220"", ""20140219"", ""20140218"",
""20140217"", ""20140216"", ""20140215"", ""20140214"", ""20140213"",
""20140212"", ""20140211"", ""20140210"" };
boolean[] dumpIsLocal = { false, true, false, false, false, false,
false, false, false, false, false, false };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
if (i == dumpFiles.size() - 1) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
} else {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
}
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertFalse(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.emptyFullDumpIsDone,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void emptyFullDumpIsDone() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);

assertFalse(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.FULL, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.validCurrentDumpPropertiesOldFormat,1,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void validCurrentDumpPropertiesOldFormat() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"", CompressionType.BZ2);
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.CURRENT, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.inaccessibleStatus,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void inaccessibleStatus() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
wrf.setReturnFailingReaders(true);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.downloadNoDumpFile,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoDumpFile() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllJsonDumps,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllJsonDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/wikidata/"",
""/other-wikidata-index.html"", this.getClass());

setLocalDump(""20141110"", DumpContentType.JSON, true);
setLocalDump(""20150105"", DumpContentType.CURRENT, true);
setLocalDump(""20141201"", DumpContentType.JSON, true);
setLocalDump(""nodate"", DumpContentType.JSON, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.JSON);

String[] dumpDates = { ""20150112"", ""20150105"", ""20141229"", ""20141222"",
""20141215"", ""20141210"", ""20141201"", ""20141124"", ""20141117"",
""20141110"" };
boolean[] dumpIsLocal = { false, false, false, false, false, false,
true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.JSON);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(
""Dumpfile "" + dumpFiles.get(i) + "" should be local."",
dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(""Dumpfile "" + dumpFiles.get(i)
+ "" should be online."",
dumpFiles.get(i) instanceof JsonOnlineDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.missingDumpFile,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void missingDumpFile() throws IOException {
Path thisDumpPath = this.dmPath.resolve(""daily-20140220"");
dm.setDirectory(thisDumpPath);
WmfLocalDumpFile dumpFile = new WmfLocalDumpFile(""20140220"",
""wikidatawiki"", dm, DumpContentType.DAILY);
assertEquals(dumpFile.isAvailable(), false);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.emptyDumpProperties,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void emptyDumpProperties() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", """");
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
assertEquals(dateStamp, dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.validCurrentDumpPropertiesNewFormat,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void validCurrentDumpPropertiesNewFormat() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140508-index.html"", this.getClass());
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"", CompressionType.BZ2);
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.CURRENT, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentFullDumpFileProcessing,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testMwRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processAllRecentRevisionDumps();

assertEquals(19, mwrpStats.getTotalRevisionCount());
assertEquals(5, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllFullDumps,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllFullDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());

setLocalDump(""20140210"", DumpContentType.FULL, false);
setLocalDump(""20140123"", DumpContentType.FULL, true);
setLocalDump(""20140106"", DumpContentType.CURRENT, true);
setLocalDump(""20131201"", DumpContentType.FULL, true);
setLocalDump(""nodate"", DumpContentType.FULL, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.FULL);

String[] dumpDates = { ""20140210"", ""20140123"", ""20140106"", ""20131221"",
""20131201"" };
boolean[] dumpIsLocal = { false, true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.FULL);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(dumpFiles.get(i) instanceof WmfOnlineStandardDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoDumpFile,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoDumpFile() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllRelevantDumpsMainDumpMissing,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllRelevantDumpsMainDumpMissing() throws IOException {
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140210"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllRelevantRevisionDumps(false);

assertEquals(dumpFiles.size(), 1);
assertEquals(dumpFiles.get(0).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(0).getDateStamp(), ""20140220"");
assertTrue(dumpFiles.get(0) instanceof WmfLocalDumpFile);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.downloadNoRevisionId,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoRevisionId() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/wikidatawiki-"" + dateStamp
+ ""-pages-meta-hist-incr.xml.bz2"", ""Line1"",
CompressionType.BZ2);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.missingFullDumpProperties,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void missingFullDumpProperties() {
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);

assertFalse(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllCurrentDumps,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllCurrentDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());

setLocalDump(""20140210"", DumpContentType.CURRENT, false);
setLocalDump(""20140123"", DumpContentType.CURRENT, true);
setLocalDump(""20140106"", DumpContentType.DAILY, true);
setLocalDump(""20131201"", DumpContentType.CURRENT, true);
setLocalDump(""nodate"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.CURRENT);

String[] dumpDates = { ""20140210"", ""20140123"", ""20140106"", ""20131221"",
""20131201"" };
boolean[] dumpIsLocal = { false, true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(dumpFiles.get(i) instanceof WmfOnlineStandardDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllDailyDumps,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllDailyDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/"",
""/other-incr-wikidatawiki-index.html"", this.getClass());

setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.CURRENT, true);
setLocalDump(""20140215"", DumpContentType.DAILY, false);
setLocalDump(""20140205"", DumpContentType.DAILY, true);
setLocalDump(""nodate"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.DAILY);

String[] dumpDates = { ""20140221"", ""20140220"", ""20140219"", ""20140218"",
""20140217"", ""20140216"", ""20140215"", ""20140214"", ""20140213"",
""20140212"", ""20140211"", ""20140210"", ""20140209"", ""20140208"",
""20140205"" };
boolean[] dumpIsLocal = { false, true, false, false, false, false,
false, false, false, false, false, false, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(
""Dumpfile "" + dumpFiles.get(i) + "" should be local."",
dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(""Dumpfile "" + dumpFiles.get(i)
+ "" should be online."",
dumpFiles.get(i) instanceof WmfOnlineDailyDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.validDumpProperties,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void validDumpProperties() throws IOException {
String dateStamp = ""20140220"";
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/status.txt"", ""done"");
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/""
+ dateStamp + ""/wikidatawiki-"" + dateStamp
+ ""-pages-meta-hist-incr.xml.bz2"", ""Line1"",
CompressionType.BZ2);
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertTrue(dump.isAvailable()); // second time should use cached entry
assertEquals(dateStamp, dump.getDateStamp());
assertEquals(""wikidatawiki"", dump.getProjectName());
assertEquals(""wikidatawiki-daily-"" + dateStamp, dump.toString());
assertEquals(DumpContentType.DAILY, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.inaccessibleCurrentDumpProperties,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void inaccessibleCurrentDumpProperties() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
wrf.setReturnFailingReaders(true);

MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

assertFalse(dump.isAvailable());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoRevisionId,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoRevisionId() throws IOException {
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllCurrentDumpsOffline,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllCurrentDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.CURRENT, true);
setLocalDump(""20140205"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.CURRENT);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllDailyDumpsOffline,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllDailyDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140205"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.DAILY);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.directoryDoesNotExist,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IllegalArgumentException.class)
public void directoryDoesNotExist() {
new WmfLocalDumpFile(""20140220"", ""wikidatawiki"", dm,
DumpContentType.DAILY);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.downloadNoMd5sum,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
public void downloadNoMd5sum() throws IOException {
wrf.setWebResourceContents(
""http://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"");
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);
dump.getDumpFileReader();
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfLocalDumpFileTest.directoryNotReadable,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IllegalArgumentException.class)
public void directoryNotReadable() throws IOException {
MockDirectoryManager dm = Mockito.mock(MockDirectoryManager.class);
Mockito.when(dm.hasSubdirectory(""daily-20140220"")).thenReturn(true);
Mockito.doThrow(new IOException()).when(dm)
.getSubdirectoryManager(""daily-20140220"");

new WmfLocalDumpFile(""20140220"", ""wikidatawiki"", dm,
DumpContentType.DAILY);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testBuggyJsonProcessing,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testBuggyJsonProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-with-bugs.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertTrue(timer.entityCount >= 3);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllFullDumpsOffline,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllFullDumpsOffline() throws IOException {
setLocalDump(""20140220"", DumpContentType.FULL, true);
setLocalDump(""20140205"", DumpContentType.FULL, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.FULL);

String[] dumpDates = { ""20140220"", ""20140205"" };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.FULL);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.SitesTest.getSiteInformation,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getSiteInformation() throws IOException {
Path dumpFilePath = this.dmPath.resolve(""dumpfiles"").resolve(
""wikidatawiki"");
Path thisDumpPath = dumpFilePath.resolve(DumpContentType.SITES
.toString().toLowerCase() + ""-"" + ""20140420"");
dm.setDirectory(dumpFilePath);
dm.setDirectory(thisDumpPath);

URL resourceUrl = this.getClass().getResource(
""/wikidatawiki-20140420-sites.sql"");
Path filePath = thisDumpPath.resolve(""wikidatawiki-"" + ""20140420""
+ WmfDumpFile.getDumpFilePostfix(DumpContentType.SITES));
dm.setFileContents(filePath, MockStringContentFactory.getStringFromUrl(resourceUrl),
WmfDumpFile.getDumpFileCompressionType(filePath.toString()));

this.dpc.setOfflineMode(true);

DataObjectFactory factory = new DataObjectFactoryImpl();
SiteLink siteLink = factory.getSiteLink(""Douglas Adams"", ""dewiki"",
Collections.emptyList());

Sites sites = this.dpc.getSitesInformation();

assertEquals(""en"", sites.getLanguageCode(""enwikivoyage""));
// Test sites with protocol-relative URLs:
assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//de.wikipedia.org/wiki/Douglas_Adams"",
sites.getSiteLinkUrl(siteLink));
assertEquals(
SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//ar.wikipedia.org/wiki/%D8%AF%D9%88%D8%BA%D9%84%D8%A7%D8%B3_%D8%A2%D8%AF%D9%85%D8%B2"",
sites.getPageUrl(""arwiki"", ""ﾘｯ�ｿｽ?ﾘｺ�ｿｽ?ﾘｧﾘｳ_ﾘ｢ﾘｯ�ｿｽ?ﾘｲ""));
assertEquals(SitesImpl.DEFAULT_PROTOCOL_PREFIX
+ ""//en.wikipedia.org/w/api.php"",
sites.getFileUrl(""enwiki"", ""api.php""));

// Site with explicit http URL:
assertEquals(""http://aa.wikipedia.org/wiki/Test"",
sites.getPageUrl(""aawiki"", ""Test""));

}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testNonTimeout,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testNonTimeout() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-for-long-testing.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);
dpc.registerEntityDocumentProcessor(new SlowDocumentProcessor(), null,
true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertEquals(101, timer.entityCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineDailyDumpFileTest.missingDumpProperties,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void missingDumpProperties() {
String dateStamp = ""20140220"";
WmfOnlineDailyDumpFile dump = new WmfOnlineDailyDumpFile(dateStamp,
""wikidatawiki"", wrf, dm);

assertFalse(dump.isAvailable());
assertEquals(dateStamp, dump.getDateStamp());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.processAllRelevantDumps,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void processAllRelevantDumps() throws IOException {

setLocalDump(""20140221"", DumpContentType.DAILY, true);
setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.CURRENT, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, null);

TestDumpfileProcessor dfp = new TestDumpfileProcessor();

for (MwDumpFile dumpFile : dumpFileManager
.findAllRelevantRevisionDumps(true)) {
dfp.processDumpFileContents(dumpFile.getDumpFileStream(), dumpFile);
}

assertEquals(
dfp.result,
""Contents of daily 20140221\nContents of daily 20140220\nContents of current 20140219\n"");
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testRegularJsonProcessing,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testRegularJsonProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-for-testing.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertEquals(3, timer.entityCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllRelevantDumps,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllRelevantDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/incr/wikidatawiki/"",
""/other-incr-wikidatawiki-index.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/"",
""/wikidatawiki-index-old.html"", this.getClass());
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());

setLocalDump(""20140220"", DumpContentType.DAILY, true);
setLocalDump(""20140219"", DumpContentType.FULL, true);
setLocalDump(""20140205"", DumpContentType.DAILY, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllRelevantRevisionDumps(true);

String[] dumpDates = { ""20140221"", ""20140220"", ""20140219"", ""20140218"",
""20140217"", ""20140216"", ""20140215"", ""20140214"", ""20140213"",
""20140212"", ""20140211"", ""20140210"" };
boolean[] dumpIsLocal = { false, true, false, false, false, false,
false, false, false, false, false, false };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
if (i == dumpFiles.size() - 1) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.CURRENT);
} else {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.DAILY);
}
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertFalse(dumpFiles.get(i) instanceof WmfLocalDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.emptyFullDumpIsDone,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void emptyFullDumpIsDone() throws IOException {
wrf.setWebResourceContentsFromResource(
""http://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.FULL);

assertFalse(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.FULL, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfOnlineStandardDumpFileTest.validCurrentDumpPropertiesOldFormat,1,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void validCurrentDumpPropertiesOldFormat() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/"",
""/wikidatawiki-20140210-index.html"", this.getClass());
wrf.setWebResourceContents(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-pages-meta-current.xml.bz2"",
""Line1"", CompressionType.BZ2);
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/wikidatawiki/20140210/wikidatawiki-20140210-md5sums.txt"",
""/wikidatawiki-20140210-md5sums.txt"", this.getClass());
MwDumpFile dump = new WmfOnlineStandardDumpFile(""20140210"",
""wikidatawiki"", wrf, dm, DumpContentType.CURRENT);

BufferedReader br = dump.getDumpFileReader();

assertEquals(br.readLine(), ""Line1"");
assertEquals(br.readLine(), null);
assertTrue(dump.isAvailable());
assertEquals(""20140210"", dump.getDateStamp());
assertEquals(DumpContentType.CURRENT, dump.getDumpContentType());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileManagerTest.getAllJsonDumps,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void getAllJsonDumps() throws IOException {
wrf.setWebResourceContentsFromResource(
""https://dumps.wikimedia.org/other/wikidata/"",
""/other-wikidata-index.html"", this.getClass());

setLocalDump(""20141110"", DumpContentType.JSON, true);
setLocalDump(""20150105"", DumpContentType.CURRENT, true);
setLocalDump(""20141201"", DumpContentType.JSON, true);
setLocalDump(""nodate"", DumpContentType.JSON, true);

WmfDumpFileManager dumpFileManager = new WmfDumpFileManager(
""wikidatawiki"", dm, wrf);

List<? extends MwDumpFile> dumpFiles = dumpFileManager
.findAllDumps(DumpContentType.JSON);

String[] dumpDates = { ""20150112"", ""20150105"", ""20141229"", ""20141222"",
""20141215"", ""20141210"", ""20141201"", ""20141124"", ""20141117"",
""20141110"" };
boolean[] dumpIsLocal = { false, false, false, false, false, false,
true, false, false, true };

assertEquals(dumpFiles.size(), dumpDates.length);
for (int i = 0; i < dumpFiles.size(); i++) {
assertEquals(dumpFiles.get(i).getDumpContentType(),
DumpContentType.JSON);
assertEquals(dumpFiles.get(i).getDateStamp(), dumpDates[i]);
if (dumpIsLocal[i]) {
assertTrue(
""Dumpfile "" + dumpFiles.get(i) + "" should be local."",
dumpFiles.get(i) instanceof WmfLocalDumpFile);
} else {
assertTrue(""Dumpfile "" + dumpFiles.get(i)
+ "" should be online."",
dumpFiles.get(i) instanceof JsonOnlineDumpFile);
}
}
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testBuggyJsonProcessing,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void testBuggyJsonProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-with-bugs.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertTrue(timer.entityCount >= 3);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testNonTimeout,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void testNonTimeout() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-for-long-testing.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);
dpc.registerEntityDocumentProcessor(new SlowDocumentProcessor(), null,
true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertEquals(101, timer.entityCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testRegularJsonProcessing,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
public void testRegularJsonProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
setLocalJsonDumpFile(""mock-dump-for-testing.json"", ""20150223"", dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

EntityTimerProcessor timer = new EntityTimerProcessor(0);
dpc.registerEntityDocumentProcessor(timer, null, true);

timer.open();
dpc.processMostRecentJsonDump();
timer.close();

assertEquals(3, timer.entityCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testTimeout,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = EntityTimerProcessor.TimeoutException.class)
	@Ignore
	public void testTimeout() throws IOException {
		Path dmPath = Paths.get(System.getProperty(""user.dir""));
		MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
		setLocalJsonDumpFile(""mock-dump-for-long-testing.json"", ""20150223"", dm);

		DumpProcessingController dpc = new DumpProcessingController(
				""wikidatawiki"");
		dpc.downloadDirectoryManager = dm;
		dpc.setOfflineMode(true);

		EntityTimerProcessor timer = new EntityTimerProcessor(1);
		timer.setReportInterval(1);
		dpc.registerEntityDocumentProcessor(timer, null, true);
		dpc.registerEntityDocumentProcessor(new SlowDocumentProcessor(), null,
				true);

		timer.open();
		dpc.processMostRecentJsonDump();
		timer.close();
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testTimeout,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = EntityTimerProcessor.TimeoutException.class)
	@Ignore
	public void testTimeout() throws IOException {
		Path dmPath = Paths.get(System.getProperty(""user.dir""));
		MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
		setLocalJsonDumpFile(""mock-dump-for-long-testing.json"", ""20150223"", dm);

		DumpProcessingController dpc = new DumpProcessingController(
				""wikidatawiki"");
		dpc.downloadDirectoryManager = dm;
		dpc.setOfflineMode(true);

		EntityTimerProcessor timer = new EntityTimerProcessor(1);
		timer.setReportInterval(1);
		dpc.registerEntityDocumentProcessor(timer, null, true);
		dpc.registerEntityDocumentProcessor(new SlowDocumentProcessor(), null,
				true);

		timer.open();
		dpc.processMostRecentJsonDump();
		timer.close();
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.JsonDumpFileProcessingTest.testTimeout,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = EntityTimerProcessor.TimeoutException.class)
	@Ignore
	public void testTimeout() throws IOException {
		Path dmPath = Paths.get(System.getProperty(""user.dir""));
		MockDirectoryManager dm = new MockDirectoryManager(dmPath, true, true);
		setLocalJsonDumpFile(""mock-dump-for-long-testing.json"", ""20150223"", dm);

		DumpProcessingController dpc = new DumpProcessingController(
				""wikidatawiki"");
		dpc.downloadDirectoryManager = dm;
		dpc.setOfflineMode(true);

		EntityTimerProcessor timer = new EntityTimerProcessor(1);
		timer.setReportInterval(1);
		dpc.registerEntityDocumentProcessor(timer, null, true);
		dpc.registerEntityDocumentProcessor(new SlowDocumentProcessor(), null,
				true);

		timer.open();
		dpc.processMostRecentJsonDump();
		timer.close();
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testIncompleteDumpFile,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testIncompleteDumpFile() throws IOException {
		URL resourceUrl = MwDumpFileProcessingTest.class
				.getResource(""/mock-dump-incomplete-revision.xml"");
		MwDumpFile mockDumpFile = Mockito.mock(WmfLocalDumpFile.class);

		MwRevisionProcessorBroker mwrpBroker = new MwRevisionProcessorBroker();

		TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
		mwrpBroker.registerMwRevisionProcessor(tmrpAll, null, false);

		MwRevisionDumpFileProcessor mwdfp = new MwRevisionDumpFileProcessor(
				mwrpBroker);
		mwdfp.processDumpFileContents(resourceUrl.openStream(), mockDumpFile);

		List<MwRevision> revisionsAll = new ArrayList<>();
		revisionsAll.add(getItemRevision(4));

		assertEqualRevisionLists(revisionsAll, tmrpAll.revisions,
				""all-incomplete"");
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testIncompleteDumpFile,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testIncompleteDumpFile() throws IOException {
		URL resourceUrl = MwDumpFileProcessingTest.class
				.getResource(""/mock-dump-incomplete-revision.xml"");
		MwDumpFile mockDumpFile = Mockito.mock(WmfLocalDumpFile.class);

		MwRevisionProcessorBroker mwrpBroker = new MwRevisionProcessorBroker();

		TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
		mwrpBroker.registerMwRevisionProcessor(tmrpAll, null, false);

		MwRevisionDumpFileProcessor mwdfp = new MwRevisionDumpFileProcessor(
				mwrpBroker);
		mwdfp.processDumpFileContents(resourceUrl.openStream(), mockDumpFile);

		List<MwRevision> revisionsAll = new ArrayList<>();
		revisionsAll.add(getItemRevision(4));

		assertEqualRevisionLists(revisionsAll, tmrpAll.revisions,
				""all-incomplete"");
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testIncompleteDumpFile,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testIncompleteDumpFile() throws IOException {
		URL resourceUrl = MwDumpFileProcessingTest.class
				.getResource(""/mock-dump-incomplete-revision.xml"");
		MwDumpFile mockDumpFile = Mockito.mock(WmfLocalDumpFile.class);

		MwRevisionProcessorBroker mwrpBroker = new MwRevisionProcessorBroker();

		TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
		mwrpBroker.registerMwRevisionProcessor(tmrpAll, null, false);

		MwRevisionDumpFileProcessor mwdfp = new MwRevisionDumpFileProcessor(
				mwrpBroker);
		mwdfp.processDumpFileContents(resourceUrl.openStream(), mockDumpFile);

		List<MwRevision> revisionsAll = new ArrayList<>();
		revisionsAll.add(getItemRevision(4));

		assertEqualRevisionLists(revisionsAll, tmrpAll.revisions,
				""all-incomplete"");
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testBuggyDumpFile,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testBuggyDumpFile() throws IOException {
		URL resourceUrl = MwDumpFileProcessingTest.class
				.getResource(""/mock-dump-with-bugs.xml"");
		MwDumpFile mockDumpFile = Mockito.mock(WmfLocalDumpFile.class);

		MwRevisionProcessorBroker mwrpBroker = new MwRevisionProcessorBroker();

		TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
		mwrpBroker.registerMwRevisionProcessor(tmrpAll, null, false);

		MwRevisionDumpFileProcessor mwdfp = new MwRevisionDumpFileProcessor(
				mwrpBroker);
		mwdfp.processDumpFileContents(resourceUrl.openStream(), mockDumpFile);

		List<MwRevision> revisionsAll = new ArrayList<>();
		revisionsAll.add(getItemRevision(4));
		revisionsAll.add(getItemRevision(5));
		revisionsAll.add(getPageRevision(1));
		revisionsAll.add(getPageRevision(2));

		assertEqualRevisionLists(revisionsAll, tmrpAll.revisions,
				""all-incomplete"");
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testBuggyDumpFile,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testBuggyDumpFile() throws IOException {
		URL resourceUrl = MwDumpFileProcessingTest.class
				.getResource(""/mock-dump-with-bugs.xml"");
		MwDumpFile mockDumpFile = Mockito.mock(WmfLocalDumpFile.class);

		MwRevisionProcessorBroker mwrpBroker = new MwRevisionProcessorBroker();

		TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
		mwrpBroker.registerMwRevisionProcessor(tmrpAll, null, false);

		MwRevisionDumpFileProcessor mwdfp = new MwRevisionDumpFileProcessor(
				mwrpBroker);
		mwdfp.processDumpFileContents(resourceUrl.openStream(), mockDumpFile);

		List<MwRevision> revisionsAll = new ArrayList<>();
		revisionsAll.add(getItemRevision(4));
		revisionsAll.add(getItemRevision(5));
		revisionsAll.add(getPageRevision(1));
		revisionsAll.add(getPageRevision(2));

		assertEqualRevisionLists(revisionsAll, tmrpAll.revisions,
				""all-incomplete"");
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testBuggyDumpFile,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testBuggyDumpFile() throws IOException {
		URL resourceUrl = MwDumpFileProcessingTest.class
				.getResource(""/mock-dump-with-bugs.xml"");
		MwDumpFile mockDumpFile = Mockito.mock(WmfLocalDumpFile.class);

		MwRevisionProcessorBroker mwrpBroker = new MwRevisionProcessorBroker();

		TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
		mwrpBroker.registerMwRevisionProcessor(tmrpAll, null, false);

		MwRevisionDumpFileProcessor mwdfp = new MwRevisionDumpFileProcessor(
				mwrpBroker);
		mwdfp.processDumpFileContents(resourceUrl.openStream(), mockDumpFile);

		List<MwRevision> revisionsAll = new ArrayList<>();
		revisionsAll.add(getItemRevision(4));
		revisionsAll.add(getItemRevision(5));
		revisionsAll.add(getPageRevision(1));
		revisionsAll.add(getPageRevision(2));

		assertEqualRevisionLists(revisionsAll, tmrpAll.revisions,
				""all-incomplete"");
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.missingDumpFile,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void missingDumpFile() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/non-existing-dump-file.json.gz"");
		assertFalse(df.isAvailable());
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.missingDumpFile,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void missingDumpFile() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/non-existing-dump-file.json.gz"");
		assertFalse(df.isAvailable());
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.missingDumpFile,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void missingDumpFile() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/non-existing-dump-file.json.gz"");
		assertFalse(df.isAvailable());
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.missingDumpFileDirectory,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void missingDumpFileDirectory() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/nonexisting-directory/non-existing-file.json.gz"");
		assertFalse(df.isAvailable());
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.missingDumpFileDirectory,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void missingDumpFileDirectory() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/nonexisting-directory/non-existing-file.json.gz"");
		assertFalse(df.isAvailable());
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.missingDumpFileDirectory,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void missingDumpFileDirectory() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/nonexisting-directory/non-existing-file.json.gz"");
		assertFalse(df.isAvailable());
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testExplicitGetters,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testExplicitGetters() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"",
				DumpContentType.SITES, ""20150815"",
				""wikidatawiki"");

		assertEquals(""20150815"", df.getDateStamp());
		assertEquals(""wikidatawiki"", df.getProjectName());
		assertEquals(DumpContentType.SITES, df.getDumpContentType());
		String toString = df.toString();

		assertEquals(this.dmPath.resolve(""testdump-20150512.json.gz""),
				df.getPath());

		assertTrue(toString.contains(""20150815""));
		assertTrue(toString.contains(""wikidatawiki""));
		assertTrue(toString.toLowerCase().contains(
				DumpContentType.SITES.toString().toLowerCase()));
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testExplicitGetters,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testExplicitGetters() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"",
				DumpContentType.SITES, ""20150815"",
				""wikidatawiki"");

		assertEquals(""20150815"", df.getDateStamp());
		assertEquals(""wikidatawiki"", df.getProjectName());
		assertEquals(DumpContentType.SITES, df.getDumpContentType());
		String toString = df.toString();

		assertEquals(this.dmPath.resolve(""testdump-20150512.json.gz""),
				df.getPath());

		assertTrue(toString.contains(""20150815""));
		assertTrue(toString.contains(""wikidatawiki""));
		assertTrue(toString.toLowerCase().contains(
				DumpContentType.SITES.toString().toLowerCase()));
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testExplicitGetters,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testExplicitGetters() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"",
				DumpContentType.SITES, ""20150815"",
				""wikidatawiki"");

		assertEquals(""20150815"", df.getDateStamp());
		assertEquals(""wikidatawiki"", df.getProjectName());
		assertEquals(DumpContentType.SITES, df.getDumpContentType());
		String toString = df.toString();

		assertEquals(this.dmPath.resolve(""testdump-20150512.json.gz""),
				df.getPath());

		assertTrue(toString.contains(""20150815""));
		assertTrue(toString.contains(""wikidatawiki""));
		assertTrue(toString.toLowerCase().contains(
				DumpContentType.SITES.toString().toLowerCase()));
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessJsonDumpAndDate,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessJsonDumpAndDate() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		assertTrue(df.isAvailable());
		assertEquals(""20150512"", df.getDateStamp());
		assertEquals(""LOCAL"", df.getProjectName());
		assertEquals(df.getDumpContentType(), DumpContentType.JSON);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessJsonDumpAndDate,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testGuessJsonDumpAndDate() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		assertTrue(df.isAvailable());
		assertEquals(""20150512"", df.getDateStamp());
		assertEquals(""LOCAL"", df.getProjectName());
		assertEquals(df.getDumpContentType(), DumpContentType.JSON);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessJsonDumpAndDate,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessJsonDumpAndDate() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		assertTrue(df.isAvailable());
		assertEquals(""20150512"", df.getDateStamp());
		assertEquals(""LOCAL"", df.getProjectName());
		assertEquals(df.getDumpContentType(), DumpContentType.JSON);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testJsonReader,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testJsonReader() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""),
				""Test contents"", CompressionType.GZIP);
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		BufferedReader br = df.getDumpFileReader();
		assertEquals(""Test contents"", br.readLine());
		assertTrue(br.readLine() == null);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testJsonReader,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testJsonReader() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""),
				""Test contents"", CompressionType.GZIP);
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		BufferedReader br = df.getDumpFileReader();
		assertEquals(""Test contents"", br.readLine());
		assertTrue(br.readLine() == null);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testJsonReader,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testJsonReader() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""),
				""Test contents"", CompressionType.GZIP);
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		BufferedReader br = df.getDumpFileReader();
		assertEquals(""Test contents"", br.readLine());
		assertTrue(br.readLine() == null);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testUnavailableReader,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
	public void testUnavailableReader() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		df.getDumpFileReader();
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testUnavailableReader,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test(expected = IOException.class)
	public void testUnavailableReader() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		df.getDumpFileReader();
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testUnavailableReader,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test(expected = IOException.class)
	public void testUnavailableReader() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"");
		df.getDumpFileReader();
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessSitesDump,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessSitesDump() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""test.sql.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/test.sql.gz"");
		assertTrue(df.isAvailable());
		assertEquals(""YYYYMMDD"", df.getDateStamp());
		assertEquals(df.getDumpContentType(), DumpContentType.SITES);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessSitesDump,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testGuessSitesDump() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""test.sql.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/test.sql.gz"");
		assertTrue(df.isAvailable());
		assertEquals(""YYYYMMDD"", df.getDateStamp());
		assertEquals(df.getDumpContentType(), DumpContentType.SITES);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessSitesDump,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessSitesDump() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""test.sql.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/test.sql.gz"");
		assertTrue(df.isAvailable());
		assertEquals(""YYYYMMDD"", df.getDateStamp());
		assertEquals(df.getDumpContentType(), DumpContentType.SITES);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessFullDump,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessFullDump() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""test.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/test.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.FULL);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessFullDump,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testGuessFullDump() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""test.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/test.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.FULL);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessFullDump,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessFullDump() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""test.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/test.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.FULL);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessDailyDump,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessDailyDump() throws IOException {
		this.dm.setFileContents(
				this.dmPath.resolve(""daily-dump.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/daily-dump.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.DAILY);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessDailyDump,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testGuessDailyDump() throws IOException {
		this.dm.setFileContents(
				this.dmPath.resolve(""daily-dump.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/daily-dump.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.DAILY);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessDailyDump,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessDailyDump() throws IOException {
		this.dm.setFileContents(
				this.dmPath.resolve(""daily-dump.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/daily-dump.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.DAILY);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessCurrentDump,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessCurrentDump() throws IOException {
		this.dm.setFileContents(
				this.dmPath.resolve(""current-dump.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/current-dump.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.CURRENT);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessCurrentDump,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testGuessCurrentDump() throws IOException {
		this.dm.setFileContents(
				this.dmPath.resolve(""current-dump.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/current-dump.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.CURRENT);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessCurrentDump,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessCurrentDump() throws IOException {
		this.dm.setFileContents(
				this.dmPath.resolve(""current-dump.xml.bz2""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/current-dump.xml.bz2"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.CURRENT);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessUnknownDumpType,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessUnknownDumpType() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""current-dump""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/current-dump"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.JSON);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessUnknownDumpType,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void testGuessUnknownDumpType() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""current-dump""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/current-dump"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.JSON);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.MwLocalDumpFileTest.testGuessUnknownDumpType,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void testGuessUnknownDumpType() throws IOException {
		this.dm.setFileContents(this.dmPath.resolve(""current-dump""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(""/current-dump"");
		assertTrue(df.isAvailable());
		assertEquals(df.getDumpContentType(), DumpContentType.JSON);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwRecentCurrentDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileTest.getDumpFileCompressionType,0,"""@Test
public void testMwRecentCurrentDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140420"", 4, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140419"", 3, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140417"", 1, DumpContentType.DAILY, dm);
mockLocalDumpFile(""20140418"", 2, DumpContentType.CURRENT, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, true);

dpc.processAllRecentRevisionDumps();

assertEquals(5, mwrpStats.getTotalRevisionCount());
assertEquals(1, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void getDumpFileCompressionType() {
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""foo.tar.gz""), CompressionType.GZIP);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""bar.txt.bz2""), CompressionType.BZ2);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""baz.txt""), CompressionType.NONE);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""bat.txt""), CompressionType.NONE);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwDailyDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileTest.getDumpFileCompressionType,0,"""@Test
public void testMwDailyDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
setLocalDumpFile(""20140420"", DumpContentType.DAILY, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpAllStats = new StatisticsMwRevisionProcessor(
""all"", 2);
dpc.registerMwRevisionProcessor(mwrpAllStats, null, false);

TestMwRevisionProcessor tmrpAll = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAll, null, false);
TestMwRevisionProcessor tmrpAllCurrent = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllCurrent, null, true);
TestMwRevisionProcessor tmrpAllItems = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllItems,
MwRevision.MODEL_WIKIBASE_ITEM, false);
TestEntityDocumentProcessor edpCurrentCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_ITEM, true);
dpc.registerEntityDocumentProcessor(edpCurrentCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, true);
TestEntityDocumentProcessor edpAllCounter = new TestEntityDocumentProcessor();
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_ITEM, false);
dpc.registerEntityDocumentProcessor(edpAllCounter,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllProperties = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllProperties,
MwRevision.MODEL_WIKIBASE_PROPERTY, false);
TestMwRevisionProcessor tmrpAllLexemes = new TestMwRevisionProcessor();
dpc.registerMwRevisionProcessor(tmrpAllLexemes,
MwRevision.MODEL_WIKIBASE_LEXEME, false);

dpc.processDump(dpc.getMostRecentDump(DumpContentType.DAILY));

List<MwRevision> revisionsAllItems = new ArrayList<>();
revisionsAllItems.add(getItemRevision(4));
revisionsAllItems.add(getItemRevision(5));
revisionsAllItems.add(getItemRevision(3));
revisionsAllItems.add(getItemRevision(2));

List<MwRevision> revisionsAllProperties = new ArrayList<>();
revisionsAllProperties.add(getPropertyRevision(4));
revisionsAllProperties.add(getPropertyRevision(5));

List<MwRevision> revisionsAllLexemes = new ArrayList<>();
revisionsAllLexemes.add(getLexemeRevision(9));
revisionsAllLexemes.add(getLexemeRevision(10));

List<MwRevision> revisionsAll = new ArrayList<>(revisionsAllItems);
revisionsAll.add(getPageRevision(1));
revisionsAll.add(getPageRevision(2));
revisionsAll.addAll(revisionsAllProperties);
revisionsAll.addAll(revisionsAllLexemes);

List<MwRevision> revisionsAllCurrent = new ArrayList<>();
revisionsAllCurrent.add(getItemRevision(5));
revisionsAllCurrent.add(getPageRevision(2));
revisionsAllCurrent.add(getPropertyRevision(5));
revisionsAllCurrent.add(getLexemeRevision(10));

assertEquals(""Wikidata Toolkit Test"", tmrpAll.siteName);
assertEquals(revisionsAll.size(), mwrpAllStats.getTotalRevisionCount());
assertEquals(revisionsAll.size(),
mwrpAllStats.getCurrentRevisionCount());
assertEqualRevisionLists(revisionsAll, tmrpAll.revisions, ""all"");
assertEqualRevisionLists(revisionsAllItems, tmrpAllItems.revisions,
""allitems"");
assertEqualRevisionLists(revisionsAllCurrent, tmrpAllCurrent.revisions,
""allcurrent"");
assertEqualRevisionLists(revisionsAllProperties,
tmrpAllProperties.revisions, ""allproperties"");
assertEqualRevisionLists(revisionsAllLexemes,
tmrpAllLexemes.revisions, ""alllexemes"");

assertEquals(revisionsAllItems.size(), edpAllCounter.itemCount);
assertEquals(revisionsAllProperties.size(), edpAllCounter.propCount);
assertEquals(1, edpCurrentCounter.itemCount);
assertEquals(1, edpCurrentCounter.propCount);
}""","""@Test
	public void getDumpFileCompressionType() {
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""foo.tar.gz""), CompressionType.GZIP);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""bar.txt.bz2""), CompressionType.BZ2);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""baz.txt""), CompressionType.NONE);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""bat.txt""), CompressionType.NONE);
	}"""
wikidata/wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d,wdtk-dumpfiles,org.wikidata.wdtk.dumpfiles.MwDumpFileProcessingTest.testMwMostRecentFullDumpFileProcessing,org.wikidata.wdtk.dumpfiles.wmf.WmfDumpFileTest.getDumpFileCompressionType,0,"""@Test
public void testMwMostRecentFullDumpFileProcessing() throws IOException {
Path dmPath = Paths.get(System.getProperty(""user.dir""));
MockDirectoryManager dm = new MockDirectoryManager(dmPath, true);
mockLocalDumpFile(""20140418"", 2, DumpContentType.FULL, dm);

DumpProcessingController dpc = new DumpProcessingController(
""wikidatawiki"");
dpc.downloadDirectoryManager = dm;
dpc.setOfflineMode(true);

StatisticsMwRevisionProcessor mwrpStats = new StatisticsMwRevisionProcessor(
""stats"", 2);
dpc.registerMwRevisionProcessor(mwrpStats, null, false);

dpc.processMostRecentMainDump();

assertEquals(9, mwrpStats.getTotalRevisionCount());
assertEquals(9, mwrpStats.getCurrentRevisionCount());
}""","""@Test
	public void getDumpFileCompressionType() {
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""foo.tar.gz""), CompressionType.GZIP);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""bar.txt.bz2""), CompressionType.BZ2);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""baz.txt""), CompressionType.NONE);
		assertEquals(WmfDumpFile.getDumpFileCompressionType(""bat.txt""), CompressionType.NONE);
	}"""
